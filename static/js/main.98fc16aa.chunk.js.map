{"version":3,"sources":["components/Filter/Filter.utils.ts","components/Filter/Filter.actions.ts","components/Pencil/Pencil.utils.ts","components/Pencil/Pencil.actions.ts","components/Gallery/Gallery.utils.ts","components/Pencil/Pencil.hooks.ts","components/Taxonomy/Taxonomy.actions.ts","components/Taxonomy/Taxonomy.hooks.ts","components/Filter/Filter.hooks.ts","components/Filter/Filter.messages.ts","components/Filter/Globe/Globe.tsx","components/App/App.messages.ts","components/PencilInfo/TagHeader/TagHeader.messages.ts","components/PencilInfo/TagHeader/TagHeader.tsx","components/Filter/Filter.tsx","components/Gallery/Grid/Grid.utils.ts","components/Gallery/Grid/Grid.tsx","components/Loader/Loader.tsx","components/Gallery/Gallery.tsx","components/Map/Map.utils.ts","components/Map/Map.tsx","components/PageTitle/PageTitle.messages.ts","components/PageTitle/PageTitle.tsx","components/PencilInfo/Info/Info.hooks.ts","components/PencilInfo/Info/Info.utils.ts","components/PencilInfo/Info/Info.messages.ts","components/PencilInfo/Info/Info.tsx","components/PencilInfo/PencilInfo.tsx","components/Taxonomy/Taxonomy.messages.ts","components/Taxonomy/Taxonomy.tsx","components/App/App.tsx","appConfig.ts","api.ts","components/Taxonomy/Taxonomy.epic.ts","components/Taxonomy/Taxonomy.api.ts","components/Pencil/Pencil.api.ts","components/Pencil/Pencil.epic.ts","rootEpic.ts","rootReducer.ts","store.ts","index.tsx"],"names":["mapFilterToQueryString","filter","qs","stringify","pickBy","Boolean","addQueryPrefix","mapQueryStringToFilter","querystring","window","location","search","input","parse","ignoreQueryPrefix","emptyFilter","country","display","tag","filterKeys","Object","keys","pick","initialState","createSlice","name","reducers","set","state","payload","filterActions","actions","filterReducer","reducer","mapRequestToCacheId","request","cahceIdParts","id","query","page","push","join","pencil","cache","data","requestSingle","action","requestList","single","list","merge","cacheId","pages","pencils","geo","ids","map","mapKeys","item","mapPencilsResponseToStore","pencilActions","pencilReducer","pencilSelector","requestFirstPage","usePencilStore","useSelector","useNormalizedPencils","usePencilCache","userQuery","useFilter","currentFilter","mapQueryToCacheId","usePencil","queries","dispatch","useDispatch","normalized","undefined","targetQueries","flatMap","currentPage","totalPages","records","Error","getPencilsFromCacheByQuery","useEffect","isNotCached","isUndefined","forEach","taxonomy","pending","failure","pencilCount","countries","tags","statistic","items","success","taxonomyActions","taxonomyReducer","taxonomySelector","useTaxonomy","useCountries","useCountryRecord","store","dispatchFilter","useCallback","newFilter","isMatch","updateFilter","update","setFilter","isFiltered","defineMessages","title","defaultMessage","option","all","Globe","animated","isAnimated","useState","frames","index","setIndex","spin","setTimeout","nextIndex","length","clearTimeout","appMessages","TagHeader","countryCount","onClick","className","messages","values","count","Filter","intl","useIntl","history","useHistory","useLocation","actionRef","useRef","newSearch","current","unlisten","listen","useFilerQueryString","htmlFor","value","onChange","e","target","formatMessage","flag","getGridImageSources","size","fullSrc","thumbSrc","src","srcSet","Grid","grid","preview","photos","classNames","href","preventDefault","alt","loading","Loader","Gallery","setQueries","cached","last","hasNextPage","isNumber","document","documentElement","scrollTop","loadNextPage","onScroll","useMemo","throttle","scrollBottomLine","pageYOffset","innerHeight","body","clientHeight","checkWindowScroll","leading","trailing","addEventListener","removeEventListener","projection","geoProjection","lambda","phi","PI","Math","sin","t","tan","s","translate","mapWidth","mapHeight","topology","geography","topologies","feature","objects","world","features","pathD","geoPath","Map","countryRecord","filterCountries","geoId","useFilterCountries","activeCountries","width","height","viewBox","hasPencil","isSelected","data-testid","d","PageTitle","normalizedPencils","counry","countryFlag","usePseudoClick","stopPropagation","targetElement","tagName","link","getAttribute","filterFromLink","parsed","isEmpty","getFilterFromLink","unknown","Info","handlePseudoLink","city","scroller","highlighIndex","setHiglightedIndex","getThumbClassName","el","onScrollChange","debounce","requestAnimationFrame","round","idAttr","style","backgroundImage","ref","dangerouslySetInnerHTML","__html","content","PencilInfo","overflow","error","Taxonomy","children","useTaxonomyRequest","reload","App","locale","defaultLocale","apiUrl","process","appConfig","apiRequest","path","fetch","then","response","ok","json","String","status","catch","console","taxonomyEpic","combineEpics","action$","pipe","match","switchMap","from","catchError","of","apiRequestPencilList","pathParts","encodeURIComponent","toLowerCase","replace","mapPencilListQueryRequestUrl","pencilEpic","concatMap","mapPencilsingleQueryRequestUrl","rootEpic","rootReducer","combineReducers","epicMiddleware","createEpicMiddleware","configureStore","middleware","run","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.98fc16aa.chunk.js","sourcesContent":["import pick from 'lodash/pick'\nimport pickBy from 'lodash/pickBy'\nimport qs from 'qs'\nimport { Filter } from './Filter.interface'\n\nexport const getEmptyFilter = (): Filter => ({\n  country: '',\n  display: '',\n  tag: '',\n})\n\nexport const mapFilterToQueryString = (filter: Partial<Filter>) =>\n  qs.stringify(pickBy(filter, Boolean), { addQueryPrefix: true })\n\nexport const mapQueryStringToFilter = (querystring = window.location.search): Filter => {\n  const input = qs.parse(querystring, { ignoreQueryPrefix: true })\n  const emptyFilter = getEmptyFilter()\n  const filterKeys = Object.keys(emptyFilter)\n  const filter = pick(input, filterKeys)\n\n  return { ...emptyFilter, ...filter }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { Filter } from './Filter.interface'\nimport { mapQueryStringToFilter } from './Filter.utils'\nimport { RootState } from '../../store'\n\nconst initialState = mapQueryStringToFilter()\n\nconst filter = createSlice({\n  name: 'filter',\n  initialState,\n  reducers: {\n    set: (state, { payload }: PayloadAction<Filter>) => payload,\n  },\n})\n\nexport const filterActions = filter.actions\nexport const filterReducer = filter.reducer\nexport const filterSelector = (state: RootState) => state.filter\n","import mapKeys from 'lodash/mapKeys'\nimport {\n  Pencil,\n  PencilCache,\n  PencilCacheItem,\n  PencilListResponse,\n  PencilPages,\n  PencilQuery,\n  PencilSingleRequest,\n  PencilsNormalized,\n  PencilRootState,\n  PencilRequest,\n} from './Pencil.interface'\n\nconst getEmptyPencilCacheItem = (): PencilCacheItem => ({\n  ids: [],\n  geo: [],\n  pages: {\n    currentPage: 0,\n    totalPages: 0,\n    records: 0,\n    pencils: 0,\n  },\n})\n\nexport const mapPencilsingleQueryRequestUrl = ({ id }: PencilSingleRequest): string =>\n  `/pencil/${id}/`\n\nexport const mapPencilListQueryRequestUrl = ({ page, tag, country }: PencilQuery): string => {\n  const pathParts: string[] = []\n  const sanitize = (input: string) => encodeURIComponent(input.toLowerCase().replace(/\\s/g, '-'))\n\n  if (tag && country) {\n    throw new Error('no tag and country at the same time')\n  }\n\n  if (tag) {\n    pathParts.push(`tags/${sanitize(tag)}`)\n  }\n  if (country) {\n    pathParts.push(`geo/${country.toLowerCase()}`)\n  }\n  if (page && page !== 1) {\n    pathParts.push(`page/${page}`)\n  }\n\n  return `/${pathParts.join('/')}/`\n}\n\nexport const mapRequestToCacheId = (request: PencilRequest): string => {\n  const cahceIdParts = ['']\n  if (request.id) {\n    return `id:${request.id}`\n  } else if (request.query) {\n    const { page, tag, country } = request.query\n    if (page) {\n      cahceIdParts.push(`p:${page}`)\n    }\n    if (tag) {\n      cahceIdParts.push(`t:${tag}`)\n    }\n    if (country) {\n      cahceIdParts.push(`c:${country}`)\n    }\n  }\n\n  return cahceIdParts.join('/')\n}\n\nexport const mapPencilsResponseToStore = ({\n  cacheId,\n  pages,\n  data: pencils,\n  geo,\n}: PencilListResponse): PencilRootState => {\n  const ids = pencils.map(({ id }) => id)\n  const data = mapKeys(pencils, item => item.id)\n\n  return { data, cache: { [cacheId]: { ids, pages, geo } } }\n}\n\nexport const getNextPageNumberFromPages = (pages?: PencilPages) => {\n  if (pages) {\n    if (pages.currentPage < pages.totalPages) {\n      return pages.currentPage + 1\n    }\n  }\n\n  return null\n}\n\nexport const getPencilsFromCacheByQuery = (\n  query: PencilQuery,\n  cache: Partial<PencilCache>,\n  normalized: PencilsNormalized,\n): Pencil[] => {\n  const pencilCache: PencilCacheItem =\n    cache[mapRequestToCacheId({ query })] || getEmptyPencilCacheItem()\n  const pencils = pencilCache.ids.map(id => {\n    const data = normalized[id]\n    if (!data) {\n      throw new Error(`no cache for id ${id}`)\n    }\n\n    return data\n  })\n\n  return pencils\n}\n","import merge from 'lodash/merge'\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport {\n  PencilRootState,\n  PencilListResponse,\n  PencilSingleResponse,\n  PencilSingleRequest,\n  PencilListRequest,\n} from './Pencil.interface'\nimport { mapPencilsResponseToStore } from './Pencil.utils'\nimport { RootState } from '../../store'\n\nconst initialState: PencilRootState = {\n  cache: {},\n  data: {},\n}\n\nconst pencil = createSlice({\n  name: 'pencil',\n  initialState,\n  reducers: {\n    requestSingle: (state, action: PayloadAction<PencilSingleRequest>) => {},\n    requestList: (state, action: PayloadAction<PencilListRequest>) => {},\n\n    single: (state, { payload }: PayloadAction<PencilSingleResponse>) => {\n      state.data[payload.id] = payload\n    },\n\n    list: (state, { payload }: PayloadAction<PencilListResponse>) => {\n      merge(state, mapPencilsResponseToStore(payload))\n    },\n  },\n})\n\nexport const pencilActions = pencil.actions\nexport const pencilReducer = pencil.reducer\n\nexport const pencilSelector = (state: RootState) => state.pencils\n","import { PencilQuery } from '../Pencil/Pencil.interface'\n\nexport const requestFirstPage = (query: PencilQuery): PencilQuery => ({ ...query, page: 1 })\n\nexport const checkFinishZone = (total: number, current: number) => {\n  const sensivity = total * 0.6\n  const thresholdReached = sensivity < current\n\n  return thresholdReached\n}\n\nexport const checkWindowScroll = () => {\n  const scrollBottomLine = window.pageYOffset + window.innerHeight\n\n  return checkFinishZone(document.body.clientHeight, scrollBottomLine)\n}\n","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport isUndefined from 'lodash/isUndefined'\nimport flatMap from 'lodash/flatMap'\nimport { pencilActions, pencilSelector } from './Pencil.actions'\nimport { PencilProps, PencilQuery } from './Pencil.interface'\nimport {\n  getPencilsFromCacheByQuery,\n  mapRequestToCacheId,\n  mapRequestToCacheId as mapQueryToCacheId,\n} from './Pencil.utils'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { requestFirstPage } from '../Gallery/Gallery.utils'\n\nconst usePencilStore = () => useSelector(pencilSelector)\n\nexport const useNormalizedPencils = () => usePencilStore().data\n\nexport const usePencilCache = (userQuery?: PencilQuery) => {\n  const [currentFilter] = useFilter()\n  const { cache } = usePencilStore()\n\n  const filter = userQuery || currentFilter\n  const query = (filter?.page ?? 0) > 1 ? filter : requestFirstPage(filter)\n  const queryCacheId = mapQueryToCacheId({ query })\n  const cacheItem = cache[queryCacheId]\n\n  return cacheItem\n}\n\nexport const usePencil = ({ id, query, queries }: PencilProps) => {\n  const dispatch = useDispatch()\n  const { cache } = usePencilStore()\n  const normalized = useNormalizedPencils()\n  const pencil = id ? normalized[id] : undefined\n  const targetQueries = query ? [query] : queries ? queries : []\n  const pencils = flatMap(targetQueries, query =>\n    getPencilsFromCacheByQuery(query, cache, normalized),\n  )\n\n  useEffect(() => {\n    const isNotCached = (query: PencilQuery) => isUndefined(cache[mapRequestToCacheId({ query })])\n\n    if (id && !pencil) {\n      dispatch(pencilActions.requestSingle({ id }))\n    } else if (query && isNotCached(query)) {\n      dispatch(pencilActions.requestList({ query }))\n    } else if (queries) {\n      queries.filter(isNotCached).forEach(query => {\n        dispatch(pencilActions.requestList({ query }))\n      })\n    }\n  }, [dispatch, id, query, queries, pencil, cache])\n\n  return { pencil, pencils }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { TaxonomyAppStore as StoreTaxonomy, TaxonomyResponse } from './Taxonomy.interface'\nimport { RootState } from '../../store'\n\nconst initialState: StoreTaxonomy = {\n  pending: true,\n  failure: false,\n  pencilCount: 0,\n  countries: [],\n  tags: [],\n  statistic: { tags: 0, countries: 0, items: 0, pencils: 0 },\n}\n\nconst taxonomy = createSlice({\n  initialState,\n  name: 'taxonomy',\n  reducers: {\n    request: state => {\n      state.pending = true\n    },\n    success: (state, { payload }: PayloadAction<TaxonomyResponse>) => {\n      state.failure = false\n      state.pending = false\n      state.countries = payload.countries\n      state.pencilCount = payload.statistic.pencils\n      state.statistic = payload.statistic\n      state.tags = payload.tags\n    },\n    failure: state => {\n      state.pending = false\n      state.failure = true\n    },\n  },\n})\n\nexport const taxonomyActions = taxonomy.actions\nexport const taxonomyReducer = taxonomy.reducer\nexport const taxonomySelector = (state: RootState) => state.taxonomy\n","import { useSelector, useDispatch } from 'react-redux'\nimport { useEffect } from 'react'\nimport mapKeys from 'lodash/mapKeys'\nimport { taxonomyActions, taxonomySelector } from './Taxonomy.actions'\n\nexport const useTaxonomy = () => useSelector(taxonomySelector)\n\nexport const useTaxonomyRequest = () => {\n  const dispatch = useDispatch()\n  const { pending, failure } = useTaxonomy()\n\n  useEffect(() => {\n    dispatch(taxonomyActions.request())\n  }, [dispatch])\n\n  return { pending, failure }\n}\n\nexport const useCountries = () => {\n  const { countries } = useTaxonomy()\n\n  return countries\n}\n\nexport const useCountryRecord = () => {\n  const countries = useCountries()\n\n  return mapKeys(countries, ({ geo }) => geo)\n}\n","import isMatch from 'lodash/isMatch'\nimport { useCallback, useEffect, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { RootState } from './../../store'\nimport { filterActions } from './Filter.actions'\nimport { Filter } from './Filter.interface'\nimport { mapFilterToQueryString, getEmptyFilter, mapQueryStringToFilter } from './Filter.utils'\nimport { usePencilCache } from '../Pencil/Pencil.hooks'\nimport { useCountryRecord } from '../Taxonomy/Taxonomy.hooks'\n\nexport const useFilter = () => {\n  const filter = useSelector<RootState, Filter>(store => store.filter)\n  const dispatch = useDispatch()\n\n  const dispatchFilter = useCallback(\n    (newFilter: Filter) => {\n      if (!isMatch(filter, newFilter)) {\n        dispatch(filterActions.set(newFilter))\n      }\n    },\n    [filter, dispatch],\n  )\n\n  const updateFilter = useCallback(\n    (update: Partial<Filter>) => dispatchFilter({ ...filter, ...update }),\n    [dispatchFilter, filter],\n  )\n\n  const setFilter = useCallback(\n    (update: Partial<Filter>) => dispatchFilter({ ...getEmptyFilter(), ...update }),\n    [dispatchFilter],\n  )\n\n  const isFiltered = Boolean(filter.country || filter.tag)\n\n  return [\n    filter,\n    {\n      isFiltered,\n      setFilter,\n      updateFilter,\n    },\n  ] as const\n}\n\nexport const useFilerQueryString = () => {\n  const history = useHistory()\n  const { search } = useLocation()\n  const [filter, { updateFilter }] = useFilter()\n  const skipAction = 'POP'\n  const actionRef = useRef('')\n\n  useEffect(() => {\n    const newSearch = mapFilterToQueryString(filter)\n    if (newSearch !== search && actionRef.current !== skipAction) {\n      history.push({ search: newSearch, state: filter })\n    }\n  }, [filter, history, search])\n\n  useEffect(() => {\n    const unlisten = history.listen(({ search, state }, action) => {\n      actionRef.current = action\n      if (action === skipAction) {\n        updateFilter(mapQueryStringToFilter(search))\n      }\n    })\n\n    return () => {\n      unlisten()\n    }\n  }, [history, updateFilter])\n}\n\nexport const useFilterCountries = () => {\n  const cache = usePencilCache()\n  const countries = useCountryRecord()\n\n  return (cache?.geo || []).map(geoId => countries[geoId])\n}\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: `{pencils} из {countries}`,\n    id: 'Filter.title',\n  },\n\n  option: {\n    defaultMessage: `{flag} {country} {count}`,\n    id: 'Filter.option',\n  },\n\n  all: {\n    defaultMessage: 'Все страны',\n    id: 'Filter.all',\n  },\n})\n","import { useEffect, useState } from 'react'\nimport { GlobeProps } from './Globe.interface'\n\nconst Globe = ({ animated }: GlobeProps) => {\n  const isAnimated = Boolean(animated)\n  const [frames] = useState(['🌍', '🌏', '🌎'])\n  const speed = 400\n  const [index, setIndex] = useState(0)\n  useEffect(() => {\n    if (isAnimated) {\n      const spin = setTimeout(() => {\n        const nextIndex = index + 1 === frames.length ? 0 : index + 1\n        setIndex(nextIndex)\n      }, speed)\n\n      return () => {\n        clearTimeout(spin)\n      }\n    }\n  }, [isAnimated, speed, index, setIndex, frames])\n\n  return <>{frames[index]}</>\n}\n\nexport default Globe\n","import { defineMessages } from 'react-intl'\n\nexport const appMessages = defineMessages({\n  pencil: {\n    defaultMessage: `{count, plural,\n      one {# карандаш}\n      few {# карандаша}\n      many {# карандашей}\n    }`,\n    id: 'App.pencil',\n  },\n\n  country: {\n    defaultMessage: `{count, plural,\n      one {# страны}\n      few {# стран}\n      many {# стран}\n    }`,\n    id: 'App.country',\n  },\n})\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: '🏷 {pencilCount} из {countryCount} в категории \"{tag}\"',\n    id: 'TagHeader.title',\n  },\n})\n","import { FormattedMessage } from 'react-intl'\nimport messages from './TagHeader.messages'\nimport { appMessages } from '../../App/App.messages'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { usePencilCache } from '../../Pencil/Pencil.hooks'\n\nconst TagHeader = () => {\n  const [{ tag }, { updateFilter }] = useFilter()\n  const cache = usePencilCache()\n\n  if (tag && cache) {\n    const pencilCount = cache.pages.pencils\n    const countryCount = cache.geo.length\n\n    return (\n      <button onClick={() => updateFilter({ tag: '' })} className=\"TagHeader-drop\">\n        <FormattedMessage\n          {...messages.title}\n          values={{\n            tag,\n            pencilCount: (\n              <FormattedMessage {...appMessages.pencil} values={{ count: pencilCount }} />\n            ),\n            countryCount: (\n              <FormattedMessage {...appMessages.country} values={{ count: countryCount }} />\n            ),\n          }}\n        />\n      </button>\n    )\n  }\n\n  return null\n}\n\nexport default TagHeader\n","import { FormattedMessage, useIntl } from 'react-intl'\nimport { useFilter, useFilerQueryString } from './Filter.hooks'\nimport messages from './Filter.messages'\nimport Globe from './Globe'\nimport { useTaxonomy, useCountries } from '../Taxonomy/Taxonomy.hooks'\nimport { appMessages } from '../App/App.messages'\nimport TagHeader from '../PencilInfo/TagHeader'\n\nconst Filter = () => {\n  const intl = useIntl()\n  const [filter, { updateFilter, setFilter, isFiltered }] = useFilter()\n  const { statistic } = useTaxonomy()\n  const countries = useCountries()\n\n  useFilerQueryString()\n\n  const htmlFor = 'country-filter'\n\n  return (\n    <div className=\"Filter\">\n      <div className=\"Filter-control\">\n        <label\n          htmlFor={htmlFor}\n          className=\"Filter-label\"\n          onClick={() => isFiltered && updateFilter({ country: '' })}\n        >\n          <span className=\"Filter-Globe\">\n            <Globe animated={isFiltered} />\n          </span>\n          <FormattedMessage\n            {...messages.title}\n            values={{\n              pencils: (\n                <span className=\"Filter-span\">\n                  <FormattedMessage {...appMessages.pencil} values={{ count: statistic.pencils }} />\n                </span>\n              ),\n              countries: (\n                <span className=\"Filter-span\">\n                  <FormattedMessage\n                    {...appMessages.country}\n                    values={{ count: statistic.countries }}\n                  />\n                </span>\n              ),\n            }}\n          />\n        </label>\n      </div>\n      <div className=\"Filter-control\">\n        <select\n          id={htmlFor}\n          className=\"Filter-select\"\n          value={filter.country}\n          onChange={e => setFilter({ country: e.target.value })}\n        >\n          <option key=\"empty-country\" value=\"\">\n            {intl.formatMessage(messages.all)}\n          </option>\n\n          {countries.map(country => (\n            <option key={country.name} value={country.geo}>\n              {intl.formatMessage(messages.option, {\n                flag: country.flag,\n                country: country.name,\n                count: country.pencils,\n              })}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {filter.tag ? (\n        <div className=\"Filter-control\">\n          <TagHeader />\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nexport default Filter\n","import { ImgHTMLAttributes } from 'react'\nimport { PencilGridSize } from '../../Pencil/Pencil.interface'\n\nexport const getGridImageSources = (\n  size: PencilGridSize,\n  fullSrc: string,\n  thumbSrc: string,\n): ImgHTMLAttributes<{}> => {\n  switch (size) {\n    case 3:\n      return { src: fullSrc }\n\n    case 2:\n      return { src: thumbSrc, srcSet: `${thumbSrc}, ${fullSrc} 2x` }\n\n    default:\n      return { src: thumbSrc }\n  }\n}\n","import classNames from 'classnames'\nimport { GridProps } from './Grid.interface'\nimport { getGridImageSources } from './Grid.utils'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { mapFilterToQueryString } from '../../Filter/Filter.utils'\n\nconst Grid = ({ pencils }: GridProps) => {\n  const [, { updateFilter }] = useFilter()\n\n  return (\n    <div className=\"Grid\">\n      {pencils.map(pencil => {\n        const size = pencil.grid\n        const thumbSrc = pencil.preview\n        const fullSrc = pencil.photos[0]\n        const className = classNames('GridItem', size === 2 && 'size2', size === 3 && 'size3')\n        const onClick = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n          e.preventDefault()\n          updateFilter({ display: pencil.id })\n        }\n\n        return (\n          <a\n            href={mapFilterToQueryString({ display: pencil.id })}\n            onClick={onClick}\n            className={className}\n            key={pencil.id}\n            title={pencil.title}\n          >\n            <img\n              alt={pencil.title}\n              loading=\"lazy\"\n              {...getGridImageSources(size, fullSrc, thumbSrc)}\n            />\n          </a>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Grid\n","import Globe from '../Filter/Globe'\n\nconst Loader = () => (\n  <div className=\"Loader\">\n    <Globe animated />\n  </div>\n)\n\nexport default Loader\n","import last from 'lodash/last'\nimport throttle from 'lodash/throttle'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport isNumber from 'lodash/isNumber'\nimport { checkWindowScroll, requestFirstPage } from './Gallery.utils'\nimport Grid from './Grid'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { usePencilCache, usePencil } from '../Pencil/Pencil.hooks'\nimport { PencilQuery } from '../Pencil/Pencil.interface'\nimport { getNextPageNumberFromPages } from '../Pencil/Pencil.utils'\nimport Loader from '../Loader'\n\nconst Gallery = () => {\n  const [filter] = useFilter()\n  const [queries, setQueries] = useState<PencilQuery[]>([])\n  const { pencils } = usePencil({ queries })\n  const cached = usePencilCache(last(queries))\n  const { country, tag } = filter\n  const page = getNextPageNumberFromPages(cached?.pages)\n  const hasNextPage = isNumber(page)\n\n  useEffect(() => {\n    setQueries([requestFirstPage({ country, tag })])\n    document.documentElement.scrollTop = 0\n  }, [country, tag])\n\n  const loadNextPage = useCallback(() => {\n    if (page) {\n      setQueries([...queries, { ...filter, page }])\n    }\n  }, [filter, queries, setQueries, page])\n\n  const onScroll = useMemo(\n    () =>\n      throttle(\n        () => {\n          if (page && checkWindowScroll()) {\n            loadNextPage()\n          }\n        },\n        100,\n        { leading: false, trailing: false },\n      ),\n    [loadNextPage, page],\n  )\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll)\n\n    return () => {\n      window.removeEventListener('scroll', onScroll)\n    }\n  }, [onScroll])\n\n  return (\n    <>\n      <Grid pencils={pencils} />\n      {hasNextPage && (\n        <div className=\"Gallery-loader\">\n          <Loader />\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default Gallery\n","import { geoPath, GeoRawProjection } from 'd3-geo'\nimport { geoProjection } from 'd3-geo'\nimport { FeatureCollection, GeoJsonProperties, Geometry } from 'geojson'\nimport { feature } from 'topojson-client'\nimport { Topology } from 'topojson-specification'\nimport { TopologyItem } from './Map.interface.js'\nimport geography from './world.json'\n\nexport const mapWidth = 800\nexport const mapHeight = 400\n\nconst timesRaw: GeoRawProjection = (lambda, phi) => {\n  // https://github.com/d3/d3-geo-projection/blob/master/src/times.js\n  const { PI, sin, tan } = Math\n  const t = tan(phi / 2)\n  const quarterPi = PI / 4\n  const s = sin(quarterPi * t)\n\n  return [lambda * (0.74482 - 0.34588 * s * s), 1.70711 * t]\n}\n\nconst projection = geoProjection(timesRaw).translate([mapWidth / 2, mapHeight / 2 + 40])\nconst topology: Topology = geography as any\nconst featureCollection = feature(topology, topology.objects.world) as FeatureCollection<\n  Geometry,\n  GeoJsonProperties\n>\n\nexport const topologies = featureCollection.features.map<TopologyItem>(geo => {\n  const pathD = geoPath().projection(projection)(geo)\n  if (pathD === null) {\n    throw new Error()\n  }\n\n  return { ...geo, pathD }\n})\n","import classNames from 'classnames'\nimport isUndefined from 'lodash/isUndefined'\nimport mapKeys from 'lodash/mapKeys'\nimport { mapHeight, mapWidth, topologies } from './Map.utils'\nimport { useFilter, useFilterCountries } from '../Filter/Filter.hooks'\nimport { useCountryRecord } from '../Taxonomy/Taxonomy.hooks'\n\nconst Map = () => {\n  const [, { setFilter, updateFilter }] = useFilter()\n  const countryRecord = useCountryRecord()\n  const filterCountries = useFilterCountries()\n\n  const activeCountries = mapKeys(filterCountries, ({ geo }) => geo)\n\n  return (\n    <div className=\"Map\">\n      <div className=\"Map-flags\">\n        {filterCountries.map(({ flag }) => (\n          <span key={flag}>{flag}</span>\n        ))}\n      </div>\n      <svg\n        width={mapWidth}\n        height={mapHeight}\n        viewBox={`0 0 ${mapWidth} ${mapHeight}`}\n        className=\"Map-block\"\n      >\n        {topologies.map(topology => {\n          const geoId = topology.id as string\n          const country = countryRecord[geoId]\n          const hasPencil = !isUndefined(country)\n          const isSelected = !isUndefined(activeCountries[geoId])\n          const className = classNames(\n            'Map-country',\n            hasPencil && 'Map-has-pencil',\n            isSelected && 'Map-selected',\n          )\n          const onClick = () => {\n            if (isSelected) {\n              updateFilter({ country: '' })\n            } else if (hasPencil) {\n              setFilter({ country: geoId })\n            }\n          }\n\n          return (\n            <path\n              data-testid={geoId}\n              key={geoId}\n              className={className}\n              d={topology.pathD}\n              onClick={onClick}\n            >\n              {<title>{country?.name}</title>}\n            </path>\n          )\n        })}\n      </svg>\n    </div>\n  )\n}\n\nexport default Map\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: 'В коробке с карандашами',\n    id: 'PageTitle.title',\n  },\n\n  pencil: {\n    defaultMessage: '{flag} {title}. {country}',\n    id: 'PageTitle.pencil',\n  },\n\n  country: {\n    defaultMessage: '{countryFlag} {country}. {pencils}',\n    id: 'PageTitle.country',\n  },\n\n  tag: {\n    defaultMessage: '\"{tag}\" {pencils} из {countries}',\n    id: 'PageTitle.tag',\n  },\n})\n","import { useEffect } from 'react'\nimport { useIntl } from 'react-intl'\nimport messages from './PageTitle.messages'\nimport { appMessages } from '../App/App.messages'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { useNormalizedPencils, usePencilCache } from '../Pencil/Pencil.hooks'\nimport { useCountryRecord } from '../Taxonomy/Taxonomy.hooks'\n\nconst PageTitle = () => {\n  const [filter] = useFilter()\n  const intl = useIntl()\n  const normalizedPencils = useNormalizedPencils()\n  const cache = usePencilCache()\n\n  const pencil = normalizedPencils[filter.display]\n  const countryRecord = useCountryRecord()\n  const counry = countryRecord[filter.country]\n\n  useEffect(() => {\n    if (pencil) {\n      if (pencil.country) {\n        const { flag, name } = pencil.country\n        document.title = intl.formatMessage(messages.pencil, {\n          title: pencil.title,\n          flag,\n          country: name,\n        })\n      } else {\n        document.title = pencil.title\n      }\n    } else if (filter.country && counry) {\n      document.title = intl.formatMessage(messages.country, {\n        countryFlag: counry.flag,\n        country: counry.name,\n        pencils: intl.formatMessage(appMessages.pencil, { count: counry.pencils }),\n      })\n    } else if (filter.tag && cache) {\n      const pencilCount = cache.pages.pencils\n      const countryCount = cache.geo.length\n\n      document.title = intl.formatMessage(messages.tag, {\n        tag: filter.tag,\n        countries: intl.formatMessage(appMessages.country, { count: countryCount }),\n        pencils: intl.formatMessage(appMessages.pencil, { count: pencilCount }),\n      })\n    } else {\n      document.title = intl.formatMessage(messages.title)\n    }\n  }, [intl, pencil, filter, counry, cache])\n\n  return null\n}\n\nexport default PageTitle\n","import { useCallback } from 'react'\nimport { getFilterFromLink } from './Info.utils'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { getEmptyFilter } from '../../Filter/Filter.utils'\n\nexport const usePseudoClick = () => {\n  const [, { updateFilter }] = useFilter()\n  const handlePseudoLink = useCallback(\n    (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      e.stopPropagation()\n      const targetElement = e.target as HTMLElement\n      if (targetElement.tagName === 'A') {\n        const link = targetElement.getAttribute('href')\n        if (link) {\n          const filterFromLink = getFilterFromLink(link)\n          if (filterFromLink) {\n            e.preventDefault()\n            updateFilter({ ...getEmptyFilter(), ...filterFromLink })\n          }\n        }\n      }\n    },\n    [updateFilter],\n  )\n\n  return handlePseudoLink\n}\n","import isEmpty from 'lodash/isEmpty'\nimport pick from 'lodash/pick'\nimport qs from 'qs'\nimport { Filter } from './../../Filter/Filter.interface'\nimport { getEmptyFilter } from './../../Filter/Filter.utils'\nimport { Pencil } from '../../Pencil/Pencil.interface'\n\nexport const getFilterFromLink = (querystring: string): Filter | null => {\n  const parsed = qs.parse(querystring, { ignoreQueryPrefix: true }) as {}\n  const filterKeys = Object.keys(getEmptyFilter())\n  const filter = pick(parsed, filterKeys) as Filter\n\n  if (!isEmpty(filter)) {\n    return filter\n  }\n\n  return null\n}\n\nexport const displayPencilLocation = ({ geo, city }: Pick<Pencil, 'geo' | 'city'>) =>\n  [geo, city].filter(Boolean).join(', ')\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  location: {\n    defaultMessage: `{flag} {country}, {city}`,\n    id: 'Info.fullLocation',\n  },\n  unknown: {\n    defaultMessage: 'Неизвестно откуда',\n    id: 'Info.unknown',\n  },\n})\n","import { FormattedMessage } from 'react-intl'\nimport { useEffect, useRef, useState } from 'react'\nimport debounce from 'lodash/debounce'\nimport classNames from 'classnames'\nimport { usePseudoClick } from './Info.hooks'\nimport { InfoProps } from './Info.interface'\nimport messages from './Info.messages'\nimport { mapFilterToQueryString } from '../../Filter/Filter.utils'\n\nconst Info = ({ pencil }: InfoProps) => {\n  const handlePseudoLink = usePseudoClick()\n  const { country, city, photos } = pencil\n  const scroller = useRef<HTMLDivElement | null>(null)\n  const [highlighIndex, setHiglightedIndex] = useState(0)\n\n  const getThumbClassName = (index: number) =>\n    classNames('Info-thumb', {\n      'Info-thumb-highlight': index === highlighIndex,\n      'Info-thumb-info': photos.length === index,\n    })\n\n  useEffect(() => {\n    const el = scroller.current\n    if (el) {\n      const onScrollChange = debounce(() => {\n        requestAnimationFrame(() => {\n          if (el) {\n            setHiglightedIndex(Math.round(el.scrollTop / el.clientHeight))\n          }\n        })\n      }, 16)\n\n      el.addEventListener('scroll', onScrollChange)\n\n      return () => {\n        el.removeEventListener('scroll', onScrollChange)\n      }\n    }\n  }, [])\n\n  return (\n    <div className=\"Info\">\n      <div className=\"Info-thumbs\" onClick={e => e.stopPropagation()}>\n        {photos.map((src, index) => {\n          const idAttr = `#thumb${index}`\n\n          return (\n            <a\n              className={getThumbClassName(index)}\n              key={src}\n              href={idAttr}\n              style={{ backgroundImage: `url(${src})` }}\n            />\n          )\n        })}\n        {pencil.country && (\n          <a className={getThumbClassName(photos.length)} href=\"#info\" title={pencil.country.name}>\n            <span>{pencil.country.flag}</span>\n          </a>\n        )}\n      </div>\n\n      <div className=\"Info-scroller\" ref={scroller}>\n        {pencil.photos.map((src, index) => (\n          <div key={src} className=\"Info-frame\" id={`thumb${index}`}>\n            <img className=\"Info-photo\" alt={pencil.title} src={src} />\n          </div>\n        ))}\n\n        <div className=\"Info-frame Info-content\" id=\"info\" onClick={handlePseudoLink}>\n          <h1>{pencil.title}</h1>\n\n          <b>\n            {city && country ? (\n              <FormattedMessage\n                {...messages.location}\n                values={{\n                  flag: country.flag,\n                  country: country.name,\n                  city: pencil.city,\n                }}\n              />\n            ) : city ? (\n              city\n            ) : (\n              <FormattedMessage {...messages.unknown} />\n            )}\n          </b>\n\n          <article dangerouslySetInnerHTML={{ __html: pencil.content }} className=\"Info-main\" />\n\n          <p>\n            🏷\n            {pencil.tags.map(tag => (\n              <a className=\"Info-tag\" key={tag} href={mapFilterToQueryString({ tag })}>\n                {tag}\n              </a>\n            ))}\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Info\n","import { useEffect, useRef } from 'react'\nimport Info from './Info'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { usePencil } from '../Pencil/Pencil.hooks'\n\nconst PencilInfo = () => {\n  const [{ display }, { updateFilter }] = useFilter()\n  const scroller = useRef<HTMLDivElement>(null)\n  const { pencil } = usePencil({ id: display })\n\n  useEffect(() => {\n    if (display === '') {\n      document.body.style.overflow = 'initial'\n    } else {\n      document.body.style.overflow = 'hidden'\n\n      if (scroller.current) {\n        scroller.current.scrollTop = 0\n      }\n    }\n  }, [display, scroller])\n\n  return pencil ? (\n    <div\n      className=\"PencilInfo-backdrop\"\n      onClick={() => updateFilter({ display: '' })}\n      ref={scroller}\n    >\n      <div className=\"PencilInfo-content\">\n        <Info pencil={pencil} />\n      </div>\n    </div>\n  ) : null\n}\n\nexport default PencilInfo\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  error: {\n    defaultMessage: 'не могу загрузить, попробуй перезагрузить страницу',\n    id: 'Taxonomy.error',\n  },\n})\n","import { FC } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport messages from './Taxonomy.messages'\nimport Loader from '../Loader'\nimport { useTaxonomyRequest } from '../Taxonomy/Taxonomy.hooks'\n\nconst Taxonomy: FC = ({ children }) => {\n  const { pending, failure } = useTaxonomyRequest()\n\n  return (\n    <>\n      {pending || failure ? (\n        <div className=\"Taxonomy-loading\">\n          {pending && <Loader />}\n          {failure && (\n            <button onClick={() => window.location.reload()}>\n              <FormattedMessage {...messages.error} />\n            </button>\n          )}\n        </div>\n      ) : (\n        children\n      )}\n    </>\n  )\n}\n\nexport default Taxonomy\n","import { IntlProvider } from 'react-intl'\nimport Filter from '../Filter'\nimport Gallery from '../Gallery'\nimport Map from '../Map'\nimport PageTitle from '../PageTitle'\nimport PencilInfo from '../PencilInfo'\nimport Taxonomy from '../Taxonomy'\n\nconst App = () => (\n  <IntlProvider locale=\"ru\" defaultLocale=\"ru\">\n    <Taxonomy>\n      <PageTitle />\n      <PencilInfo />\n      <nav className=\"App-block\">\n        <aside className=\"romanyanke\">\n          <a href=\"https://yanke.ru\">\n            <img src=\"https://avatars.githubusercontent.com/romanyanke?size=32\" alt=\"Roman Yanke\" />\n          </a>\n        </aside>\n        <Filter />\n      </nav>\n      <Map />\n      <main className=\"App-block\">\n        <Gallery />\n      </main>\n    </Taxonomy>\n  </IntlProvider>\n)\n\nexport default App\n","const apiUrl = process.env.REACT_APP_API_URL\nif (!apiUrl) {\n  throw new Error('no api url')\n}\n\nconst appConfig = {\n  apiUrl,\n}\n\nexport default appConfig\n","import appConfig from './appConfig'\n\nconst apiRequest = <T>(path: string): Promise<T> =>\n  fetch(appConfig.apiUrl + path)\n    .then(response => {\n      if (response.ok) {\n        return response.json()\n      }\n\n      throw new Error(String(response.status))\n    })\n    .catch(error => {\n      console.error('api', path, error)\n      throw error\n    })\n\nexport default apiRequest\n","import { combineEpics } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { catchError, map, switchMap, filter } from 'rxjs/operators'\nimport { taxonomyActions } from './Taxonomy.actions'\nimport { apiRequestTaxonomy } from './Taxonomy.api'\n\nexport const taxonomyEpic = combineEpics(action$ =>\n  action$.pipe(\n    filter(taxonomyActions.request.match),\n    switchMap(() =>\n      from(apiRequestTaxonomy()).pipe(\n        map(taxonomyActions.success),\n        catchError(() => of(taxonomyActions.failure())),\n      ),\n    ),\n  ),\n)\n","import { TaxonomyResponse } from './Taxonomy.interface'\nimport apiRequest from '../../api'\n\nexport const apiRequestTaxonomy = () => apiRequest<TaxonomyResponse>('/taxonomy/')\n","import {\n  PencilListResponse,\n  PencilSingleRequest,\n  PencilSingleResponse,\n  PencilListRequest,\n} from './Pencil.interface'\nimport {\n  mapPencilListQueryRequestUrl,\n  mapPencilsingleQueryRequestUrl,\n  mapRequestToCacheId,\n} from './Pencil.utils'\nimport apiRequest from '../../api'\n\nexport const apiRequestSinglePencil = (request: PencilSingleRequest) =>\n  apiRequest<PencilSingleResponse>(mapPencilsingleQueryRequestUrl(request))\n\nexport const apiRequestPencilList = (request: PencilListRequest) =>\n  apiRequest<PencilListResponse>(mapPencilListQueryRequestUrl(request.query)).then(data => {\n    data.cacheId = mapRequestToCacheId(request)\n\n    return data\n  })\n","import { combineEpics } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { catchError, filter, map, concatMap } from 'rxjs/operators'\nimport { pencilActions } from './Pencil.actions'\nimport { apiRequestPencilList, apiRequestSinglePencil } from './Pencil.api'\nimport { filterActions } from '../Filter/Filter.actions'\nimport { getEmptyFilter } from '../Filter/Filter.utils'\n\nexport const pencilEpic = combineEpics(\n  action$ =>\n    action$.pipe(\n      filter(pencilActions.requestSingle.match),\n\n      concatMap(({ payload }) =>\n        from(apiRequestSinglePencil(payload)).pipe(\n          map(pencilActions.single),\n          catchError(() => of(filterActions.set(getEmptyFilter()))),\n        ),\n      ),\n    ),\n\n  action$ =>\n    action$.pipe(\n      filter(pencilActions.requestList.match),\n      concatMap(({ payload }) =>\n        from(apiRequestPencilList(payload)).pipe(\n          map(pencilActions.list),\n          catchError(() => of(filterActions.set(getEmptyFilter()))),\n        ),\n      ),\n    ),\n)\n","import { combineEpics } from 'redux-observable'\nimport { taxonomyEpic } from './components/Taxonomy/Taxonomy.epic'\nimport { pencilEpic } from './components/Pencil/Pencil.epic'\n\nexport const rootEpic = combineEpics(taxonomyEpic, pencilEpic)\n","import { combineReducers } from 'redux'\nimport { taxonomyReducer } from './components/Taxonomy/Taxonomy.actions'\nimport { pencilReducer } from './components/Pencil/Pencil.actions'\nimport { filterReducer } from './components/Filter/Filter.actions'\n\nexport const rootReducer = combineReducers({\n  filter: filterReducer,\n  pencils: pencilReducer,\n  taxonomy: taxonomyReducer,\n})\n","import { configureStore, DeepPartial } from '@reduxjs/toolkit'\nimport { createEpicMiddleware } from 'redux-observable'\nimport { rootEpic } from './rootEpic'\nimport { rootReducer } from './rootReducer'\n\nexport type RootState = ReturnType<typeof store.getState>\n\nconst epicMiddleware = createEpicMiddleware()\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: [epicMiddleware],\n})\n\nepicMiddleware.run(rootEpic)\n\nexport const createTestStore = (preloadedState?: DeepPartial<RootState>) =>\n  configureStore({\n    reducer: rootReducer,\n    preloadedState,\n  })\n","import ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './components/App'\nimport './index.css'\nimport { store } from './store'\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}