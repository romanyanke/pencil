{"version":3,"sources":["components/App/App.messages.ts","components/Filter/Filter.utils.ts","components/Filter/Filter.actions.ts","components/Filter/Filter.hooks.ts","components/Gallery/Gallery.utils.ts","components/Pencil/Pencil.utils.ts","components/Pencil/Pencil.hooks.ts","components/Taxonomy/Taxonomy.hooks.ts","components/Filter/Filter.messages.ts","components/Filter/Globe/Globe.tsx","components/Filter/Filter.tsx","components/Loader/Loader.tsx","components/Pencil/Pencil.actions.ts","modules/requestStatus.ts","components/Pencil/Pencil.tsx","appConfig.ts","modules/api.ts","components/Pencil/Pencil.api.ts","components/Gallery/Grid/Grid.tsx","components/Gallery/Gallery.tsx","components/Map/Map.utils.ts","components/Map/Map.tsx","components/PageTitle/PageTitle.messages.ts","components/PageTitle/PageTitle.tsx","components/PencilInfo/Info/Info.messages.ts","components/PencilInfo/Info/Info.tsx","components/PencilInfo/Info/Info.utils.ts","components/PencilInfo/PencilInfo.tsx","components/PencilInfo/TagHeader/TagHeader.messages.ts","components/PencilInfo/TagHeader/TagHeader.tsx","components/Taxonomy/Taxonomy.actions.ts","components/Taxonomy/Taxonomy.tsx","components/App/App.tsx","epics.ts","components/Taxonomy/Taxonomy.epic.ts","components/Taxonomy/Taxonomy.api.ts","components/Pencil/Pencil.epic.ts","store.ts","index.tsx"],"names":["appMessages","defineMessages","pencil","defaultMessage","id","country","error","mapFilterToQueryString","filter","query","qs","stringify","pickBy","Boolean","mapQueryStringToFilter","querystring","window","location","search","input","parse","ignoreQueryPrefix","display","tag","initialState","updateFilter","createStandardAction","filterActions","createReducer","handleAction","state","payload","useFilter","useSelector","store","dispatch","useDispatch","update","requestFirstPage","page","mapRequestToCacheId","request","cahceIdParts","push","join","getCacheAndNormilizedFromList","cacheId","pages","data","ids","map","normalized","reduce","list","cache","usePencil","pencils","usePecnilRequestStatus","requestStatus","useNormalizedPencils","usePencilCache","useCached","userQuery","currentFilter","queryCacheId","mapQueryToCacheId","useTaxonomy","taxonomy","useCountriesNormalizedBy","field","countries","useMemo","title","current","all","Globe","animated","isAnimated","frames","useState","index","setIndex","useEffect","spin","setTimeout","length","clearTimeout","Filter","history","useHistory","pencilCount","intl","useIntl","setFilter","cached","isFiltered","select","useRef","listen","action","className","onClick","focus","messages","values","count","ref","value","onChange","e","target","key","formatMessage","isCurrent","name","flag","Loader","idle","pending","fulfilled","rejected","requestSinglePencil","createAsyncAction","requestPencilList","pencilActions","failure","success","Pencil","queries","children","undefined","acc","total","nextUrl","items","Error","getPencilsFromCacheByQuery","isNotCached","isUndefined","forEach","apiUrl","process","appConfig","apiRequest","path","fetch","then","response","json","catch","console","apiRequestPencilList","pathParts","sanitize","encodeURIComponent","toLowerCase","replace","mapPencilListQueryRequestUrl","Grid","thumbSize","preview","fullSize","photos","useSize","grid","href","preventDefault","classNames","size2","size3","srcSet","alt","src","Gallery","setQueries","lastQuery","nextPageNumber","onScroll","throttle","scrollBottomLine","pageYOffset","innerHeight","document","body","clientHeight","nextpage","addEventListener","removeEventListener","topology","featureCollection","feature","objects","world","timesRaw","lambda","phi","PI","Math","sin","t","tan","s","mapWidth","mapHeight","topologies","features","geo","pathD","geoPath","projection","geoProjection","translate","Map","normalizedIds","width","height","viewBox","geoId","hasPencil","isSelected","d","PageTitle","normalizedPencils","normalizedCoutries","photo","Info","normalizedCountries","countryId","usePencilFlag","city","handlePseudoLink","useCallback","stopPropagation","targetElement","tagName","link","getAttribute","filterFromLink","queryPart","split","emptyFilter","filterKeys","Object","keys","keysFromQuery","pick","isEmpty","getFilterFromLink","dangerouslySetInnerHTML","__html","content","PencilInfo","closePencilInfo","classList","remove","add","TagHeader","dropTag","requestTaxonomy","tags","taxonomyActions","meta","Taxonomy","App","locale","defaultLocale","reload","rootEpic","combineEpics","action$","pipe","ofType","getType","mergeMap","from","catchError","of","bufferTime","actions","uniqBy","isActionOf","mapPencilsingleQueryRequestUrl","mergeAll","epicMiddleware","createEpicMiddleware","rootReducer","combineReducers","taxonomyReducer","pencilReducer","filterReducer","createStore","composeWithDevTools","applyMiddleware","run","Intl","PluralRules","require","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3f3b0657.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl'\n\nexport const appMessages = defineMessages({\n  pencil: {\n    defaultMessage: `{count, plural,\n      one {# карандаш}\n      few {# карандаша}\n      many {# карандашей}\n    }`,\n    id: 'App.pencil',\n  },\n\n  country: {\n    defaultMessage: `{count, plural,\n      one {# страны}\n      few {# стран}\n      many {# стран}\n    }`,\n    id: 'App.country',\n  },\n\n  error: {\n    defaultMessage: 'не могу загрузить',\n    id: 'App.error',\n  },\n})\n","import { pickBy } from 'lodash'\nimport qs from 'qs'\nimport { Filter } from './Filter.interface'\n\nexport const getEmptyFilter = (): Filter => ({\n  display: '',\n  country: '',\n  tag: '',\n})\n\nexport const mapFilterToQueryString = (filter: Filter): string => {\n  const query = qs.stringify(pickBy(filter, Boolean))\n  return query ? '?' + query : ''\n}\n\nexport const mapQueryStringToFilter = (querystring = window.location.search): Filter => {\n  const input = qs.parse(querystring, { ignoreQueryPrefix: true })\n  return { ...getEmptyFilter(), ...input }\n}\n\nexport const getInitialFilter = (): Filter => ({\n  ...getEmptyFilter(),\n  ...mapQueryStringToFilter(),\n})\n","import { ActionType, createReducer, createStandardAction } from 'typesafe-actions'\nimport { Filter, FilterAppStore } from './Filter.interface'\nimport { getInitialFilter } from './Filter.utils'\n\nconst initialState: FilterAppStore = getInitialFilter()\nconst updateFilter = createStandardAction('filter:set')<Partial<Filter>>()\nexport const filterActions = { updateFilter }\ntype Actions = ActionType<typeof filterActions>\n\nexport default createReducer<FilterAppStore, Actions>(initialState).handleAction(\n  updateFilter,\n  (state, { payload }) => ({ ...state, ...payload }),\n)\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AppStore } from './../../store'\nimport { filterActions } from './Filter.actions'\nimport { Filter } from './Filter.interface'\n\nexport const useFilter = (): [Filter, (update: Partial<Filter>) => void] => {\n  const filter = useSelector<AppStore, Filter>(store => store.filter)\n  const dispatch = useDispatch()\n  const setFilter = (update: Partial<Filter>) => dispatch(filterActions.updateFilter(update))\n\n  return [filter, setFilter]\n}\n","import { PencilQuery } from '../Pencil/Pencil.interface'\nexport const requestFirstPage = (query: PencilQuery): PencilQuery => ({ ...query, page: 1 })\n","import {\n  Pencil,\n  PencilCache,\n  PencilCacheItem,\n  PencilListResponse,\n  PencilPages,\n  PencilQuery,\n  PencilRequest,\n  PencilSingleRequest,\n  PencilsNormalized,\n} from './Pencil.interface'\n\nconst getEmptyPencilCacheItem = (): PencilCacheItem => ({\n  ids: [],\n  pages: {\n    page: 0,\n    total: 0,\n    nextUrl: null,\n    items: 0,\n    pencils: 0,\n  },\n})\n\nexport const mapPencilsingleQueryRequestUrl = ({ id }: PencilSingleRequest): string =>\n  `/pencil/${id}/`\n\nexport const mapPencilListQueryRequestUrl = ({ page, tag, country }: PencilQuery): string => {\n  const pathParts: string[] = []\n  const sanitize = (input: string) =>\n    encodeURIComponent(input.toLowerCase().replace(/\\s/g, '-'))\n\n  if (tag && country) {\n    throw new Error('no tag and country at the same time')\n  }\n\n  if (tag) {\n    pathParts.push(`/tags/${sanitize(tag)}`)\n  }\n  if (country) {\n    pathParts.push(`/countries/${sanitize(country)}`)\n  }\n  if (page && page !== 1) {\n    pathParts.push(`/page/${page}`)\n  }\n  return pathParts.join('/') + '/'\n}\n\nexport const mapRequestToCacheId = (request: PencilRequest): string => {\n  const cahceIdParts: string[] = ['_']\n  if (request.id) {\n    return `id:${request.id}`\n  } else if (request.query) {\n    const { page, tag, country } = request.query\n    if (page) {\n      cahceIdParts.push(`p:${page}`)\n    }\n    if (tag) {\n      cahceIdParts.push(`t:${tag}`)\n    }\n    if (country) {\n      cahceIdParts.push(`c:${country}`)\n    }\n  }\n\n  return cahceIdParts.join('|')\n}\n\ninterface CacheAndNormalize {\n  cache: PencilCache\n  normalized: PencilsNormalized\n}\nexport const getCacheAndNormilizedFromList = ({\n  cacheId,\n  pages,\n  data,\n}: PencilListResponse): CacheAndNormalize => {\n  const ids = data.map(({ id }) => id)\n  const normalized = data.reduce((list, pencil) => ({ ...list, [pencil.id]: pencil }), {})\n  return { normalized, cache: { [cacheId]: { ids, pages } } }\n}\n\nexport const getNextPageNumberFromPages = (pages: PencilPages): number | null => {\n  if (pages) {\n    if (pages.page < pages.total) {\n      return pages.page + 1\n    }\n  }\n\n  return null\n}\n\nexport const getPencilsFromCacheByQuery = (\n  query: PencilQuery,\n  cache: Partial<PencilCache>,\n  normalized: PencilsNormalized,\n): Pencil[] => {\n  const pencilCache: PencilCacheItem =\n    cache[mapRequestToCacheId({ query })] || getEmptyPencilCacheItem()\n  const pencils = pencilCache.ids.map(id => {\n    const data = normalized[id]\n    if (!data) {\n      throw new Error('no cache for id ' + id)\n    }\n    return data\n  })\n\n  return pencils\n}\n","import { useSelector } from 'react-redux'\nimport { AppStore } from '../../store'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { requestFirstPage } from '../Gallery/Gallery.utils'\nimport { PencilAppStore, PencilQuery } from './Pencil.interface'\nimport { mapRequestToCacheId as mapQueryToCacheId } from './Pencil.utils'\n\nconst usePencil = () => useSelector<AppStore, PencilAppStore>(store => store.pencils)\n\nexport const usePecnilRequestStatus = () => usePencil().requestStatus\nexport const useNormalizedPencils = () => usePencil().normalized\nexport const usePencilCache = () => usePencil().cache\n\nexport const useCached = (userQuery?: PencilQuery) => {\n  const [currentFilter] = useFilter()\n  const filter = userQuery || currentFilter\n  const query = filter && filter.page && filter.page > 1 ? filter : requestFirstPage(filter)\n  const queryCacheId = mapQueryToCacheId({ query })\n  const cache = usePencilCache()\n  const cacheItem = cache[queryCacheId]\n  return cacheItem\n}\n","import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppStore } from '../../store'\nimport { Pencil, PencilCountry } from './../Pencil/Pencil.interface'\nimport { TaxonomyAppStore } from './Taxonomy.interface'\n\nexport const useTaxonomy = () => useSelector<AppStore, TaxonomyAppStore>(store => store.taxonomy)\nexport const useTaxonomyRequestStatus = () => useTaxonomy().requestStatus\n\nexport const usePencilFlag = (pencil: Pencil) => {\n  const normalizedCountries = useCountriesNormalizedBy('id')\n  const countryId = pencil.country.id\n  if (normalizedCountries[countryId]) {\n    return normalizedCountries[countryId].flag\n  }\n\n  return null\n}\n\nexport const useCountriesNormalizedBy = <K extends keyof PencilCountry>(field: K) => {\n  const { countries } = useTaxonomy()\n  return useMemo(\n    () =>\n      countries.reduce<Record<string, PencilCountry>>(\n        (normalized, country) => ({\n          ...normalized,\n          [country[field]]: country,\n        }),\n        {},\n      ),\n    [countries, field],\n  )\n}\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: `{pencils} из {countries}`,\n    id: 'Filter.title',\n  },\n\n  current: {\n    defaultMessage: `{country}: {pencils}`,\n    id: 'Filter.current',\n  },\n\n  all: {\n    defaultMessage: 'Все страны',\n    id: 'Filter.all',\n  },\n})\n","import React, { FC, useEffect, useState } from 'react'\nimport { GlobeProps } from './Globe.interface'\n\nconst Globe: FC<GlobeProps> = ({ animated }) => {\n  const isAnimated = Boolean(animated)\n  const frames = ['🌍', '🌏', '🌎']\n  const speed = 400\n  const [index, setIndex] = useState(0)\n  useEffect(() => {\n    if (isAnimated) {\n      const spin = setTimeout(() => {\n        const nextIndex = index + 1 === frames.length ? 0 : index + 1\n        setIndex(nextIndex)\n      }, speed)\n      return () => {\n        clearTimeout(spin)\n      }\n    }\n  }, [isAnimated, speed, index, setIndex, frames])\n\n  return <>{frames[index]}</>\n}\n\nexport default Globe\n","import { Location } from 'history'\nimport React, { ChangeEvent, useEffect, useRef } from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { useHistory } from 'react-router-dom'\nimport { appMessages } from '../App/App.messages'\nimport { useCached } from '../Pencil/Pencil.hooks'\nimport { useTaxonomy } from '../Taxonomy/Taxonomy.hooks'\nimport { useFilter } from './Filter.hooks'\nimport messages from './Filter.messages'\nimport { mapFilterToQueryString, mapQueryStringToFilter } from './Filter.utils'\nimport Globe from './Globe'\n\nconst Filter = () => {\n  const history = useHistory()\n  const { countries, pencilCount } = useTaxonomy()\n  const intl = useIntl()\n  const [filter, setFilter] = useFilter()\n  const cached = useCached()\n  const isFiltered = Boolean(filter.country || filter.tag)\n  const select = useRef<HTMLSelectElement>(null)\n\n  useEffect(() => {\n    if (mapFilterToQueryString(filter) !== window.location.search) {\n      history.push(mapFilterToQueryString(filter))\n    }\n  }, [filter, history])\n\n  useEffect(() => {\n    const unlisten = history.listen(({ search }: Location, action) => {\n      if (action === 'POP') {\n        setFilter(mapQueryStringToFilter(search))\n      }\n    })\n    return unlisten\n  }, [filter, history, setFilter])\n\n  return (\n    <div className=\"Filter\">\n      <div className=\"Filter-control\">\n        <button\n          className=\"Filter-clear-button\"\n          onClick={() => {\n            if (isFiltered) {\n              setFilter({ country: '', tag: '' })\n            }\n            if (select.current) {\n              select.current.focus()\n            }\n          }}\n        >\n          <span className=\"Filter-Globe\">\n            <Globe animated={isFiltered} />\n          </span>\n          <FormattedMessage\n            {...messages.title}\n            values={{\n              pencils: (\n                <span className=\"Filter-span\">\n                  <FormattedMessage {...appMessages.pencil} values={{ count: pencilCount }} />\n                </span>\n              ),\n              countries: (\n                <span className=\"Filter-span\">\n                  <FormattedMessage\n                    {...appMessages.country}\n                    values={{ count: countries.length + 1 }}\n                  />\n                </span>\n              ),\n            }}\n          />\n        </button>\n      </div>\n      <div className=\"Filter-control\">\n        <select\n          ref={select}\n          className=\"Filter-select\"\n          value={filter.country}\n          onChange={(e: ChangeEvent<HTMLSelectElement>) =>\n            setFilter({ country: e.target.value, tag: '' })\n          }\n        >\n          <option key=\"empty-country\" value=\"\">\n            {intl.formatMessage(messages.all)}\n          </option>\n          {countries.map(country => {\n            const isCurrent = filter.country === country.name\n            return (\n              <option key={country.name} value={country.name}>\n                {country.flag}{' '}\n                {isCurrent && cached\n                  ? intl.formatMessage(messages.current, {\n                      country: country.name,\n                      pencils: intl.formatMessage(appMessages.pencil, {\n                        count: cached.pages.pencils,\n                      }),\n                    })\n                  : country.name}\n              </option>\n            )\n          })}\n        </select>\n      </div>\n    </div>\n  )\n}\n\nexport default Filter\n","import React from 'react'\nimport Globe from '../Filter/Globe'\n\nconst Loader = () => (\n  <div className=\"Loader\">\n    <Globe animated />\n  </div>\n)\n\nexport default Loader\n","import { ActionType, createAsyncAction, createReducer } from 'typesafe-actions'\nimport { getRequestStatus } from '../../modules/requestStatus'\nimport {\n  PencilAppStore,\n  PencilListResponse,\n  PencilSingleRequest,\n  PencilSingleResponse,\n  PencilsListRequest,\n} from './Pencil.interface'\nimport { getCacheAndNormilizedFromList } from './Pencil.utils'\n\nconst initialState: PencilAppStore = {\n  requestStatus: getRequestStatus().idle,\n  cache: {},\n  normalized: {},\n}\n\nconst requestSinglePencil = createAsyncAction(\n  'pencil-single:pending',\n  'pencil-single:fulfilled',\n  'pencil-single:rejected',\n)<PencilSingleRequest, PencilSingleResponse, undefined>()\n\nconst requestPencilList = createAsyncAction(\n  'pencil-list:pending',\n  'pencil-list:fulfilled',\n  'pencil-list:rejected',\n)<PencilsListRequest, PencilListResponse, undefined>()\n\nexport const pencilActions = { requestPencilList, requestSinglePencil }\ntype Actions = ActionType<typeof pencilActions>\n\nexport default createReducer<PencilAppStore, Actions>(initialState)\n  .handleAction([requestPencilList.request, requestSinglePencil.request], state => ({\n    requestStatus: getRequestStatus().pending,\n    cache: state.cache,\n    normalized: state.normalized,\n  }))\n  .handleAction([requestPencilList.failure, requestSinglePencil.failure], state => ({\n    requestStatus: getRequestStatus().rejected,\n    cache: state.cache,\n    normalized: state.normalized,\n  }))\n  .handleAction(requestPencilList.success, (state, { payload }) => {\n    const { cache, normalized } = getCacheAndNormilizedFromList(payload)\n    return {\n      cache: { ...state.cache, ...cache },\n      normalized: { ...state.normalized, ...normalized },\n      requestStatus: getRequestStatus().fulfilled,\n    }\n  })\n  .handleAction(requestSinglePencil.success, (state, { payload: pencil }) => ({\n    normalized: { ...state.normalized, [pencil.id]: pencil },\n    requestStatus: getRequestStatus().fulfilled,\n    cache: state.cache,\n  }))\n","export interface RequestStatus {\n  idle: boolean\n  pending: boolean\n  fulfilled: boolean\n  rejected: boolean\n}\n\nexport const getRequestStatus = (): Record<keyof RequestStatus, RequestStatus> => ({\n  idle: {\n    idle: true,\n    pending: false,\n    fulfilled: false,\n    rejected: false,\n  },\n  pending: {\n    idle: false,\n    pending: true,\n    fulfilled: false,\n    rejected: false,\n  },\n  fulfilled: {\n    idle: false,\n    pending: false,\n    fulfilled: true,\n    rejected: false,\n  },\n  rejected: {\n    idle: false,\n    pending: false,\n    fulfilled: false,\n    rejected: true,\n  },\n})\n","import { isUndefined } from 'lodash'\nimport React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { pencilActions } from './Pencil.actions'\nimport { useNormalizedPencils, usePecnilRequestStatus, usePencilCache } from './Pencil.hooks'\nimport { Pencil as PencilInterface, PencilProps, PencilQuery } from './Pencil.interface'\nimport { getPencilsFromCacheByQuery, mapRequestToCacheId } from './Pencil.utils'\n\n// tslint:disable: no-shadowed-variable\nconst Pencil = ({ id, query, queries, children }: PencilProps) => {\n  const dispatch = useDispatch()\n  const requestStatus = usePecnilRequestStatus()\n  const cache = usePencilCache()\n  const normalized = useNormalizedPencils()\n  const pencil = id ? normalized[id] : undefined\n  const targetQueries = query ? [query] : queries ? queries : []\n  const pencils = targetQueries.reduce<PencilInterface[]>(\n    (acc, query) => [...acc, ...getPencilsFromCacheByQuery(query, cache, normalized)],\n    [],\n  )\n\n  useEffect(() => {\n    const isNotCached = (query: PencilQuery) => isUndefined(cache[mapRequestToCacheId({ query })])\n    if (id && !pencil) {\n      dispatch(pencilActions.requestSinglePencil.request({ id }))\n    } else if (query && isNotCached(query)) {\n      dispatch(pencilActions.requestPencilList.request({ query }))\n    } else if (queries) {\n      queries.filter(isNotCached).forEach(query => {\n        dispatch(pencilActions.requestPencilList.request({ query }))\n      })\n    }\n  }, [dispatch, id, query, queries, pencil, cache])\n\n  return <>{children({ requestStatus, pencil, pencils })} </>\n}\n\nexport default Pencil\n","const apiUrl = process.env.REACT_APP_API_URL\nif (!apiUrl) {\n  throw new Error('no api url')\n}\n\nconst appConfig = {\n  apiUrl,\n}\n\nexport default appConfig\n","import appConfig from '../appConfig'\n\nconst apiRequest = <T>(path: string): Promise<T> =>\n  fetch(appConfig.apiUrl + path)\n    .then(response => response.json())\n    .catch(error => {\n      console.error('api', path, error)\n      throw error\n    })\n\nexport default apiRequest\n","import apiRequest from '../../modules/api'\nimport {\n  PencilListResponse,\n  PencilSingleRequest,\n  PencilSingleResponse,\n  PencilsListRequest,\n} from './Pencil.interface'\nimport {\n  mapPencilListQueryRequestUrl,\n  mapPencilsingleQueryRequestUrl,\n  mapRequestToCacheId,\n} from './Pencil.utils'\n\nexport const apiRequestSinglePencil = (request: PencilSingleRequest) =>\n  apiRequest<PencilSingleResponse>(mapPencilsingleQueryRequestUrl(request))\n\nexport const apiRequestPencilList = (request: PencilsListRequest) =>\n  apiRequest<PencilListResponse>(mapPencilListQueryRequestUrl(request.query)).then(data => {\n    data.cacheId = mapRequestToCacheId(request)\n    return data\n  })\n","import classNames from 'classnames'\nimport React from 'react'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { GridProps } from './Grid.interface'\n\nconst Grid = ({ pencils }: GridProps) => {\n  const [, setFilter] = useFilter()\n\n  return (\n    <div className=\"Grid\">\n      {pencils.map(pencil => {\n        const thumbSize = pencil.preview\n        const fullSize = pencil.photos[0]\n        const useSize = pencil.grid === 1 ? thumbSize : fullSize\n        return (\n          <a\n            href={`?display=${pencil.id}`}\n            onClick={e => {\n              e.preventDefault()\n              setFilter({ display: pencil.id })\n            }}\n            className={classNames('GridItem', {\n              size2: pencil.grid === 2,\n              size3: pencil.grid === 3,\n            })}\n            key={pencil.id}\n            title={pencil.title}\n          >\n            <img srcSet={`${useSize}, ${fullSize} 2x`} alt={pencil.title} src={useSize} />\n          </a>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Grid\n","import { throttle } from 'lodash'\nimport React, { FC, useEffect, useState } from 'react'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport Loader from '../Loader'\nimport Pencil from '../Pencil'\nimport { useCached } from '../Pencil/Pencil.hooks'\nimport { PencilQuery } from '../Pencil/Pencil.interface'\nimport { getNextPageNumberFromPages } from '../Pencil/Pencil.utils'\nimport { requestFirstPage } from './Gallery.utils'\nimport Grid from './Grid'\n\nconst Gallery: FC = () => {\n  const [filter] = useFilter()\n  const [queries, setQueries] = useState<PencilQuery[]>([])\n  const lastQuery = queries[queries.length - 1]\n  const cached = useCached(lastQuery)\n  const nextPageNumber = cached ? getNextPageNumberFromPages(cached.pages) : null\n  const { country, tag, page } = filter\n\n  useEffect(() => {\n    setQueries([requestFirstPage({ country, tag, page })])\n  }, [country, tag, page])\n  useEffect(() => {\n    const loadNextPage = (nextpage: number) => {\n      setQueries([...queries, { page: nextpage, ...filter }])\n    }\n    const onScroll = throttle(() => {\n      if (nextPageNumber) {\n        const scrollBottomLine = window.pageYOffset + window.innerHeight\n        const total = document.body.clientHeight\n        if (total * 0.6 < scrollBottomLine) {\n          loadNextPage(nextPageNumber)\n        }\n      }\n    }, 500)\n    if (nextPageNumber) {\n      window.addEventListener('scroll', onScroll)\n    }\n    return () => {\n      window.removeEventListener('scroll', onScroll)\n    }\n  }, [queries, nextPageNumber, filter])\n\n  return (\n    <Pencil queries={queries}>\n      {({ pencils }) => (\n        <>\n          <Grid pencils={pencils} />\n\n          {nextPageNumber ? (\n            <div className=\"Gallery-loading\">\n              <Loader />\n            </div>\n          ) : null}\n        </>\n      )}\n    </Pencil>\n  )\n}\n\nexport default Gallery\n","import { geoPath, GeoRawProjection } from 'd3-geo'\nimport { geoProjection } from 'd3-geo'\nimport { FeatureCollection, GeoJsonProperties, Geometry } from 'geojson'\nimport { feature } from 'topojson-client'\nimport { Topology } from 'topojson-specification'\nimport { TopologyItem } from './Map.interface.js'\nimport geography from './world.json'\n\n// TODO: how to get the type properly?\nconst topology: Topology = geography as any\nconst featureCollection = feature(topology, topology.objects.world) as FeatureCollection<\n  Geometry,\n  GeoJsonProperties\n>\n\nconst timesRaw: GeoRawProjection = (lambda, phi) => {\n  // https://github.com/d3/d3-geo-projection/blob/master/src/times.js\n  const { PI, sin, tan } = Math\n  const t = tan(phi / 2)\n  const quarterPi = PI / 4\n  const s = sin(quarterPi * t)\n\n  return [lambda * (0.74482 - 0.34588 * s * s), 1.70711 * t]\n}\n\nconst projection = () => geoProjection(timesRaw).translate([mapWidth / 2, mapHeight / 2 + 40])\n\nexport const mapWidth = 800\nexport const mapHeight = 400\nexport const topologies = featureCollection.features.map<TopologyItem>(geo => {\n  const pathD = geoPath().projection(projection())(geo)\n  if (pathD === null) {\n    throw new Error()\n  }\n\n  return { ...geo, pathD }\n})\n","import classNames from 'classnames'\nimport React from 'react'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { useCountriesNormalizedBy } from '../Taxonomy/Taxonomy.hooks'\nimport { mapHeight, mapWidth, topologies } from './Map.utils'\n\nconst Map = () => {\n  const [filter, setFilter] = useFilter()\n  const normalizedIds = useCountriesNormalizedBy('id')\n\n  return (\n    <div className=\"Map\">\n      <svg\n        width={mapWidth}\n        height={mapHeight}\n        viewBox={`0 0 ${mapWidth} ${mapHeight}`}\n        className=\"Map-block\"\n      >\n        {topologies.map(topology => {\n          const geoId = topology.id\n          const country = geoId && normalizedIds[geoId] ? normalizedIds[geoId].name : null\n          const hasPencil = country !== null\n          const isSelected = country === filter.country\n\n          return (\n            <path\n              key={geoId}\n              d={topology.pathD}\n              onClick={() => {\n                if (isSelected) {\n                  setFilter({ country: '' })\n                } else if (country) {\n                  setFilter({ country })\n                }\n              }}\n              className={classNames(\n                'Map-country',\n                hasPencil && 'Map-has-pencil',\n                isSelected && 'Map-selected',\n              )}\n            />\n          )\n        })}\n      </svg>\n    </div>\n  )\n}\n\nexport default Map\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: 'В коробке с карандашами',\n    id: 'PageTitle.title',\n  },\n\n  pencil: {\n    defaultMessage: '{flag} {title}, {country}',\n    id: 'PageTitle.pencil',\n  },\n\n  country: {\n    defaultMessage: '{flag} {country}. {pencils}',\n    id: 'PageTitle.country',\n  },\n})\n","import { useEffect } from 'react'\nimport { useIntl } from 'react-intl'\nimport { appMessages } from '../App/App.messages'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { useCached, useNormalizedPencils } from '../Pencil/Pencil.hooks'\nimport { useCountriesNormalizedBy } from '../Taxonomy/Taxonomy.hooks'\nimport messages from './PageTitle.messages'\n\nconst PageTitle = () => {\n  const [filter] = useFilter()\n  const cached = useCached()\n  const intl = useIntl()\n  const normalizedPencils = useNormalizedPencils()\n  const normalizedCoutries = useCountriesNormalizedBy('name')\n  const pencil = normalizedPencils[filter.display]\n  const flag = normalizedCoutries[filter.country]\n    ? normalizedCoutries[filter.country].flag\n    : undefined\n\n  const count = filter.country && cached ? cached.pages.pencils : undefined\n\n  useEffect(() => {\n    if (pencil && flag) {\n      const { title, country } = pencil\n      document.title = intl.formatMessage(messages.pencil, { title, country: country.name, flag })\n    } else if (filter.country && count) {\n      document.title = intl.formatMessage(messages.country, {\n        flag,\n        country: filter.country,\n        pencils: intl.formatMessage(appMessages.pencil, { count }),\n      })\n    } else {\n      document.title = intl.formatMessage(messages.title)\n    }\n  }, [intl, pencil, count, filter, flag])\n\n  return null\n}\n\nexport default PageTitle\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  photo: {\n    defaultMessage: '{count, number} фото',\n    id: 'Info.photo',\n  },\n})\n","import React, { useCallback } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { getEmptyFilter } from '../../Filter/Filter.utils'\nimport { usePencilFlag } from '../../Taxonomy/Taxonomy.hooks'\nimport { InfoProps } from './Info.interface'\nimport messages from './Info.messages'\nimport { getFilterFromLink } from './Info.utils'\n\nconst Info = ({ pencil }: InfoProps) => {\n  const [, setFilter] = useFilter()\n  const flag = usePencilFlag(pencil)\n  const location = [pencil.country.name, pencil.city].filter(Boolean).join(', ')\n  const handlePseudoLink = useCallback(\n    (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      e.stopPropagation()\n      const targetElement = e.target as HTMLElement\n\n      if (targetElement.tagName === 'A') {\n        const link = targetElement.getAttribute('href')\n        if (link) {\n          const filterFromLink = getFilterFromLink(link)\n          if (filterFromLink) {\n            e.preventDefault()\n            setFilter({ ...getEmptyFilter(), ...filterFromLink })\n          }\n        }\n      }\n    },\n    [setFilter],\n  )\n\n  return (\n    <div className=\"Info\">\n      <div className=\"Info-content\">\n        <h1>{pencil.title}</h1>\n        <h2>\n          {flag} {location}\n        </h2>\n\n        <article dangerouslySetInnerHTML={{ __html: pencil.content }} onClick={handlePseudoLink} />\n\n        <p>\n          <FormattedMessage\n            tagName=\"b\"\n            {...messages.photo}\n            values={{ count: pencil.photos.length }}\n          />\n        </p>\n      </div>\n      {pencil.photos.map(src => (\n        <div key={src} className=\"Info-frame\">\n          <img className=\"Info-photo\" alt={pencil.title} src={src} />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Info\n","import { isEmpty, pick } from 'lodash'\nimport qs from 'qs'\nimport { Filter } from './../../Filter/Filter.interface'\nimport { getEmptyFilter } from './../../Filter/Filter.utils'\n\nexport const getFilterFromLink = (link: string): Filter | null => {\n  const queryPart = link.split('?')[1]\n  if (queryPart) {\n    const emptyFilter = getEmptyFilter()\n    const query = qs.parse(queryPart)\n    const filterKeys = Object.keys(emptyFilter) as Array<keyof Filter>\n    const keysFromQuery = pick<Filter, keyof Filter>(query, filterKeys)\n    if (!isEmpty(keysFromQuery)) {\n      return keysFromQuery\n    }\n  }\n\n  return null\n}\n","import React, { useEffect } from 'react'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport Pencil from '../Pencil'\nimport Info from './Info'\n\nconst PencilInfo = () => {\n  const [filter, setFilter] = useFilter()\n  const { display } = filter\n  const closePencilInfo = () => setFilter({ display: '' })\n\n  useEffect(() => {\n    if (display === '') {\n      document.body.classList.remove('no-scroll')\n    } else {\n      document.body.classList.add('no-scroll')\n    }\n  }, [display])\n\n  return display ? (\n    <Pencil id={display}>\n      {({ pencil }) =>\n        pencil ? (\n          <div className=\"PencilInfo-backdrop\" onClick={closePencilInfo}>\n            <div className=\"PencilInfo-content\">\n              <Info pencil={pencil} />\n            </div>\n          </div>\n        ) : null}\n    </Pencil>\n  ) : null\n}\n\nexport default PencilInfo\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: '{pencils} в категории \"{tag}\"',\n    id: 'TagHeader.title',\n  },\n})\n","import React, { useCallback, useEffect } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { appMessages } from '../../App/App.messages'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { useCached, usePecnilRequestStatus } from '../../Pencil/Pencil.hooks'\nimport messages from './TagHeader.messages'\n\nconst TagHeader = () => {\n  const [filter, setFilter] = useFilter()\n  const cache = useCached()\n  const requestStatus = usePecnilRequestStatus()\n  const dropTag = useCallback(() => setFilter({ tag: '' }), [setFilter])\n\n  useEffect(() => {\n    if (requestStatus.rejected) {\n      dropTag()\n    }\n  }, [dropTag, requestStatus])\n\n  return (\n    <button onClick={dropTag} className=\"TagHeader-drop\">\n      {cache ? (\n        <FormattedMessage\n          tagName=\"h3\"\n          {...messages.title}\n          values={{\n            tag: filter.tag,\n            pencils: (\n              <FormattedMessage {...appMessages.pencil} values={{ count: cache.pages.pencils }} />\n            ),\n          }}\n        />\n      ) : null}\n    </button>\n  )\n}\n\nexport default TagHeader\n","import { ActionType, createAsyncAction, createReducer } from 'typesafe-actions'\nimport { getRequestStatus } from '../../modules/requestStatus'\nimport { TaxonomyAppStore as StoreTaxonomy, TaxonomyResponse } from './Taxonomy.interface'\n\nconst requestTaxonomy = createAsyncAction(\n  'taxonomy:pending',\n  'taxonomy:fulfilled',\n  'taxonomy:rejected',\n)<undefined, TaxonomyResponse, undefined>()\n\nconst initialState: StoreTaxonomy = {\n  requestStatus: getRequestStatus().idle,\n  pencilCount: 0,\n  countries: [],\n  tags: [],\n}\n\nexport const taxonomyActions = { requestTaxonomy }\ntype Actions = ActionType<typeof taxonomyActions>\n\nexport default createReducer<StoreTaxonomy, Actions>(initialState)\n  .handleAction(requestTaxonomy.request, state => ({\n    requestStatus: getRequestStatus().pending,\n    pencilCount: state.pencilCount,\n    countries: state.countries,\n    tags: state.tags,\n  }))\n  .handleAction(requestTaxonomy.success, (state, { payload }) => ({\n    requestStatus: getRequestStatus().fulfilled,\n    pencilCount: payload.meta.pencils,\n    countries: payload.taxonomy.countries,\n    tags: payload.taxonomy.tags,\n  }))\n  .handleAction(requestTaxonomy.failure, state => ({\n    requestStatus: getRequestStatus().rejected,\n    pencilCount: state.pencilCount,\n    countries: state.countries,\n    tags: state.tags,\n  }))\n","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { taxonomyActions } from './Taxonomy.actions'\nimport { useTaxonomyRequestStatus } from './Taxonomy.hooks'\nimport { TaxonomyProps } from './Taxonomy.interface'\n\nconst Taxonomy = ({ children }: TaxonomyProps) => {\n  const dispatch = useDispatch()\n  const requestStatus = useTaxonomyRequestStatus()\n\n  useEffect(() => {\n    dispatch(taxonomyActions.requestTaxonomy.request())\n  }, [dispatch])\n\n  return <>{children({ requestStatus })}</>\n}\n\nexport default Taxonomy\n","import React from 'react'\nimport { FormattedMessage, IntlProvider } from 'react-intl'\nimport { BrowserRouter } from 'react-router-dom'\nimport Filter from '../Filter'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport Gallery from '../Gallery'\nimport Loader from '../Loader'\nimport Map from '../Map'\nimport PageTitle from '../PageTitle'\nimport PencilInfo from '../PencilInfo'\nimport TagHeader from '../PencilInfo/TagHeader'\nimport Taxonomy from '../Taxonomy'\nimport { appMessages } from './App.messages'\n\nconst App: React.FC = () => {\n  const [filter] = useFilter()\n  return (\n    <IntlProvider locale=\"ru\" defaultLocale=\"ru\">\n      <Taxonomy>\n        {({ requestStatus: { pending, fulfilled, rejected } }) => {\n          if (rejected) {\n            return (\n              <div className=\"App-loading\">\n                <button onClick={() => window.location.reload()}>\n                  <FormattedMessage {...appMessages.error} />\n                </button>\n              </div>\n            )\n          }\n          return pending ? (\n            <div className=\"App-loading\">\n              <Loader />\n            </div>\n          ) : fulfilled ? (\n            <div className=\"App\">\n              <BrowserRouter>\n                <PageTitle />\n\n                <PencilInfo />\n\n                <section className=\"App-block\">\n                  <Filter />\n                </section>\n\n                {filter.tag ? (\n                  <section className=\"App-block\">\n                    <TagHeader />\n                  </section>\n                ) : (\n                  <Map />\n                )}\n\n                <section className=\"App-block\">\n                  <Gallery />\n                </section>\n              </BrowserRouter>\n            </div>\n          ) : null\n        }}\n      </Taxonomy>\n    </IntlProvider>\n  )\n}\n\nexport default App\n","import { combineEpics } from 'redux-observable'\nimport { pencilEpic } from './components/Pencil'\nimport { taxonomyEpic } from './components/Taxonomy'\n\nconst rootEpic = combineEpics(taxonomyEpic, pencilEpic)\n\nexport default rootEpic\n","import { ActionsObservable, ofType } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { catchError, map, mergeMap } from 'rxjs/operators'\nimport { ActionType, getType } from 'typesafe-actions'\nimport { taxonomyActions } from './Taxonomy.actions'\nimport { apiRequestTaxonomy } from './Taxonomy.api'\n\nexport default (\n  action$: ActionsObservable<ActionType<typeof taxonomyActions.requestTaxonomy.request>>,\n) =>\n  action$.pipe(\n    ofType(getType(taxonomyActions.requestTaxonomy.request)),\n    mergeMap(() =>\n      from(apiRequestTaxonomy()).pipe(\n        map(taxonomyActions.requestTaxonomy.success),\n        catchError(() => of(taxonomyActions.requestTaxonomy.failure())),\n      ),\n    ),\n  )\n","import apiRequest from '../../modules/api'\nimport { TaxonomyResponse } from './Taxonomy.interface'\n\nexport const apiRequestTaxonomy = () => apiRequest<TaxonomyResponse>('/taxonomy/')\n","import { uniqBy } from 'lodash'\nimport { ActionsObservable, ofType } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { bufferTime, catchError, filter, map, mergeAll, mergeMap } from 'rxjs/operators'\nimport { ActionType, getType, isActionOf } from 'typesafe-actions'\nimport { pencilActions } from './Pencil.actions'\nimport { apiRequestPencilList, apiRequestSinglePencil } from './Pencil.api'\nimport { mapRequestToCacheId } from './Pencil.utils'\n\nexport default (\n  action$: ActionsObservable<\n    ActionType<\n      | typeof pencilActions.requestSinglePencil.request\n      | typeof pencilActions.requestPencilList.request\n    >\n  >,\n) =>\n  action$.pipe(\n    ofType(\n      getType(pencilActions.requestSinglePencil.request),\n      getType(pencilActions.requestPencilList.request),\n    ),\n    bufferTime(33),\n    filter(actions => actions.length > 0),\n    mergeMap(actions =>\n      from(\n        uniqBy(actions, ({ payload }) => mapRequestToCacheId(payload)).map(action => {\n          if (isActionOf(pencilActions.requestSinglePencil.request)(action)) {\n            return from(apiRequestSinglePencil(action.payload)).pipe(\n              map(pencilActions.requestSinglePencil.success),\n              catchError(() => of(pencilActions.requestSinglePencil.failure())),\n            )\n          } else if (isActionOf(pencilActions.requestPencilList.request)(action)) {\n            return from(apiRequestPencilList(action.payload)).pipe(\n              map(pencilActions.requestPencilList.success),\n              catchError(() => of(pencilActions.requestPencilList.failure())),\n            )\n          }\n          throw new Error()\n        }),\n      ).pipe(mergeAll()),\n    ),\n  )\n","import { applyMiddleware, combineReducers, createStore, Store } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { createEpicMiddleware } from 'redux-observable'\nimport { filterReducer } from './components/Filter'\nimport { pencilReducer } from './components/Pencil'\nimport { taxonomyReducer } from './components/Taxonomy'\nimport rootEpic from './epics'\n\nconst epicMiddleware = createEpicMiddleware()\nconst rootReducer = combineReducers({\n  taxonomy: taxonomyReducer,\n  pencils: pencilReducer,\n  filter: filterReducer,\n})\nconst store: Store<AppStore> = createStore(\n  rootReducer,\n  {},\n  composeWithDevTools(applyMiddleware(epicMiddleware)),\n)\nepicMiddleware.run(rootEpic)\n\nexport type AppStore = ReturnType<typeof rootReducer>\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport './index.css'\nimport store from './store'\n\nif (!Intl.PluralRules) {\n  // tslint:disable-next-line: no-var-requires\n  require('intl-pluralrules')\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}