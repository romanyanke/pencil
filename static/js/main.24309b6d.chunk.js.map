{"version":3,"sources":["components/App/App.messages.ts","components/Filter/Filter.utils.ts","components/Filter/Filter.actions.ts","components/Filter/Filter.hooks.ts","components/Filter/Filter.messages.ts","components/Filter/Globe/Globe.tsx","components/Taxonomy/Taxonomy.actions.ts","components/Taxonomy/Taxonomy.hooks.ts","components/Pencil/Pencil.utils.ts","components/Pencil/Pencil.actions.ts","components/Gallery/Gallery.utils.ts","components/Pencil/Pencil.hooks.ts","components/Filter/Filter.tsx","components/Gallery/Grid/Grid.tsx","components/Gallery/Grid/Grid.utils.ts","components/Gallery/Gallery.tsx","components/Loader/Loader.tsx","components/Map/Map.utils.ts","components/Map/Map.tsx","components/PageTitle/PageTitle.messages.ts","components/PageTitle/PageTitle.tsx","components/PencilInfo/Info/Info.hooks.ts","components/PencilInfo/Info/Info.utils.ts","components/PencilInfo/Info/Info.messages.ts","components/PencilInfo/Info/Info.tsx","components/PencilInfo/PencilInfo.tsx","components/PencilInfo/TagHeader/TagHeader.messages.ts","components/PencilInfo/TagHeader/TagHeader.tsx","components/App/App.tsx","appConfig.ts","api.ts","components/Pencil/Pencil.api.ts","components/Pencil/Pencil.epic.ts","components/Taxonomy/Taxonomy.epic.ts","components/Taxonomy/Taxonomy.api.ts","rootEpic.ts","rootReducer.ts","store.ts","index.tsx"],"names":["appMessages","defineMessages","pencil","defaultMessage","id","country","error","mapFilterToQueryString","filter","qs","stringify","pickBy","Boolean","mapQueryStringToFilter","querystring","window","location","search","input","parse","ignoreQueryPrefix","emptyFilter","display","tag","filterKeys","Object","keys","pick","initialState","update","createAction","set","filterActions","createReducer","handleAction","state","payload","useFilter","useSelector","store","dispatch","useDispatch","updateFilter","useCallback","newFilter","isMatch","setCountry","setTag","openPencil","pencilId","clearCountry","clearTag","closePencil","title","current","all","Globe","animated","isAnimated","frames","useState","index","setIndex","useEffect","spin","setTimeout","length","clearTimeout","requestTaxonomy","createAsyncAction","taxonomyActions","loading","failure","pencilCount","countries","tags","success","meta","pencils","taxonomy","produce","draft","useTaxonomy","useCountriesNormalizedBy","field","useMemo","mapKeys","mapRequestToCacheId","request","cahceIdParts","query","page","push","join","requestSinglePencil","requestPencilList","pencilActions","cache","data","merge","cacheId","pages","geoIds","ids","map","item","mapPancilsResponseToStore","requestFirstPage","usePencilStore","useNormalizedPencils","usePencilCache","userQuery","currentFilter","mapQueryToCacheId","usePencil","queries","normalized","undefined","reduce","acc","total","nextUrl","items","Error","getPencilsFromCacheByQuery","isNotCached","isUndefined","forEach","Filter","cached","intl","useIntl","isFiltered","pencilsInCountry","className","htmlFor","onClick","messages","values","count","value","onChange","e","target","key","formatMessage","optionText","name","flag","Grid","size","grid","thumbSrc","preview","fullSrc","photos","classNames","href","preventDefault","alt","src","srcSet","getGridImageSources","Gallery","setQueries","last","document","documentElement","scrollTop","loadNextPage","onScroll","throttle","scrollBottomLine","pageYOffset","innerHeight","body","clientHeight","checkWindowScroll","leading","trailing","addEventListener","removeEventListener","Loader","topology","featureCollection","feature","objects","world","timesRaw","lambda","phi","PI","Math","sin","t","tan","s","mapWidth","mapHeight","topologies","features","geo","pathD","geoPath","projection","geoProjection","translate","Map","normalizedIds","width","height","viewBox","geoId","hasPencil","isSelected","includes","data-testid","d","PageTitle","normalizedPencils","normalizedCoutries","countryFlag","pencilFlag","usePseudoClick","stopPropagation","targetElement","tagName","link","getAttribute","filterFromLink","parsed","isEmpty","getFilterFromLink","photo","Info","usePencilFlag","handlePseudoLink","city","displayPencilLocation","dangerouslySetInnerHTML","__html","content","PencilInfo","scroller","useRef","style","overflow","ref","TagHeader","countryFlags","normalizedCountries","compact","useCountryFlags","countryCount","App","history","useHistory","listen","action","useFilerQueryString","useTaxonomyRequest","locale","defaultLocale","reload","apiUrl","process","appConfig","apiRequest","path","fetch","then","response","ok","json","String","status","catch","console","apiRequestPencilList","pathParts","sanitize","encodeURIComponent","toLowerCase","replace","mapPencilListQueryRequestUrl","pencilEpic","combineEpics","action$","pipe","isActionOf","concatMap","from","mapPencilsingleQueryRequestUrl","catchError","of","taxonomyEpic","mergeMap","rootEpic","rootReducer","combineReducers","epicMiddleware","createEpicMiddleware","createStore","composeWithDevTools","applyMiddleware","run","Intl","PluralRules","require","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.24309b6d.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl'\n\nexport const appMessages = defineMessages({\n  pencil: {\n    defaultMessage: `{count, plural,\n      one {# карандаш}\n      few {# карандаша}\n      many {# карандашей}\n    }`,\n    id: 'App.pencil',\n  },\n\n  country: {\n    defaultMessage: `{count, plural,\n      one {# страны}\n      few {# стран}\n      many {# стран}\n    }`,\n    id: 'App.country',\n  },\n\n  error: {\n    defaultMessage: 'не могу загрузить, попробую перезагрузить страницу',\n    id: 'App.error',\n  },\n})\n","import pick from 'lodash/pick'\nimport pickBy from 'lodash/pickBy'\nimport qs from 'qs'\nimport { Filter } from './Filter.interface'\n\nexport const getEmptyFilter = (): Filter => ({\n  display: '',\n  country: '',\n  tag: '',\n})\n\nexport const mapFilterToQueryString = (filter: Partial<Filter>) =>\n  qs.stringify(pickBy(filter, Boolean))\n\nexport const mapQueryStringToFilter = (querystring = window.location.search): Filter => {\n  const input = qs.parse(querystring, { ignoreQueryPrefix: true })\n  const emptyFilter = getEmptyFilter()\n  const filterKeys = Object.keys(emptyFilter)\n  const filter = pick(input, filterKeys)\n\n  return { ...emptyFilter, ...filter }\n}\n","import { ActionType, createAction, createReducer } from 'typesafe-actions'\nimport { Filter, FilterAppStore } from './Filter.interface'\nimport { mapQueryStringToFilter } from './Filter.utils'\n\nconst initialState: FilterAppStore = mapQueryStringToFilter()\nconst update = createAction('Filter:update')<Partial<Filter>>()\nconst set = createAction('Filter:set')<Filter>()\ntype Actions = ActionType<typeof filterActions>\n\nexport const filterActions = { set, update }\n\nexport default createReducer<FilterAppStore, Actions>(initialState)\n  .handleAction(set, (state, { payload }) => payload)\n  .handleAction(update, (state, { payload }) => ({ ...state, ...payload }))\n","import isMatch from 'lodash/isMatch'\nimport { useCallback, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport { AppStore } from './../../store'\nimport { filterActions } from './Filter.actions'\nimport { Filter } from './Filter.interface'\nimport { mapQueryStringToFilter, mapFilterToQueryString } from './Filter.utils'\n\nexport const useFilter = () => {\n  const filter = useSelector<AppStore, Filter>(store => store.filter)\n  const dispatch = useDispatch()\n  const updateFilter = useCallback(\n    (update: Partial<Filter>) => {\n      const newFilter = { ...filter, ...update }\n      if (!isMatch(filter, newFilter)) {\n        dispatch(filterActions.set(newFilter))\n      }\n    },\n    [filter, dispatch],\n  )\n  const setCountry = useCallback((country: string) => updateFilter({ country, tag: '' }), [\n    updateFilter,\n  ])\n  const setTag = useCallback((tag: string) => updateFilter({ tag, country: '' }), [updateFilter])\n  const openPencil = useCallback((pencilId: string) => updateFilter({ display: pencilId }), [\n    updateFilter,\n  ])\n  const clearCountry = useCallback(() => setCountry(''), [setCountry])\n  const clearTag = useCallback(() => setTag(''), [setTag])\n  const closePencil = useCallback(() => openPencil(''), [openPencil])\n\n  return [\n    filter,\n    {\n      updateFilter,\n      setCountry,\n      setTag,\n      openPencil,\n      clearCountry,\n      clearTag,\n      closePencil,\n    },\n  ] as const\n}\n\nexport const useFilerQueryString = () => {\n  const history = useHistory()\n  const [filter, { updateFilter }] = useFilter()\n\n  useEffect(() => {\n    history.push({ search: mapFilterToQueryString(filter) })\n  }, [filter, history])\n\n  useEffect(() => {\n    const unlisten = history.listen(({ search }, action) => {\n      if (action === 'POP') {\n        updateFilter(mapQueryStringToFilter(search))\n      }\n    })\n\n    return unlisten\n  }, [filter, history, updateFilter])\n}\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: `{pencils} из {countries}`,\n    id: 'Filter.title',\n  },\n\n  current: {\n    defaultMessage: `{country}: {pencils}`,\n    id: 'Filter.current',\n  },\n\n  all: {\n    defaultMessage: 'Все страны',\n    id: 'Filter.all',\n  },\n})\n","import React, { useEffect, useState } from 'react'\nimport { GlobeProps } from './Globe.interface'\n\nconst Globe = ({ animated }: GlobeProps) => {\n  const isAnimated = Boolean(animated)\n  const frames = ['🌍', '🌏', '🌎']\n  const speed = 400\n  const [index, setIndex] = useState(0)\n  useEffect(() => {\n    if (isAnimated) {\n      const spin = setTimeout(() => {\n        const nextIndex = index + 1 === frames.length ? 0 : index + 1\n        setIndex(nextIndex)\n      }, speed)\n\n      return () => {\n        clearTimeout(spin)\n      }\n    }\n  }, [isAnimated, speed, index, setIndex, frames])\n\n  return <>{frames[index]}</>\n}\n\nexport default Globe\n","import { ActionType, createAsyncAction, createReducer } from 'typesafe-actions'\nimport produce from 'immer'\nimport { TaxonomyAppStore as StoreTaxonomy, TaxonomyResponse } from './Taxonomy.interface'\n\nconst requestTaxonomy = createAsyncAction(\n  'Taxonomy:loading',\n  'Taxonomy:success',\n  'Taxonomy:failure',\n)<undefined, TaxonomyResponse, undefined>()\n\nconst getInitialTaxonomyState = (): StoreTaxonomy => ({\n  loading: true,\n  failure: false,\n  pencilCount: 0,\n  countries: [],\n  tags: [],\n})\n\nexport const taxonomyActions = { requestTaxonomy }\nexport type TaxonomyActions = ActionType<typeof taxonomyActions>\n\nexport default createReducer<StoreTaxonomy, TaxonomyActions>(getInitialTaxonomyState())\n  .handleAction(requestTaxonomy.success, (state, { payload }) => ({\n    loading: false,\n    failure: false,\n    pencilCount: payload.meta.pencils,\n    countries: payload.taxonomy.countries,\n    tags: payload.taxonomy.tags,\n  }))\n  .handleAction(requestTaxonomy.failure, state =>\n    produce(state, draft => {\n      draft.loading = false\n      draft.failure = true\n    }),\n  )\n","import compact from 'lodash/compact'\nimport mapKeys from 'lodash/mapKeys'\nimport { useMemo, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Pencil, PencilCountry } from './../Pencil/Pencil.interface'\nimport { TaxonomyAppStore } from './Taxonomy.interface'\nimport { taxonomyActions } from './Taxonomy.actions'\nimport { AppStore } from '../../store'\n\nexport const useTaxonomy = () => useSelector<AppStore, TaxonomyAppStore>(store => store.taxonomy)\n\nexport const useTaxonomyRequest = () => {\n  const dispatch = useDispatch()\n  const { loading, failure } = useTaxonomy()\n\n  useEffect(() => {\n    dispatch(taxonomyActions.requestTaxonomy.request())\n  }, [dispatch])\n\n  return { loading, failure }\n}\n\nexport const usePencilFlag = (pencil: Pencil) => {\n  const normalizedCountries = useCountriesNormalizedBy('id')\n  const countryId = pencil.country.id\n\n  return normalizedCountries[countryId]?.flag\n}\n\nexport const useCountryFlags = (geoIds: string[]) => {\n  const normalizedCountries = useCountriesNormalizedBy('id')\n\n  return compact(geoIds.map(geoId => normalizedCountries[geoId]?.flag))\n}\n\nexport const useCountriesNormalizedBy = <K extends keyof PencilCountry>(\n  field: K,\n): Partial<Record<string, PencilCountry>> => {\n  const { countries } = useTaxonomy()\n\n  return useMemo(() => mapKeys(countries, field), [countries, field])\n}\n","import mapKeys from 'lodash/mapKeys'\nimport {\n  Pencil,\n  PencilCache,\n  PencilCacheItem,\n  PencilListResponse,\n  PencilPages,\n  PencilQuery,\n  PencilRequest,\n  PencilSingleRequest,\n  PencilsNormalized,\n  PencilAppStore,\n} from './Pencil.interface'\n\nconst getEmptyPencilCacheItem = (): PencilCacheItem => ({\n  ids: [],\n  geoIds: [],\n  pages: {\n    page: 0,\n    total: 0,\n    nextUrl: null,\n    items: 0,\n    pencils: 0,\n  },\n})\n\nexport const mapPencilsingleQueryRequestUrl = ({ id }: PencilSingleRequest): string =>\n  `/pencil/${id}/`\n\nexport const mapPencilListQueryRequestUrl = ({ page, tag, country }: PencilQuery): string => {\n  const pathParts: string[] = []\n  const sanitize = (input: string) => encodeURIComponent(input.toLowerCase().replace(/\\s/g, '-'))\n\n  if (tag && country) {\n    throw new Error('no tag and country at the same time')\n  }\n\n  if (tag) {\n    pathParts.push(`/tags/${sanitize(tag)}`)\n  }\n  if (country) {\n    pathParts.push(`/countries/${sanitize(country)}`)\n  }\n  if (page && page !== 1) {\n    pathParts.push(`/page/${page}`)\n  }\n\n  return `${pathParts.join('/')}/`\n}\n\nexport const mapRequestToCacheId = (request: PencilRequest): string => {\n  const cahceIdParts: string[] = ['_']\n  if (request.id) {\n    return `id:${request.id}`\n  } else if (request.query) {\n    const { page, tag, country } = request.query\n    if (page) {\n      cahceIdParts.push(`p:${page}`)\n    }\n    if (tag) {\n      cahceIdParts.push(`t:${tag}`)\n    }\n    if (country) {\n      cahceIdParts.push(`c:${country}`)\n    }\n  }\n\n  return cahceIdParts.join('|')\n}\n\nexport const mapPancilsResponseToStore = ({\n  cacheId,\n  pages,\n  data: pencils,\n  geoIds,\n}: PencilListResponse): PencilAppStore => {\n  const ids = pencils.map(({ id }) => id)\n  const data = mapKeys(pencils, item => item.id)\n\n  return { data, cache: { [cacheId]: { ids, pages, geoIds } } }\n}\n\nexport const getNextPageNumberFromPages = (pages?: PencilPages) => {\n  if (pages) {\n    if (pages.page < pages.total) {\n      return pages.page + 1\n    }\n  }\n\n  return null\n}\n\nexport const getPencilsFromCacheByQuery = (\n  query: PencilQuery,\n  cache: Partial<PencilCache>,\n  normalized: PencilsNormalized,\n): Pencil[] => {\n  const pencilCache: PencilCacheItem =\n    cache[mapRequestToCacheId({ query })] || getEmptyPencilCacheItem()\n  const pencils = pencilCache.ids.map(id => {\n    const data = normalized[id]\n    if (!data) {\n      throw new Error(`no cache for id ${id}`)\n    }\n\n    return data\n  })\n\n  return pencils\n}\n","import { ActionType, createAsyncAction, createReducer } from 'typesafe-actions'\nimport produce from 'immer'\nimport merge from 'lodash/merge'\nimport {\n  PencilAppStore,\n  PencilListResponse,\n  PencilSingleRequest,\n  PencilSingleResponse,\n  PencilsListRequest,\n} from './Pencil.interface'\nimport { mapPancilsResponseToStore } from './Pencil.utils'\n\nconst getInitialPencilState = (): PencilAppStore => ({\n  cache: {},\n  data: {},\n})\n\nconst requestSinglePencil = createAsyncAction(\n  'Pencil/single:loading',\n  'Pencil/single:success',\n  'Pencil/single:failure',\n)<PencilSingleRequest, PencilSingleResponse, undefined>()\n\nconst requestPencilList = createAsyncAction(\n  'Pencil/list:loading',\n  'Pencil/list:success',\n  'Pencil/list:failure',\n)<PencilsListRequest, PencilListResponse, undefined>()\n\nexport const pencilActions = { requestPencilList, requestSinglePencil }\nexport type PencilActions = ActionType<typeof pencilActions>\n\nexport default createReducer<PencilAppStore, PencilActions>(getInitialPencilState())\n  .handleAction(requestPencilList.success, (state, { payload }) =>\n    produce(state, draft => {\n      merge(draft, mapPancilsResponseToStore(payload))\n    }),\n  )\n  .handleAction(requestSinglePencil.success, (state, { payload }) =>\n    produce(state, draft => {\n      draft.data[payload.id] = payload\n    }),\n  )\n","import { PencilQuery } from '../Pencil/Pencil.interface'\n\nexport const requestFirstPage = (query: PencilQuery): PencilQuery => ({ ...query, page: 1 })\n\nexport const checkFinishZone = (total: number, current: number) => {\n  const sensivity = total * 0.6\n  const thresholdReached = sensivity < current\n\n  return thresholdReached\n}\n\nexport const checkWindowScroll = () => {\n  const scrollBottomLine = window.pageYOffset + window.innerHeight\n\n  return checkFinishZone(document.body.clientHeight, scrollBottomLine)\n}\n","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { isUndefined } from 'util'\nimport { pencilActions } from './Pencil.actions'\nimport { Pencil, PencilAppStore, PencilProps, PencilQuery } from './Pencil.interface'\nimport {\n  getPencilsFromCacheByQuery,\n  mapRequestToCacheId,\n  mapRequestToCacheId as mapQueryToCacheId,\n} from './Pencil.utils'\nimport { AppStore } from '../../store'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { requestFirstPage } from '../Gallery/Gallery.utils'\n\nconst usePencilStore = () => useSelector<AppStore, PencilAppStore>(store => store.pencils)\n\nexport const useNormalizedPencils = () => usePencilStore().data\n\nexport const usePencilCache = (userQuery?: PencilQuery) => {\n  const [currentFilter] = useFilter()\n  const { cache } = usePencilStore()\n\n  const filter = userQuery || currentFilter\n  const query = (filter?.page ?? 0) > 1 ? filter : requestFirstPage(filter)\n  const queryCacheId = mapQueryToCacheId({ query })\n  const cacheItem = cache[queryCacheId]\n\n  return cacheItem\n}\n\nexport const usePencil = ({ id, query, queries }: PencilProps) => {\n  const dispatch = useDispatch()\n  const { cache } = usePencilStore()\n  const normalized = useNormalizedPencils()\n  const pencil = id ? normalized[id] : undefined\n  const targetQueries = query ? [query] : queries ? queries : []\n  const pencils = targetQueries.reduce<Pencil[]>(\n    (acc, query) => [...acc, ...getPencilsFromCacheByQuery(query, cache, normalized)],\n    [],\n  )\n\n  useEffect(() => {\n    const isNotCached = (query: PencilQuery) => isUndefined(cache[mapRequestToCacheId({ query })])\n    if (id && !pencil) {\n      dispatch(pencilActions.requestSinglePencil.request({ id }))\n    } else if (query && isNotCached(query)) {\n      dispatch(pencilActions.requestPencilList.request({ query }))\n    } else if (queries) {\n      queries.filter(isNotCached).forEach(query => {\n        dispatch(pencilActions.requestPencilList.request({ query }))\n      })\n    }\n  }, [dispatch, id, query, queries, pencil, cache])\n\n  return { pencil, pencils }\n}\n","import React from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { useFilter } from './Filter.hooks'\nimport messages from './Filter.messages'\nimport Globe from './Globe'\nimport { useTaxonomy } from '../Taxonomy/Taxonomy.hooks'\nimport { usePencilCache } from '../Pencil/Pencil.hooks'\nimport { appMessages } from '../App/App.messages'\n\nconst Filter = () => {\n  const [filter, { clearCountry, setCountry }] = useFilter()\n  const { countries, pencilCount } = useTaxonomy()\n  const cached = usePencilCache()\n  const intl = useIntl()\n\n  const isFiltered = Boolean(filter.country || filter.tag)\n  const pencilsInCountry = cached?.pages.pencils\n  const htmlFor = 'country-filter'\n\n  return (\n    <div className=\"Filter\">\n      <div className=\"Filter-control\">\n        <label\n          htmlFor={htmlFor}\n          className=\"Filter-label\"\n          onClick={() => {\n            if (isFiltered) {\n              clearCountry()\n            }\n          }}\n        >\n          <span className=\"Filter-Globe\">\n            <Globe animated={isFiltered} />\n          </span>\n          <FormattedMessage\n            {...messages.title}\n            values={{\n              pencils: (\n                <span className=\"Filter-span\">\n                  <FormattedMessage {...appMessages.pencil} values={{ count: pencilCount }} />\n                </span>\n              ),\n              countries: (\n                <span className=\"Filter-span\">\n                  <FormattedMessage {...appMessages.country} values={{ count: countries.length }} />\n                </span>\n              ),\n            }}\n          />\n        </label>\n      </div>\n      <div className=\"Filter-control\">\n        <select\n          id={htmlFor}\n          className=\"Filter-select\"\n          value={filter.country}\n          onChange={e => setCountry(e.target.value)}\n        >\n          <option key=\"empty-country\" value=\"\">\n            {intl.formatMessage(messages.all)}\n          </option>\n          {countries.map(country => {\n            const isCurrent = filter.country === country.name\n            const optionText =\n              isCurrent && pencilsInCountry\n                ? intl.formatMessage(messages.current, {\n                    country: country.name,\n                    pencils: intl.formatMessage(appMessages.pencil, {\n                      count: pencilsInCountry,\n                    }),\n                  })\n                : country.name\n\n            return (\n              <option key={country.name} value={country.name}>\n                {`${country.flag} ${optionText}`}\n              </option>\n            )\n          })}\n        </select>\n      </div>\n    </div>\n  )\n}\n\nexport default Filter\n","import classNames from 'classnames'\nimport React from 'react'\nimport { GridProps } from './Grid.interface'\nimport { getGridImageSources } from './Grid.utils'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { mapFilterToQueryString } from '../../Filter/Filter.utils'\n\nconst Grid = ({ pencils }: GridProps) => {\n  const [, { openPencil }] = useFilter()\n\n  return (\n    <div className=\"Grid\">\n      {pencils.map(pencil => {\n        const size = pencil.grid\n        const thumbSrc = pencil.preview\n        const fullSrc = pencil.photos[0]\n        const className = classNames('GridItem', size === 2 && 'size2', size === 3 && 'size3')\n        const onClick = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n          e.preventDefault()\n          openPencil(pencil.id)\n        }\n\n        return (\n          <a\n            href={mapFilterToQueryString({ display: pencil.id })}\n            onClick={onClick}\n            className={className}\n            key={pencil.id}\n            title={pencil.title}\n          >\n            <img\n              alt={pencil.title}\n              loading=\"lazy\"\n              {...getGridImageSources(size, fullSrc, thumbSrc)}\n            />\n          </a>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Grid\n","import { ImgHTMLAttributes } from 'react'\nimport { PencilGridSize } from '../../Pencil/Pencil.interface'\n\nexport const getGridImageSources = (\n  size: PencilGridSize,\n  fullSrc: string,\n  thumbSrc: string,\n): ImgHTMLAttributes<{}> => {\n  switch (size) {\n    case 3:\n      return { src: fullSrc }\n\n    case 2:\n      return { src: thumbSrc, srcSet: `${thumbSrc}, ${fullSrc} 2x` }\n\n    default:\n      return { src: thumbSrc }\n  }\n}\n","import last from 'lodash/last'\nimport throttle from 'lodash/throttle'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { checkWindowScroll, requestFirstPage } from './Gallery.utils'\nimport Grid from './Grid'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { usePencilCache, usePencil } from '../Pencil/Pencil.hooks'\nimport { PencilQuery } from '../Pencil/Pencil.interface'\nimport { getNextPageNumberFromPages } from '../Pencil/Pencil.utils'\n\nconst Gallery = () => {\n  const [filter] = useFilter()\n  const [queries, setQueries] = useState<PencilQuery[]>([])\n  const { pencils } = usePencil({ queries })\n  const cached = usePencilCache(last(queries))\n  const { country, tag } = filter\n  const page = getNextPageNumberFromPages(cached?.pages)\n\n  useEffect(() => {\n    setQueries([requestFirstPage({ country, tag })])\n    document.documentElement.scrollTop = 0\n  }, [country, tag])\n\n  const loadNextPage = useCallback(() => {\n    if (page) {\n      setQueries([...queries, { ...filter, page }])\n    }\n  }, [filter, queries, setQueries, page])\n\n  const onScroll = useCallback(\n    throttle(\n      () => {\n        if (page && checkWindowScroll()) {\n          loadNextPage()\n        }\n      },\n      100,\n      { leading: false, trailing: false },\n    ),\n    [loadNextPage],\n  )\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll)\n\n    return () => {\n      window.removeEventListener('scroll', onScroll)\n    }\n  }, [onScroll])\n\n  return <Grid pencils={pencils} />\n}\n\nexport default Gallery\n","import React from 'react'\nimport Globe from '../Filter/Globe'\n\nconst Loader = () => (\n  <div className=\"Loader\">\n    <Globe animated />\n  </div>\n)\n\nexport default Loader\n","import { geoPath, GeoRawProjection } from 'd3-geo'\nimport { geoProjection } from 'd3-geo'\nimport { FeatureCollection, GeoJsonProperties, Geometry } from 'geojson'\nimport { feature } from 'topojson-client'\nimport { Topology } from 'topojson-specification'\nimport { TopologyItem } from './Map.interface.js'\nimport geography from './world.json'\n\n// TODO: how to get the type properly?\nconst topology: Topology = geography as any\nconst featureCollection = feature(topology, topology.objects.world) as FeatureCollection<\n  Geometry,\n  GeoJsonProperties\n>\n\nconst timesRaw: GeoRawProjection = (lambda, phi) => {\n  // https://github.com/d3/d3-geo-projection/blob/master/src/times.js\n  const { PI, sin, tan } = Math\n  const t = tan(phi / 2)\n  const quarterPi = PI / 4\n  const s = sin(quarterPi * t)\n\n  return [lambda * (0.74482 - 0.34588 * s * s), 1.70711 * t]\n}\n\nconst projection = () => geoProjection(timesRaw).translate([mapWidth / 2, mapHeight / 2 + 40])\n\nexport const mapWidth = 800\nexport const mapHeight = 400\nexport const topologies = featureCollection.features.map<TopologyItem>(geo => {\n  const pathD = geoPath().projection(projection())(geo)\n  if (pathD === null) {\n    throw new Error()\n  }\n\n  return { ...geo, pathD }\n})\n","import classNames from 'classnames'\nimport isUndefined from 'lodash/isUndefined'\nimport React from 'react'\nimport { mapHeight, mapWidth, topologies } from './Map.utils'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { usePencilCache } from '../Pencil/Pencil.hooks'\nimport { useCountriesNormalizedBy } from '../Taxonomy/Taxonomy.hooks'\n\nconst Map = () => {\n  const [, { setCountry, clearCountry }] = useFilter()\n  const normalizedIds = useCountriesNormalizedBy('id')\n  const cached = usePencilCache()\n  const geoIds = cached?.geoIds ?? []\n\n  return (\n    <div className=\"Map\">\n      <svg\n        width={mapWidth}\n        height={mapHeight}\n        viewBox={`0 0 ${mapWidth} ${mapHeight}`}\n        className=\"Map-block\"\n      >\n        {topologies.map(topology => {\n          const geoId = topology.id as string\n          const country = geoId ? normalizedIds[geoId]?.name : undefined\n          const hasPencil = !isUndefined(country)\n          const isSelected = geoIds.includes(geoId)\n          const className = classNames(\n            'Map-country',\n            hasPencil && 'Map-has-pencil',\n            isSelected && 'Map-selected',\n          )\n          const onClick = () => {\n            if (isSelected) {\n              clearCountry()\n            } else if (country) {\n              setCountry(country)\n            }\n          }\n\n          return (\n            <path\n              data-testid={geoId}\n              key={geoId}\n              className={className}\n              d={topology.pathD}\n              onClick={onClick}\n            >\n              {country && <title>{country}</title>}\n            </path>\n          )\n        })}\n      </svg>\n    </div>\n  )\n}\n\nexport default Map\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: 'В коробке с карандашами',\n    id: 'PageTitle.title',\n  },\n\n  pencil: {\n    defaultMessage: '{pencilFlag} {title}, {country}',\n    id: 'PageTitle.pencil',\n  },\n\n  country: {\n    defaultMessage: '{countryFlag} {country}. {pencils}',\n    id: 'PageTitle.country',\n  },\n})\n","import { useEffect } from 'react'\nimport { useIntl } from 'react-intl'\nimport messages from './PageTitle.messages'\nimport { appMessages } from '../App/App.messages'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { usePencilCache, useNormalizedPencils } from '../Pencil/Pencil.hooks'\nimport { useCountriesNormalizedBy } from '../Taxonomy/Taxonomy.hooks'\n\nconst PageTitle = () => {\n  const [filter] = useFilter()\n  const cached = usePencilCache()\n  const intl = useIntl()\n  const normalizedPencils = useNormalizedPencils()\n  const normalizedCoutries = useCountriesNormalizedBy('name')\n  const pencil = normalizedPencils[filter.display]\n  const countryFlag = normalizedCoutries[filter.country]?.flag\n  const pencilFlag = pencil ? normalizedCoutries[pencil.country.name]?.flag : undefined\n  const count = cached?.pages.pencils\n\n  useEffect(() => {\n    if (pencil && pencilFlag) {\n      const { title, country } = pencil\n      document.title = intl.formatMessage(messages.pencil, {\n        title,\n        country: country.name,\n        pencilFlag,\n      })\n    } else if (filter.country && count) {\n      document.title = intl.formatMessage(messages.country, {\n        countryFlag,\n        country: filter.country,\n        pencils: intl.formatMessage(appMessages.pencil, { count }),\n      })\n    } else {\n      document.title = intl.formatMessage(messages.title)\n    }\n  }, [intl, pencil, count, filter, countryFlag, pencilFlag])\n\n  return null\n}\n\nexport default PageTitle\n","import { useCallback } from 'react'\nimport { getFilterFromLink } from './Info.utils'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { getEmptyFilter } from '../../Filter/Filter.utils'\n\nexport const usePseudoClick = () => {\n  const [, { updateFilter }] = useFilter()\n  const handlePseudoLink = useCallback(\n    (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      e.stopPropagation()\n      const targetElement = e.target as HTMLElement\n      if (targetElement.tagName === 'A') {\n        const link = targetElement.getAttribute('href')\n        if (link) {\n          const filterFromLink = getFilterFromLink(link)\n          if (filterFromLink) {\n            e.preventDefault()\n            updateFilter({ ...getEmptyFilter(), ...filterFromLink })\n          }\n        }\n      }\n    },\n    [updateFilter],\n  )\n\n  return handlePseudoLink\n}\n","import isEmpty from 'lodash/isEmpty'\nimport pick from 'lodash/pick'\nimport qs from 'qs'\nimport { Filter } from './../../Filter/Filter.interface'\nimport { getEmptyFilter } from './../../Filter/Filter.utils'\nimport { Pencil } from '../../Pencil/Pencil.interface'\n\nexport const getFilterFromLink = (querystring: string): Filter | null => {\n  const parsed = qs.parse(querystring, { ignoreQueryPrefix: true }) as {}\n  const filterKeys = Object.keys(getEmptyFilter())\n  const filter = pick(parsed, filterKeys) as Filter\n\n  if (!isEmpty(filter)) {\n    return filter\n  }\n\n  return null\n}\n\nexport const displayPencilLocation = ({ country, city }: Pick<Pencil, 'country' | 'city'>) =>\n  [country.name, city].filter(Boolean).join(', ')\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  photo: {\n    defaultMessage: '{count, number} фото',\n    id: 'Info.photo',\n  },\n})\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { usePseudoClick } from './Info.hooks'\nimport { InfoProps } from './Info.interface'\nimport messages from './Info.messages'\nimport { displayPencilLocation } from './Info.utils'\nimport { usePencilFlag } from '../../Taxonomy/Taxonomy.hooks'\n\nconst Info = ({ pencil }: InfoProps) => {\n  const flag = usePencilFlag(pencil)\n  const handlePseudoLink = usePseudoClick()\n  const location = displayPencilLocation(pencil)\n\n  return (\n    <div className=\"Info\">\n      <div className=\"Info-content\" onClick={handlePseudoLink}>\n        <h1>{pencil.title}</h1>\n\n        <h2>\n          {flag} {location}\n        </h2>\n\n        <article dangerouslySetInnerHTML={{ __html: pencil.content }} />\n\n        <p>\n          <FormattedMessage\n            tagName=\"b\"\n            {...messages.photo}\n            values={{ count: pencil.photos.length }}\n          />\n        </p>\n      </div>\n\n      {pencil.photos.map(src => (\n        <div key={src} className=\"Info-frame\">\n          <img className=\"Info-photo\" alt={pencil.title} src={src} />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Info\n","import React, { useEffect, useRef } from 'react'\nimport Info from './Info'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { usePencil } from '../Pencil/Pencil.hooks'\n\nconst PencilInfo = () => {\n  const [{ display }, { closePencil }] = useFilter()\n  const scroller = useRef<HTMLDivElement>(null)\n  const { pencil } = usePencil({ id: display })\n\n  useEffect(() => {\n    if (display === '') {\n      document.body.style.overflow = 'initial'\n    } else {\n      document.body.style.overflow = 'hidden'\n\n      if (scroller.current) {\n        scroller.current.scrollTop = 0\n      }\n    }\n  }, [display, scroller])\n\n  return pencil ? (\n    <div className=\"PencilInfo-backdrop\" onClick={closePencil} ref={scroller}>\n      <div className=\"PencilInfo-content\">\n        <Info pencil={pencil} />\n      </div>\n    </div>\n  ) : null\n}\n\nexport default PencilInfo\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: '🏷 {pencilCount} из {countryCount} в категории \"{tag}\"',\n    id: 'TagHeader.title',\n  },\n})\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport messages from './TagHeader.messages'\nimport { appMessages } from '../../App/App.messages'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { usePencilCache } from '../../Pencil/Pencil.hooks'\nimport { useCountryFlags } from '../../Taxonomy/Taxonomy.hooks'\n\nconst TagHeader = () => {\n  const [{ tag }, { clearTag }] = useFilter()\n  const cache = usePencilCache()\n  const countryFlags = useCountryFlags(cache?.geoIds ?? [])\n  const pencilCount = cache?.pages.pencils\n  const countryCount = cache?.geoIds.length\n\n  return tag && pencilCount && countryCount ? (\n    <button onClick={clearTag} className=\"TagHeader-drop\" title={countryFlags.join(' ')}>\n      <FormattedMessage\n        {...messages.title}\n        values={{\n          tag,\n          pencilCount: <FormattedMessage {...appMessages.pencil} values={{ count: pencilCount }} />,\n          countryCount: (\n            <FormattedMessage {...appMessages.country} values={{ count: countryCount }} />\n          ),\n        }}\n      />\n    </button>\n  ) : null\n}\n\nexport default TagHeader\n","import React from 'react'\nimport { FormattedMessage, IntlProvider } from 'react-intl'\nimport { appMessages } from './App.messages'\nimport Filter from '../Filter'\nimport { useFilter, useFilerQueryString } from '../Filter/Filter.hooks'\nimport Gallery from '../Gallery'\nimport Loader from '../Loader'\nimport Map from '../Map'\nimport PageTitle from '../PageTitle'\nimport PencilInfo from '../PencilInfo'\nimport TagHeader from '../PencilInfo/TagHeader'\nimport { useTaxonomyRequest } from '../Taxonomy/Taxonomy.hooks'\n\nconst App = () => {\n  useFilerQueryString()\n  const [{ tag }] = useFilter()\n  const { loading, failure } = useTaxonomyRequest()\n\n  return (\n    <IntlProvider locale=\"ru\" defaultLocale=\"ru\">\n      {loading || failure ? (\n        <div className=\"App-loading\">\n          {loading && <Loader />}\n          {failure && (\n            <button onClick={() => window.location.reload()}>\n              <FormattedMessage {...appMessages.error} />\n            </button>\n          )}\n        </div>\n      ) : (\n        <>\n          <PageTitle />\n          <PencilInfo />\n          <nav className=\"App-block\">\n            <Filter />\n          </nav>\n          {tag ? (\n            <section className=\"App-block\">\n              <TagHeader />\n            </section>\n          ) : null}\n          <Map />\n        </>\n      )}\n      <main className=\"App-block\">\n        <Gallery />\n      </main>\n    </IntlProvider>\n  )\n}\n\nexport default App\n","const apiUrl = process.env.REACT_APP_API_URL\nif (!apiUrl) {\n  throw new Error('no api url')\n}\n\nconst appConfig = {\n  apiUrl,\n}\n\nexport default appConfig\n","import appConfig from './appConfig'\n\nconst apiRequest = <T>(path: string): Promise<T> =>\n  fetch(appConfig.apiUrl + path)\n    .then(response => {\n      if (response.ok) {\n        return response.json()\n      }\n\n      throw new Error(String(response.status))\n    })\n    .catch(error => {\n      console.error('api', path, error)\n      throw error\n    })\n\nexport default apiRequest\n","import {\n  PencilListResponse,\n  PencilSingleRequest,\n  PencilSingleResponse,\n  PencilsListRequest,\n} from './Pencil.interface'\nimport {\n  mapPencilListQueryRequestUrl,\n  mapPencilsingleQueryRequestUrl,\n  mapRequestToCacheId,\n} from './Pencil.utils'\nimport apiRequest from '../../api'\n\nexport const apiRequestSinglePencil = (request: PencilSingleRequest) =>\n  apiRequest<PencilSingleResponse>(mapPencilsingleQueryRequestUrl(request))\n\nexport const apiRequestPencilList = (request: PencilsListRequest) =>\n  apiRequest<PencilListResponse>(mapPencilListQueryRequestUrl(request.query)).then(data => {\n    data.cacheId = mapRequestToCacheId(request)\n\n    return data\n  })\n","import { Epic, combineEpics } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { catchError, filter, map, concatMap } from 'rxjs/operators'\nimport { isActionOf } from 'typesafe-actions'\nimport { PencilActions, pencilActions } from './Pencil.actions'\nimport { apiRequestPencilList, apiRequestSinglePencil } from './Pencil.api'\nimport { filterActions } from '../Filter/Filter.actions'\n\nconst pencilEpic: Epic<PencilActions> = combineEpics(\n  action$ =>\n    action$.pipe(\n      filter(isActionOf(pencilActions.requestSinglePencil.request)),\n      concatMap(({ payload }) =>\n        from(apiRequestSinglePencil(payload)).pipe(\n          map(pencilActions.requestSinglePencil.success),\n          catchError(() =>\n            of(filterActions.update({ display: '' }), pencilActions.requestSinglePencil.failure()),\n          ),\n        ),\n      ),\n    ),\n\n  action$ =>\n    action$.pipe(\n      filter(isActionOf(pencilActions.requestPencilList.request)),\n      concatMap(({ payload }) =>\n        from(apiRequestPencilList(payload)).pipe(\n          map(pencilActions.requestPencilList.success),\n          catchError(() =>\n            of(\n              filterActions.update({ country: '', tag: '' }),\n              pencilActions.requestPencilList.failure(),\n            ),\n          ),\n        ),\n      ),\n    ),\n)\nexport default pencilEpic\n","import { Epic } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { catchError, map, mergeMap, filter } from 'rxjs/operators'\nimport { isActionOf } from 'typesafe-actions'\nimport { taxonomyActions, TaxonomyActions } from './Taxonomy.actions'\nimport { apiRequestTaxonomy } from './Taxonomy.api'\n\nconst taxonomyEpic: Epic<TaxonomyActions> = action$ =>\n  action$.pipe(\n    filter(isActionOf(taxonomyActions.requestTaxonomy.request)),\n    mergeMap(() =>\n      from(apiRequestTaxonomy()).pipe(\n        map(taxonomyActions.requestTaxonomy.success),\n        catchError(() => of(taxonomyActions.requestTaxonomy.failure())),\n      ),\n    ),\n  )\n\nexport default taxonomyEpic\n","import { TaxonomyResponse } from './Taxonomy.interface'\nimport apiRequest from '../../api'\n\nexport const apiRequestTaxonomy = () => apiRequest<TaxonomyResponse>('/taxonomy/')\n","import { combineEpics } from 'redux-observable'\nimport { pencilEpic } from './components/Pencil'\nimport { taxonomyEpic } from './components/Taxonomy'\n\nconst rootEpic = combineEpics(taxonomyEpic, pencilEpic)\n\nexport default rootEpic\n","import { combineReducers } from 'redux'\nimport { filterReducer as filter } from './components/Filter'\nimport { pencilReducer as pencils } from './components/Pencil'\nimport { taxonomyReducer as taxonomy } from './components/Taxonomy'\n\nconst rootReducer = combineReducers({ taxonomy, pencils, filter })\n\nexport default rootReducer\n","import { applyMiddleware, createStore, Store } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { createEpicMiddleware } from 'redux-observable'\nimport rootEpic from './rootEpic'\nimport rootReducer from './rootReducer'\n\nconst epicMiddleware = createEpicMiddleware()\nconst store: Store<AppStore> = createStore(\n  rootReducer,\n  {},\n  composeWithDevTools(applyMiddleware(epicMiddleware)),\n)\nepicMiddleware.run(rootEpic)\n\nexport type AppStore = ReturnType<typeof rootReducer>\n\nexport const createTestStore = (initialState?: RecursivePartial<AppStore>) =>\n  createStore(rootReducer, initialState as AppStore)\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './components/App'\nimport './index.css'\nimport store from './store'\n\nif (!Intl.PluralRules) {\n  require('intl-pluralrules')\n}\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}