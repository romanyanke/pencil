{"version":3,"sources":["components/App/App.messages.ts","components/Filter/Filter.utils.ts","components/Filter/Filter.actions.ts","components/Filter/Filter.hooks.ts","components/Gallery/Gallery.utils.ts","components/Pencil/Pencil.utils.ts","components/Pencil/Pencil.actions.ts","modules/requestStatus.ts","components/Pencil/Pencil.hooks.ts","components/Taxonomy/Taxonomy.actions.ts","components/Taxonomy/Taxonomy.hooks.ts","components/Filter/Filter.messages.ts","components/Filter/Globe/Globe.tsx","components/Filter/Filter.tsx","components/Loader/Loader.tsx","components/Gallery/Grid/Grid.tsx","components/Gallery/Gallery.tsx","components/Map/Map.utils.ts","components/Map/Map.tsx","components/PageTitle/PageTitle.messages.ts","components/PageTitle/PageTitle.tsx","components/PencilInfo/Info/Info.messages.ts","components/PencilInfo/Info/Info.tsx","components/PencilInfo/Info/Info.utils.ts","components/PencilInfo/PencilInfo.tsx","components/PencilInfo/TagHeader/TagHeader.messages.ts","components/PencilInfo/TagHeader/TagHeader.tsx","components/App/App.tsx","appConfig.ts","modules/api.ts","components/Pencil/Pencil.api.ts","epics.ts","components/Taxonomy/Taxonomy.epic.ts","components/Taxonomy/Taxonomy.api.ts","components/Pencil/Pencil.epic.ts","store.ts","index.tsx"],"names":["appMessages","defineMessages","pencil","defaultMessage","id","country","error","mapFilterToQueryString","filter","query","qs","stringify","pickBy","Boolean","mapQueryStringToFilter","querystring","window","location","search","input","parse","ignoreQueryPrefix","display","tag","initialState","updateFilter","createAction","filterActions","createReducer","handleAction","state","payload","useFilter","useSelector","store","dispatch","useDispatch","update","requestFirstPage","page","mapRequestToCacheId","request","cahceIdParts","push","join","getCacheAndNormilizedFromList","cacheId","pages","data","ids","map","normalized","reduce","list","cache","requestStatus","idle","pending","fulfilled","rejected","requestSinglePencil","createAsyncAction","requestPencilList","pencilActions","failure","success","usePencilStore","pencils","usePecnilRequestStatus","useNormalizedPencils","usePencilCache","useCached","userQuery","currentFilter","queryCacheId","mapQueryToCacheId","usePencil","queries","undefined","acc","total","nextUrl","items","Error","getPencilsFromCacheByQuery","useEffect","isNotCached","isUndefined","forEach","requestTaxonomy","pencilCount","countries","tags","taxonomyActions","meta","taxonomy","useTaxonomy","useCountriesNormalizedBy","field","useMemo","title","current","all","Globe","animated","isAnimated","frames","useState","index","setIndex","spin","setTimeout","length","clearTimeout","Filter","history","useHistory","intl","useIntl","setFilter","cached","isFiltered","select","useRef","listen","action","className","onClick","focus","messages","values","count","ref","value","onChange","e","target","key","formatMessage","isCurrent","name","flag","Loader","Grid","thumbSize","preview","fullSize","photos","useSize","grid","href","preventDefault","classNames","size2","size3","srcSet","alt","src","Gallery","setQueries","lastQuery","nextPageNumber","onScroll","throttle","nextpage","document","body","clientHeight","pageYOffset","innerHeight","addEventListener","removeEventListener","topology","featureCollection","feature","objects","world","timesRaw","lambda","phi","PI","Math","sin","t","tan","s","mapWidth","mapHeight","topologies","features","geo","pathD","geoPath","projection","geoProjection","translate","Map","normalizedIds","width","height","viewBox","geoId","hasPencil","isSelected","d","PageTitle","normalizedPencils","normalizedCoutries","photo","Info","normalizedCountries","countryId","usePencilFlag","city","handlePseudoLink","useCallback","stopPropagation","targetElement","tagName","link","getAttribute","filterFromLink","queryPart","split","emptyFilter","filterKeys","Object","keys","keysFromQuery","pick","isEmpty","getFilterFromLink","dangerouslySetInnerHTML","__html","content","PencilInfo","classList","remove","add","TagHeader","dropTag","App","useTaxonomyRequest","locale","defaultLocale","reload","apiUrl","process","appConfig","apiRequest","path","fetch","then","response","json","catch","console","apiRequestPencilList","pathParts","sanitize","encodeURIComponent","toLowerCase","replace","mapPencilListQueryRequestUrl","rootEpic","combineEpics","action$","pipe","ofType","getType","mergeMap","from","catchError","of","bufferTime","actions","uniqBy","isActionOf","mapPencilsingleQueryRequestUrl","mergeAll","epicMiddleware","createEpicMiddleware","rootReducer","combineReducers","taxonomyReducer","pencilReducer","filterReducer","createStore","composeWithDevTools","applyMiddleware","run","Intl","PluralRules","require","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a44b512b.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl'\n\nexport const appMessages = defineMessages({\n  pencil: {\n    defaultMessage: `{count, plural,\n      one {# карандаш}\n      few {# карандаша}\n      many {# карандашей}\n    }`,\n    id: 'App.pencil',\n  },\n\n  country: {\n    defaultMessage: `{count, plural,\n      one {# страны}\n      few {# стран}\n      many {# стран}\n    }`,\n    id: 'App.country',\n  },\n\n  error: {\n    defaultMessage: 'не могу загрузить',\n    id: 'App.error',\n  },\n})\n","import { pickBy } from 'lodash'\nimport qs from 'qs'\nimport { Filter } from './Filter.interface'\n\nexport const getEmptyFilter = (): Filter => ({\n  display: '',\n  country: '',\n  tag: '',\n})\n\nexport const mapFilterToQueryString = (filter: Filter): string => {\n  const query = qs.stringify(pickBy(filter, Boolean))\n  return query ? '?' + query : ''\n}\n\nexport const mapQueryStringToFilter = (querystring = window.location.search): Filter => {\n  const input = qs.parse(querystring, { ignoreQueryPrefix: true })\n  return { ...getEmptyFilter(), ...input }\n}\n\nexport const getInitialFilter = (): Filter => ({\n  ...getEmptyFilter(),\n  ...mapQueryStringToFilter(),\n})\n","import { ActionType, createAction, createReducer } from 'typesafe-actions'\nimport { Filter, FilterAppStore } from './Filter.interface'\nimport { getInitialFilter } from './Filter.utils'\n\nconst initialState: FilterAppStore = getInitialFilter()\nconst updateFilter = createAction('filter:set')<Partial<Filter>>()\ntype Actions = ActionType<typeof filterActions>\n\nexport const filterActions = { updateFilter }\n\nexport default createReducer<FilterAppStore, Actions>(initialState).handleAction(\n  updateFilter,\n  (state, { payload }) => ({ ...state, ...payload }),\n)\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AppStore } from './../../store'\nimport { filterActions } from './Filter.actions'\nimport { Filter } from './Filter.interface'\n\nexport const useFilter = (): [Filter, (update: Partial<Filter>) => void] => {\n  const filter = useSelector<AppStore, Filter>(store => store.filter)\n  const dispatch = useDispatch()\n  const setFilter = (update: Partial<Filter>) => dispatch(filterActions.updateFilter(update))\n\n  return [filter, setFilter]\n}\n","import { PencilQuery } from '../Pencil/Pencil.interface'\n\nexport const requestFirstPage = (query: PencilQuery): PencilQuery => ({ ...query, page: 1 })\n","import {\n  Pencil,\n  PencilCache,\n  PencilCacheItem,\n  PencilListResponse,\n  PencilPages,\n  PencilQuery,\n  PencilRequest,\n  PencilSingleRequest,\n  PencilsNormalized,\n} from './Pencil.interface'\n\nconst getEmptyPencilCacheItem = (): PencilCacheItem => ({\n  ids: [],\n  pages: {\n    page: 0,\n    total: 0,\n    nextUrl: null,\n    items: 0,\n    pencils: 0,\n  },\n})\n\nexport const mapPencilsingleQueryRequestUrl = ({ id }: PencilSingleRequest): string =>\n  `/pencil/${id}/`\n\nexport const mapPencilListQueryRequestUrl = ({ page, tag, country }: PencilQuery): string => {\n  const pathParts: string[] = []\n  const sanitize = (input: string) =>\n    encodeURIComponent(input.toLowerCase().replace(/\\s/g, '-'))\n\n  if (tag && country) {\n    throw new Error('no tag and country at the same time')\n  }\n\n  if (tag) {\n    pathParts.push(`/tags/${sanitize(tag)}`)\n  }\n  if (country) {\n    pathParts.push(`/countries/${sanitize(country)}`)\n  }\n  if (page && page !== 1) {\n    pathParts.push(`/page/${page}`)\n  }\n  return pathParts.join('/') + '/'\n}\n\nexport const mapRequestToCacheId = (request: PencilRequest): string => {\n  const cahceIdParts: string[] = ['_']\n  if (request.id) {\n    return `id:${request.id}`\n  } else if (request.query) {\n    const { page, tag, country } = request.query\n    if (page) {\n      cahceIdParts.push(`p:${page}`)\n    }\n    if (tag) {\n      cahceIdParts.push(`t:${tag}`)\n    }\n    if (country) {\n      cahceIdParts.push(`c:${country}`)\n    }\n  }\n\n  return cahceIdParts.join('|')\n}\n\ninterface CacheAndNormalize {\n  cache: PencilCache\n  normalized: PencilsNormalized\n}\nexport const getCacheAndNormilizedFromList = ({\n  cacheId,\n  pages,\n  data,\n}: PencilListResponse): CacheAndNormalize => {\n  const ids = data.map(({ id }) => id)\n  const normalized = data.reduce((list, pencil) => ({ ...list, [pencil.id]: pencil }), {})\n  return { normalized, cache: { [cacheId]: { ids, pages } } }\n}\n\nexport const getNextPageNumberFromPages = (pages: PencilPages): number | null => {\n  if (pages) {\n    if (pages.page < pages.total) {\n      return pages.page + 1\n    }\n  }\n\n  return null\n}\n\nexport const getPencilsFromCacheByQuery = (\n  query: PencilQuery,\n  cache: Partial<PencilCache>,\n  normalized: PencilsNormalized,\n): Pencil[] => {\n  const pencilCache: PencilCacheItem =\n    cache[mapRequestToCacheId({ query })] || getEmptyPencilCacheItem()\n  const pencils = pencilCache.ids.map(id => {\n    const data = normalized[id]\n    if (!data) {\n      throw new Error('no cache for id ' + id)\n    }\n    return data\n  })\n\n  return pencils\n}\n","import { ActionType, createAsyncAction, createReducer } from 'typesafe-actions'\nimport { getRequestStatus } from '../../modules/requestStatus'\nimport {\n  PencilAppStore,\n  PencilListResponse,\n  PencilSingleRequest,\n  PencilSingleResponse,\n  PencilsListRequest,\n} from './Pencil.interface'\nimport { getCacheAndNormilizedFromList } from './Pencil.utils'\n\nconst initialState: PencilAppStore = {\n  requestStatus: getRequestStatus().idle,\n  cache: {},\n  normalized: {},\n}\n\nconst requestSinglePencil = createAsyncAction(\n  'pencil-single:pending',\n  'pencil-single:fulfilled',\n  'pencil-single:rejected',\n)<PencilSingleRequest, PencilSingleResponse, undefined>()\n\nconst requestPencilList = createAsyncAction(\n  'pencil-list:pending',\n  'pencil-list:fulfilled',\n  'pencil-list:rejected',\n)<PencilsListRequest, PencilListResponse, undefined>()\n\nexport const pencilActions = { requestPencilList, requestSinglePencil }\ntype Actions = ActionType<typeof pencilActions>\n\nexport default createReducer<PencilAppStore, Actions>(initialState)\n  .handleAction([requestPencilList.request, requestSinglePencil.request], state => ({\n    requestStatus: getRequestStatus().pending,\n    cache: state.cache,\n    normalized: state.normalized,\n  }))\n  .handleAction([requestPencilList.failure, requestSinglePencil.failure], state => ({\n    requestStatus: getRequestStatus().rejected,\n    cache: state.cache,\n    normalized: state.normalized,\n  }))\n  .handleAction(requestPencilList.success, (state, { payload }) => {\n    const { cache, normalized } = getCacheAndNormilizedFromList(payload)\n    return {\n      cache: { ...state.cache, ...cache },\n      normalized: { ...state.normalized, ...normalized },\n      requestStatus: getRequestStatus().fulfilled,\n    }\n  })\n  .handleAction(requestSinglePencil.success, (state, { payload: pencil }) => ({\n    normalized: { ...state.normalized, [pencil.id]: pencil },\n    requestStatus: getRequestStatus().fulfilled,\n    cache: state.cache,\n  }))\n","export interface RequestStatus {\n  idle: boolean\n  pending: boolean\n  fulfilled: boolean\n  rejected: boolean\n}\n\nexport const getRequestStatus = (): Record<keyof RequestStatus, RequestStatus> => ({\n  idle: {\n    idle: true,\n    pending: false,\n    fulfilled: false,\n    rejected: false,\n  },\n  pending: {\n    idle: false,\n    pending: true,\n    fulfilled: false,\n    rejected: false,\n  },\n  fulfilled: {\n    idle: false,\n    pending: false,\n    fulfilled: true,\n    rejected: false,\n  },\n  rejected: {\n    idle: false,\n    pending: false,\n    fulfilled: false,\n    rejected: true,\n  },\n})\n","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { isUndefined } from 'util'\nimport { AppStore } from '../../store'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { requestFirstPage } from '../Gallery/Gallery.utils'\nimport { pencilActions } from './Pencil.actions'\nimport { Pencil, PencilAppStore, PencilProps, PencilQuery } from './Pencil.interface'\nimport {\n  getPencilsFromCacheByQuery,\n  mapRequestToCacheId,\n  mapRequestToCacheId as mapQueryToCacheId,\n} from './Pencil.utils'\n\nconst usePencilStore = () => useSelector<AppStore, PencilAppStore>(store => store.pencils)\n\nexport const usePecnilRequestStatus = () => usePencilStore().requestStatus\nexport const useNormalizedPencils = () => usePencilStore().normalized\nexport const usePencilCache = () => usePencilStore().cache\n\nexport const useCached = (userQuery?: PencilQuery) => {\n  const [currentFilter] = useFilter()\n  const filter = userQuery || currentFilter\n  const query = filter && filter.page && filter.page > 1 ? filter : requestFirstPage(filter)\n  const queryCacheId = mapQueryToCacheId({ query })\n  const cache = usePencilCache()\n  const cacheItem = cache[queryCacheId]\n  return cacheItem\n}\n\nexport const usePencil = ({ id, query, queries }: PencilProps) => {\n  const dispatch = useDispatch()\n  const requestStatus = usePecnilRequestStatus()\n  const cache = usePencilCache()\n  const normalized = useNormalizedPencils()\n  const pencil = id ? normalized[id] : undefined\n  const targetQueries = query ? [query] : queries ? queries : []\n  const pencils = targetQueries.reduce<Pencil[]>(\n    (acc, query) => [...acc, ...getPencilsFromCacheByQuery(query, cache, normalized)],\n    [],\n  )\n\n  useEffect(() => {\n    const isNotCached = (query: PencilQuery) => isUndefined(cache[mapRequestToCacheId({ query })])\n    if (id && !pencil) {\n      dispatch(pencilActions.requestSinglePencil.request({ id }))\n    } else if (query && isNotCached(query)) {\n      dispatch(pencilActions.requestPencilList.request({ query }))\n    } else if (queries) {\n      queries.filter(isNotCached).forEach(query => {\n        dispatch(pencilActions.requestPencilList.request({ query }))\n      })\n    }\n  }, [dispatch, id, query, queries, pencil, cache])\n\n  return { requestStatus, pencil, pencils }\n}\n","import { ActionType, createAsyncAction, createReducer } from 'typesafe-actions'\nimport { getRequestStatus } from '../../modules/requestStatus'\nimport { TaxonomyAppStore as StoreTaxonomy, TaxonomyResponse } from './Taxonomy.interface'\n\nconst requestTaxonomy = createAsyncAction(\n  'taxonomy:pending',\n  'taxonomy:fulfilled',\n  'taxonomy:rejected',\n)<undefined, TaxonomyResponse, undefined>()\n\nconst initialState: StoreTaxonomy = {\n  requestStatus: getRequestStatus().idle,\n  pencilCount: 0,\n  countries: [],\n  tags: [],\n}\n\nexport const taxonomyActions = { requestTaxonomy }\ntype Actions = ActionType<typeof taxonomyActions>\n\nexport default createReducer<StoreTaxonomy, Actions>(initialState)\n  .handleAction(requestTaxonomy.request, state => ({\n    requestStatus: getRequestStatus().pending,\n    pencilCount: state.pencilCount,\n    countries: state.countries,\n    tags: state.tags,\n  }))\n  .handleAction(requestTaxonomy.success, (state, { payload }) => ({\n    requestStatus: getRequestStatus().fulfilled,\n    pencilCount: payload.meta.pencils,\n    countries: payload.taxonomy.countries,\n    tags: payload.taxonomy.tags,\n  }))\n  .handleAction(requestTaxonomy.failure, state => ({\n    requestStatus: getRequestStatus().rejected,\n    pencilCount: state.pencilCount,\n    countries: state.countries,\n    tags: state.tags,\n  }))\n","import { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AppStore } from '../../store'\nimport { Pencil, PencilCountry } from './../Pencil/Pencil.interface'\nimport { taxonomyActions } from './Taxonomy.actions'\nimport { TaxonomyAppStore } from './Taxonomy.interface'\n\nexport const useTaxonomy = () => useSelector<AppStore, TaxonomyAppStore>(store => store.taxonomy)\n\nexport const useTaxonomyRequest = () => {\n  const dispatch = useDispatch()\n  const requestStatus = useTaxonomy().requestStatus\n\n  useEffect(() => {\n    dispatch(taxonomyActions.requestTaxonomy.request())\n  }, [dispatch])\n\n  return requestStatus\n}\n\nexport const usePencilFlag = (pencil: Pencil) => {\n  const normalizedCountries = useCountriesNormalizedBy('id')\n  const countryId = pencil.country.id\n  if (normalizedCountries[countryId]) {\n    return normalizedCountries[countryId].flag\n  }\n\n  return null\n}\n\nexport const useCountriesNormalizedBy = <K extends keyof PencilCountry>(field: K) => {\n  const { countries } = useTaxonomy()\n  return useMemo(\n    () =>\n      countries.reduce<Record<string, PencilCountry>>(\n        (normalized, country) => ({\n          ...normalized,\n          [country[field]]: country,\n        }),\n        {},\n      ),\n    [countries, field],\n  )\n}\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: `{pencils} из {countries}`,\n    id: 'Filter.title',\n  },\n\n  current: {\n    defaultMessage: `{country}: {pencils}`,\n    id: 'Filter.current',\n  },\n\n  all: {\n    defaultMessage: 'Все страны',\n    id: 'Filter.all',\n  },\n})\n","import React, { useEffect, useState } from 'react'\nimport { GlobeProps } from './Globe.interface'\n\nconst Globe = ({ animated }: GlobeProps) => {\n  const isAnimated = Boolean(animated)\n  const frames = ['🌍', '🌏', '🌎']\n  const speed = 400\n  const [index, setIndex] = useState(0)\n  useEffect(() => {\n    if (isAnimated) {\n      const spin = setTimeout(() => {\n        const nextIndex = index + 1 === frames.length ? 0 : index + 1\n        setIndex(nextIndex)\n      }, speed)\n      return () => {\n        clearTimeout(spin)\n      }\n    }\n  }, [isAnimated, speed, index, setIndex, frames])\n\n  return <>{frames[index]}</>\n}\n\nexport default Globe\n","import { Location } from 'history'\nimport React, { ChangeEvent, useEffect, useRef } from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { useHistory } from 'react-router-dom'\nimport { appMessages } from '../App/App.messages'\nimport { useCached } from '../Pencil/Pencil.hooks'\nimport { useTaxonomy } from '../Taxonomy/Taxonomy.hooks'\nimport { useFilter } from './Filter.hooks'\nimport messages from './Filter.messages'\nimport { mapFilterToQueryString, mapQueryStringToFilter } from './Filter.utils'\nimport Globe from './Globe'\n\nconst Filter = () => {\n  const history = useHistory()\n  const { countries, pencilCount } = useTaxonomy()\n  const intl = useIntl()\n  const [filter, setFilter] = useFilter()\n  const cached = useCached()\n  const isFiltered = Boolean(filter.country || filter.tag)\n  const select = useRef<HTMLSelectElement>(null)\n\n  useEffect(() => {\n    if (mapFilterToQueryString(filter) !== window.location.search) {\n      history.push(mapFilterToQueryString(filter))\n    }\n  }, [filter, history])\n\n  useEffect(() => {\n    const unlisten = history.listen(({ search }: Location, action) => {\n      if (action === 'POP') {\n        setFilter(mapQueryStringToFilter(search))\n      }\n    })\n    return unlisten\n  }, [filter, history, setFilter])\n\n  return (\n    <div className=\"Filter\">\n      <div className=\"Filter-control\">\n        <button\n          className=\"Filter-clear-button\"\n          onClick={() => {\n            if (isFiltered) {\n              setFilter({ country: '', tag: '' })\n            }\n            if (select.current) {\n              select.current.focus()\n            }\n          }}\n        >\n          <span className=\"Filter-Globe\">\n            <Globe animated={isFiltered} />\n          </span>\n          <FormattedMessage\n            {...messages.title}\n            values={{\n              pencils: (\n                <span className=\"Filter-span\">\n                  <FormattedMessage {...appMessages.pencil} values={{ count: pencilCount }} />\n                </span>\n              ),\n              countries: (\n                <span className=\"Filter-span\">\n                  <FormattedMessage\n                    {...appMessages.country}\n                    values={{ count: countries.length + 1 }}\n                  />\n                </span>\n              ),\n            }}\n          />\n        </button>\n      </div>\n      <div className=\"Filter-control\">\n        <select\n          ref={select}\n          className=\"Filter-select\"\n          value={filter.country}\n          onChange={(e: ChangeEvent<HTMLSelectElement>) =>\n            setFilter({ country: e.target.value, tag: '' })\n          }\n        >\n          <option key=\"empty-country\" value=\"\">\n            {intl.formatMessage(messages.all)}\n          </option>\n          {countries.map(country => {\n            const isCurrent = filter.country === country.name\n            return (\n              <option key={country.name} value={country.name}>\n                {country.flag}{' '}\n                {isCurrent && cached\n                  ? intl.formatMessage(messages.current, {\n                      country: country.name,\n                      pencils: intl.formatMessage(appMessages.pencil, {\n                        count: cached.pages.pencils,\n                      }),\n                    })\n                  : country.name}\n              </option>\n            )\n          })}\n        </select>\n      </div>\n    </div>\n  )\n}\n\nexport default Filter\n","import React from 'react'\nimport Globe from '../Filter/Globe'\n\nconst Loader = () => (\n  <div className=\"Loader\">\n    <Globe animated />\n  </div>\n)\n\nexport default Loader\n","import classNames from 'classnames'\nimport React from 'react'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { GridProps } from './Grid.interface'\n\nconst Grid = ({ pencils }: GridProps) => {\n  const [, setFilter] = useFilter()\n\n  return (\n    <div className=\"Grid\">\n      {pencils.map(pencil => {\n        const thumbSize = pencil.preview\n        const fullSize = pencil.photos[0]\n        const useSize = pencil.grid === 1 ? thumbSize : fullSize\n\n        return (\n          <a\n            href={`?display=${pencil.id}`}\n            onClick={e => {\n              e.preventDefault()\n              setFilter({ display: pencil.id })\n            }}\n            className={classNames('GridItem', {\n              size2: pencil.grid === 2,\n              size3: pencil.grid === 3,\n            })}\n            key={pencil.id}\n            title={pencil.title}\n          >\n            <img srcSet={`${useSize}, ${fullSize} 2x`} alt={pencil.title} src={useSize} />\n          </a>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Grid\n","import { throttle } from 'lodash'\nimport React, { useEffect, useState } from 'react'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport Loader from '../Loader'\nimport { useCached, usePencil } from '../Pencil/Pencil.hooks'\nimport { PencilQuery } from '../Pencil/Pencil.interface'\nimport { getNextPageNumberFromPages } from '../Pencil/Pencil.utils'\nimport { requestFirstPage } from './Gallery.utils'\nimport Grid from './Grid'\n\nconst Gallery = () => {\n  const [filter] = useFilter()\n  const [queries, setQueries] = useState<PencilQuery[]>([])\n  const lastQuery = queries[queries.length - 1]\n  const cached = useCached(lastQuery)\n  const { pencils } = usePencil({ queries })\n  const nextPageNumber = cached ? getNextPageNumberFromPages(cached.pages) : null\n  const { country, tag, page } = filter\n\n  useEffect(() => {\n    setQueries([requestFirstPage({ country, tag, page })])\n  }, [country, tag, page])\n  useEffect(() => {\n    const loadNextPage = (nextpage: number) => {\n      setQueries([...queries, { page: nextpage, ...filter }])\n    }\n    const onScroll = throttle(() => {\n      if (nextPageNumber) {\n        const preloadSensivity = document.body.clientHeight * 0.6\n        const scrollBottomLine = window.pageYOffset + window.innerHeight\n        if (preloadSensivity < scrollBottomLine) {\n          loadNextPage(nextPageNumber)\n        }\n      }\n    }, 500)\n    if (nextPageNumber) {\n      window.addEventListener('scroll', onScroll)\n    }\n    return () => {\n      window.removeEventListener('scroll', onScroll)\n    }\n  }, [queries, nextPageNumber, filter])\n\n  return (\n    <>\n      <Grid pencils={pencils} />\n\n      {nextPageNumber ? (\n        <div className=\"Gallery-loading\">\n          <Loader />\n        </div>\n      ) : null}\n    </>\n  )\n}\n\nexport default Gallery\n","import { geoPath, GeoRawProjection } from 'd3-geo'\nimport { geoProjection } from 'd3-geo'\nimport { FeatureCollection, GeoJsonProperties, Geometry } from 'geojson'\nimport { feature } from 'topojson-client'\nimport { Topology } from 'topojson-specification'\nimport { TopologyItem } from './Map.interface.js'\nimport geography from './world.json'\n\n// TODO: how to get the type properly?\nconst topology: Topology = geography as any\nconst featureCollection = feature(topology, topology.objects.world) as FeatureCollection<\n  Geometry,\n  GeoJsonProperties\n>\n\nconst timesRaw: GeoRawProjection = (lambda, phi) => {\n  // https://github.com/d3/d3-geo-projection/blob/master/src/times.js\n  const { PI, sin, tan } = Math\n  const t = tan(phi / 2)\n  const quarterPi = PI / 4\n  const s = sin(quarterPi * t)\n\n  return [lambda * (0.74482 - 0.34588 * s * s), 1.70711 * t]\n}\n\nconst projection = () => geoProjection(timesRaw).translate([mapWidth / 2, mapHeight / 2 + 40])\n\nexport const mapWidth = 800\nexport const mapHeight = 400\nexport const topologies = featureCollection.features.map<TopologyItem>(geo => {\n  const pathD = geoPath().projection(projection())(geo)\n  if (pathD === null) {\n    throw new Error()\n  }\n\n  return { ...geo, pathD }\n})\n","import classNames from 'classnames'\nimport React from 'react'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { useCountriesNormalizedBy } from '../Taxonomy/Taxonomy.hooks'\nimport { mapHeight, mapWidth, topologies } from './Map.utils'\n\nconst Map = () => {\n  const [filter, setFilter] = useFilter()\n  const normalizedIds = useCountriesNormalizedBy('id')\n\n  return (\n    <div className=\"Map\">\n      <svg\n        width={mapWidth}\n        height={mapHeight}\n        viewBox={`0 0 ${mapWidth} ${mapHeight}`}\n        className=\"Map-block\"\n      >\n        {topologies.map(topology => {\n          const geoId = topology.id\n          const country = geoId && normalizedIds[geoId] ? normalizedIds[geoId].name : null\n          const hasPencil = country !== null\n          const isSelected = country === filter.country\n\n          return (\n            <path\n              key={geoId}\n              d={topology.pathD}\n              onClick={() => {\n                if (isSelected) {\n                  setFilter({ country: '' })\n                } else if (country) {\n                  setFilter({ country })\n                }\n              }}\n              className={classNames(\n                'Map-country',\n                hasPencil && 'Map-has-pencil',\n                isSelected && 'Map-selected',\n              )}\n            />\n          )\n        })}\n      </svg>\n    </div>\n  )\n}\n\nexport default Map\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: 'В коробке с карандашами',\n    id: 'PageTitle.title',\n  },\n\n  pencil: {\n    defaultMessage: '{flag} {title}, {country}',\n    id: 'PageTitle.pencil',\n  },\n\n  country: {\n    defaultMessage: '{flag} {country}. {pencils}',\n    id: 'PageTitle.country',\n  },\n})\n","import { useEffect } from 'react'\nimport { useIntl } from 'react-intl'\nimport { appMessages } from '../App/App.messages'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { useCached, useNormalizedPencils } from '../Pencil/Pencil.hooks'\nimport { useCountriesNormalizedBy } from '../Taxonomy/Taxonomy.hooks'\nimport messages from './PageTitle.messages'\n\nconst PageTitle = () => {\n  const [filter] = useFilter()\n  const cached = useCached()\n  const intl = useIntl()\n  const normalizedPencils = useNormalizedPencils()\n  const normalizedCoutries = useCountriesNormalizedBy('name')\n  const pencil = normalizedPencils[filter.display]\n  const flag = normalizedCoutries[filter.country]\n    ? normalizedCoutries[filter.country].flag\n    : undefined\n\n  const count = filter.country && cached ? cached.pages.pencils : undefined\n\n  useEffect(() => {\n    if (pencil && flag) {\n      const { title, country } = pencil\n      document.title = intl.formatMessage(messages.pencil, { title, country: country.name, flag })\n    } else if (filter.country && count) {\n      document.title = intl.formatMessage(messages.country, {\n        flag,\n        country: filter.country,\n        pencils: intl.formatMessage(appMessages.pencil, { count }),\n      })\n    } else {\n      document.title = intl.formatMessage(messages.title)\n    }\n  }, [intl, pencil, count, filter, flag])\n\n  return null\n}\n\nexport default PageTitle\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  photo: {\n    defaultMessage: '{count, number} фото',\n    id: 'Info.photo',\n  },\n})\n","import React, { useCallback } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { getEmptyFilter } from '../../Filter/Filter.utils'\nimport { usePencilFlag } from '../../Taxonomy/Taxonomy.hooks'\nimport { InfoProps } from './Info.interface'\nimport messages from './Info.messages'\nimport { getFilterFromLink } from './Info.utils'\n\nconst Info = ({ pencil }: InfoProps) => {\n  const [, setFilter] = useFilter()\n  const flag = usePencilFlag(pencil)\n  const location = [pencil.country.name, pencil.city].filter(Boolean).join(', ')\n  const handlePseudoLink = useCallback(\n    (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      e.stopPropagation()\n      const targetElement = e.target as HTMLElement\n\n      if (targetElement.tagName === 'A') {\n        const link = targetElement.getAttribute('href')\n        if (link) {\n          const filterFromLink = getFilterFromLink(link)\n          if (filterFromLink) {\n            e.preventDefault()\n            setFilter({ ...getEmptyFilter(), ...filterFromLink })\n          }\n        }\n      }\n    },\n    [setFilter],\n  )\n\n  return (\n    <div className=\"Info\">\n      <div className=\"Info-content\">\n        <h1>{pencil.title}</h1>\n        <h2>\n          {flag} {location}\n        </h2>\n\n        <article dangerouslySetInnerHTML={{ __html: pencil.content }} onClick={handlePseudoLink} />\n\n        <p>\n          <FormattedMessage\n            tagName=\"b\"\n            {...messages.photo}\n            values={{ count: pencil.photos.length }}\n          />\n        </p>\n      </div>\n      {pencil.photos.map(src => (\n        <div key={src} className=\"Info-frame\">\n          <img className=\"Info-photo\" alt={pencil.title} src={src} />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Info\n","import { isEmpty, pick } from 'lodash'\nimport qs from 'qs'\nimport { Filter } from './../../Filter/Filter.interface'\nimport { getEmptyFilter } from './../../Filter/Filter.utils'\n\nexport const getFilterFromLink = (link: string): Filter | null => {\n  const queryPart = link.split('?')[1]\n  if (queryPart) {\n    const emptyFilter = getEmptyFilter()\n    const query = qs.parse(queryPart)\n    const filterKeys = Object.keys(emptyFilter) as Array<keyof Filter>\n    const keysFromQuery = pick<Filter, keyof Filter>(query, filterKeys)\n    if (!isEmpty(keysFromQuery)) {\n      return keysFromQuery\n    }\n  }\n\n  return null\n}\n","import React, { useEffect } from 'react'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { usePencil } from '../Pencil/Pencil.hooks'\nimport Info from './Info'\n\nconst PencilInfo = () => {\n  const [filter, setFilter] = useFilter()\n  const { display } = filter\n  const closePencilInfo = () => setFilter({ display: '' })\n  const { pencil } = usePencil({ id: display })\n\n  useEffect(() => {\n    if (display === '') {\n      document.body.classList.remove('no-scroll')\n    } else {\n      document.body.classList.add('no-scroll')\n    }\n  }, [display])\n\n  return pencil ? (\n    <div className=\"PencilInfo-backdrop\" onClick={closePencilInfo}>\n      <div className=\"PencilInfo-content\">\n        <Info pencil={pencil} />\n      </div>\n    </div>\n  ) : null\n}\n\nexport default PencilInfo\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: '{pencils} в категории \"{tag}\"',\n    id: 'TagHeader.title',\n  },\n})\n","import React, { useCallback, useEffect } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { appMessages } from '../../App/App.messages'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { useCached, usePecnilRequestStatus } from '../../Pencil/Pencil.hooks'\nimport messages from './TagHeader.messages'\n\nconst TagHeader = () => {\n  const [{ tag }, setFilter] = useFilter()\n  const cache = useCached()\n  const requestStatus = usePecnilRequestStatus()\n  const dropTag = useCallback(() => setFilter({ tag: '' }), [setFilter])\n\n  useEffect(() => {\n    if (requestStatus.rejected) {\n      dropTag()\n    }\n  }, [dropTag, requestStatus])\n\n  return (\n    <button onClick={dropTag} className=\"TagHeader-drop\">\n      {cache ? (\n        <FormattedMessage\n          tagName=\"h3\"\n          {...messages.title}\n          values={{\n            tag,\n            pencils: (\n              <FormattedMessage {...appMessages.pencil} values={{ count: cache.pages.pencils }} />\n            ),\n          }}\n        />\n      ) : null}\n    </button>\n  )\n}\n\nexport default TagHeader\n","import React from 'react'\nimport { FormattedMessage, IntlProvider } from 'react-intl'\nimport { BrowserRouter } from 'react-router-dom'\nimport Filter from '../Filter'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport Gallery from '../Gallery'\nimport Loader from '../Loader'\nimport Map from '../Map'\nimport PageTitle from '../PageTitle'\nimport PencilInfo from '../PencilInfo'\nimport TagHeader from '../PencilInfo/TagHeader'\nimport { useTaxonomyRequest } from '../Taxonomy/Taxonomy.hooks'\nimport { appMessages } from './App.messages'\n\nconst App = () => {\n  const [{ tag }] = useFilter()\n  const { pending, fulfilled, rejected } = useTaxonomyRequest()\n\n  return (\n    <IntlProvider locale=\"ru\" defaultLocale=\"ru\">\n      {rejected ? (\n        <div className=\"App-loading\">\n          <button onClick={() => window.location.reload()}>\n            <FormattedMessage {...appMessages.error} />\n          </button>\n        </div>\n      ) : pending ? (\n        <div className=\"App-loading\">\n          <Loader />\n        </div>\n      ) : fulfilled ? (\n        <div className=\"App\">\n          <BrowserRouter>\n            <PageTitle />\n\n            <PencilInfo />\n\n            <section className=\"App-block\">\n              <Filter />\n            </section>\n\n            {tag ? (\n              <section className=\"App-block\">\n                <TagHeader />\n              </section>\n            ) : (\n              <Map />\n            )}\n\n            <section className=\"App-block\">\n              <Gallery />\n            </section>\n          </BrowserRouter>\n        </div>\n      ) : null}\n    </IntlProvider>\n  )\n}\n\nexport default App\n","const apiUrl = process.env.REACT_APP_API_URL\nif (!apiUrl) {\n  throw new Error('no api url')\n}\n\nconst appConfig = {\n  apiUrl,\n}\n\nexport default appConfig\n","import appConfig from '../appConfig'\n\nconst apiRequest = <T>(path: string): Promise<T> =>\n  fetch(appConfig.apiUrl + path)\n    .then(response => response.json())\n    .catch(error => {\n      console.error('api', path, error)\n      throw error\n    })\n\nexport default apiRequest\n","import apiRequest from '../../modules/api'\nimport {\n  PencilListResponse,\n  PencilSingleRequest,\n  PencilSingleResponse,\n  PencilsListRequest,\n} from './Pencil.interface'\nimport {\n  mapPencilListQueryRequestUrl,\n  mapPencilsingleQueryRequestUrl,\n  mapRequestToCacheId,\n} from './Pencil.utils'\n\nexport const apiRequestSinglePencil = (request: PencilSingleRequest) =>\n  apiRequest<PencilSingleResponse>(mapPencilsingleQueryRequestUrl(request))\n\nexport const apiRequestPencilList = (request: PencilsListRequest) =>\n  apiRequest<PencilListResponse>(mapPencilListQueryRequestUrl(request.query)).then(data => {\n    data.cacheId = mapRequestToCacheId(request)\n    return data\n  })\n","import { combineEpics } from 'redux-observable'\nimport { pencilEpic } from './components/Pencil'\nimport { taxonomyEpic } from './components/Taxonomy'\n\nconst rootEpic = combineEpics(taxonomyEpic, pencilEpic)\n\nexport default rootEpic\n","import { ActionsObservable, ofType } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { catchError, map, mergeMap } from 'rxjs/operators'\nimport { ActionType, getType } from 'typesafe-actions'\nimport { taxonomyActions } from './Taxonomy.actions'\nimport { apiRequestTaxonomy } from './Taxonomy.api'\n\nexport default (\n  action$: ActionsObservable<ActionType<typeof taxonomyActions.requestTaxonomy.request>>,\n) =>\n  action$.pipe(\n    ofType(getType(taxonomyActions.requestTaxonomy.request)),\n    mergeMap(() =>\n      from(apiRequestTaxonomy()).pipe(\n        map(taxonomyActions.requestTaxonomy.success),\n        catchError(() => of(taxonomyActions.requestTaxonomy.failure())),\n      ),\n    ),\n  )\n","import apiRequest from '../../modules/api'\nimport { TaxonomyResponse } from './Taxonomy.interface'\n\nexport const apiRequestTaxonomy = () => apiRequest<TaxonomyResponse>('/taxonomy/')\n","import { uniqBy } from 'lodash'\nimport { ActionsObservable, ofType } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { bufferTime, catchError, filter, map, mergeAll, mergeMap } from 'rxjs/operators'\nimport { ActionType, getType, isActionOf } from 'typesafe-actions'\nimport { pencilActions } from './Pencil.actions'\nimport { apiRequestPencilList, apiRequestSinglePencil } from './Pencil.api'\nimport { mapRequestToCacheId } from './Pencil.utils'\n\nexport default (\n  action$: ActionsObservable<\n    ActionType<\n      | typeof pencilActions.requestSinglePencil.request\n      | typeof pencilActions.requestPencilList.request\n    >\n  >,\n) =>\n  action$.pipe(\n    ofType(\n      getType(pencilActions.requestSinglePencil.request),\n      getType(pencilActions.requestPencilList.request),\n    ),\n    bufferTime(66),\n    filter(actions => actions.length > 0),\n    mergeMap(actions =>\n      from(\n        uniqBy(actions, ({ payload }) => mapRequestToCacheId(payload)).map(action => {\n          if (isActionOf(pencilActions.requestSinglePencil.request)(action)) {\n            return from(apiRequestSinglePencil(action.payload)).pipe(\n              map(pencilActions.requestSinglePencil.success),\n              catchError(() => of(pencilActions.requestSinglePencil.failure())),\n            )\n          } else if (isActionOf(pencilActions.requestPencilList.request)(action)) {\n            return from(apiRequestPencilList(action.payload)).pipe(\n              map(pencilActions.requestPencilList.success),\n              catchError(() => of(pencilActions.requestPencilList.failure())),\n            )\n          }\n          throw new Error()\n        }),\n      ).pipe(mergeAll()),\n    ),\n  )\n","import { applyMiddleware, combineReducers, createStore, Store } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { createEpicMiddleware } from 'redux-observable'\nimport { filterReducer } from './components/Filter'\nimport { pencilReducer } from './components/Pencil'\nimport { taxonomyReducer } from './components/Taxonomy'\nimport rootEpic from './epics'\n\nconst epicMiddleware = createEpicMiddleware()\nconst rootReducer = combineReducers({\n  taxonomy: taxonomyReducer,\n  pencils: pencilReducer,\n  filter: filterReducer,\n})\nconst store: Store<AppStore> = createStore(\n  rootReducer,\n  {},\n  composeWithDevTools(applyMiddleware(epicMiddleware)),\n)\nepicMiddleware.run(rootEpic)\n\nexport type AppStore = ReturnType<typeof rootReducer>\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport './index.css'\nimport store from './store'\n\nif (!Intl.PluralRules) {\n  // tslint:disable-next-line: no-var-requires\n  require('intl-pluralrules')\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}