{"version":3,"sources":["components/App/App.messages.ts","components/Filter/Filter.utils.ts","components/Filter/Filter.actions.ts","components/Filter/Filter.hooks.ts","components/Filter/Filter.messages.ts","components/Filter/Globe/Globe.tsx","components/Taxonomy/Taxonomy.actions.ts","requestStatus.ts","components/Taxonomy/Taxonomy.hooks.ts","components/Pencil/Pencil.utils.ts","components/Pencil/Pencil.actions.ts","components/Gallery/Gallery.utils.ts","components/Pencil/Pencil.hooks.ts","components/Filter/Filter.tsx","components/Gallery/Grid/Grid.tsx","components/Gallery/Gallery.tsx","components/Loader/Loader.tsx","components/Map/Map.utils.ts","components/Map/Map.tsx","components/PageTitle/PageTitle.messages.ts","components/PageTitle/PageTitle.tsx","components/PencilInfo/Info/Info.hooks.ts","components/PencilInfo/Info/Info.utils.ts","components/PencilInfo/Info/Info.messages.ts","components/PencilInfo/Info/Info.tsx","components/PencilInfo/PencilInfo.tsx","components/PencilInfo/TagHeader/TagHeader.messages.ts","components/PencilInfo/TagHeader/TagHeader.tsx","components/App/App.tsx","appConfig.ts","api.ts","components/Pencil/Pencil.api.ts","components/Pencil/Pencil.epic.ts","components/Taxonomy/Taxonomy.epic.ts","components/Taxonomy/Taxonomy.api.ts","rootEpic.ts","rootReducer.ts","store.ts","index.tsx"],"names":["appMessages","defineMessages","pencil","defaultMessage","id","country","error","mapFilterToQueryString","filter","query","qs","stringify","pickBy","Boolean","mapQueryStringToFilter","querystring","window","location","search","input","parse","ignoreQueryPrefix","emptyFilter","display","tag","filterKeys","Object","keys","pick","initialState","updateFilter","createAction","filterActions","createReducer","handleAction","state","payload","useFilter","useSelector","store","dispatch","useDispatch","setFilter","useCallback","update","isMatch","title","current","all","Globe","animated","isAnimated","frames","useState","index","setIndex","useEffect","spin","setTimeout","length","clearTimeout","requestTaxonomy","createAsyncAction","requestStatus","idle","pending","fulfilled","rejected","pencilCount","countries","tags","taxonomyActions","request","success","meta","pencils","taxonomy","failure","useTaxonomy","useCountriesNormalizedBy","field","useMemo","mapKeys","mapRequestToCacheId","cahceIdParts","page","push","join","cache","normalized","requestSinglePencil","requestPencilList","pencilActions","cacheId","pages","data","geoIds","ids","map","reduce","list","getCacheAndNormilizedFromList","requestFirstPage","usePencilStore","usePecnilRequestStatus","useNormalizedPencils","usePencilCache","useCached","userQuery","currentFilter","mapQueryToCacheId","usePencil","queries","undefined","acc","total","nextUrl","items","Error","getPencilsFromCacheByQuery","isNotCached","isUndefined","forEach","Filter","cached","history","useHistory","intl","useIntl","select","useRef","isFiltered","pencilsInCountry","listen","action","className","onClick","focus","messages","values","count","ref","value","onChange","e","target","key","formatMessage","optionText","name","flag","Grid","thumbSize","preview","fullSize","photos","useSize","grid","classNames","size2","size3","href","preventDefault","srcSet","alt","src","Gallery","setQueries","last","loadNextPage","onScroll","throttle","scrollBottomLine","pageYOffset","innerHeight","document","body","clientHeight","checkWindowScroll","leading","addEventListener","removeEventListener","Loader","topology","featureCollection","feature","objects","world","timesRaw","lambda","phi","PI","Math","sin","t","tan","s","mapWidth","mapHeight","topologies","features","geo","pathD","geoPath","projection","geoProjection","translate","Map","normalizedIds","width","height","viewBox","geoId","hasPencil","isSelected","includes","data-testid","d","PageTitle","normalizedPencils","normalizedCoutries","usePseudoClick","stopPropagation","targetElement","tagName","link","getAttribute","filterFromLink","queryPart","split","keysFromQuery","isEmpty","getFilterFromLink","photo","Info","usePencilFlag","handlePseudoLink","city","displayPencilLocation","dangerouslySetInnerHTML","__html","content","PencilInfo","scroller","style","overflow","scrollTop","TagHeader","dropTag","countryFlags","normalizedCountries","compact","useCountryFlags","countryCount","App","useTaxonomyRequest","locale","defaultLocale","reload","apiUrl","process","appConfig","apiRequest","path","fetch","then","response","json","catch","console","apiRequestPencilList","pathParts","sanitize","encodeURIComponent","toLowerCase","replace","mapPencilListQueryRequestUrl","pencilEpic","action$","pipe","ofType","getType","bufferTime","actions","mergeMap","from","uniqBy","isActionOf","mapPencilsingleQueryRequestUrl","catchError","of","mergeAll","taxonomyEpic","rootEpic","combineEpics","rootReducer","combineReducers","epicMiddleware","createEpicMiddleware","createStore","composeWithDevTools","applyMiddleware","run","Intl","PluralRules","require","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.fd73ebb4.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl'\n\nexport const appMessages = defineMessages({\n  pencil: {\n    defaultMessage: `{count, plural,\n      one {# карандаш}\n      few {# карандаша}\n      many {# карандашей}\n    }`,\n    id: 'App.pencil',\n  },\n\n  country: {\n    defaultMessage: `{count, plural,\n      one {# страны}\n      few {# стран}\n      many {# стран}\n    }`,\n    id: 'App.country',\n  },\n\n  error: {\n    defaultMessage: 'не могу загрузить',\n    id: 'App.error',\n  },\n})\n","import { pick, pickBy } from 'lodash'\nimport qs from 'qs'\nimport { Filter } from './Filter.interface'\n\nexport const getEmptyFilter = (): Filter => ({\n  display: '',\n  country: '',\n  tag: '',\n})\n\nexport const mapFilterToQueryString = (filter: Partial<Filter>): string => {\n  const query = qs.stringify(pickBy(filter, Boolean))\n\n  return query ? `?${query}` : ''\n}\n\nexport const mapQueryStringToFilter = (querystring = window.location.search): Filter => {\n  const input = qs.parse(querystring, { ignoreQueryPrefix: true })\n  const emptyFilter = getEmptyFilter()\n  const filterKeys = Object.keys(emptyFilter)\n  const filter = pick(input, filterKeys)\n\n  return { ...emptyFilter, ...filter }\n}\n\nexport const getInitialFilter = (): Filter => ({\n  ...getEmptyFilter(),\n  ...mapQueryStringToFilter(),\n})\n","import { ActionType, createAction, createReducer } from 'typesafe-actions'\nimport { Filter, FilterAppStore } from './Filter.interface'\nimport { getInitialFilter } from './Filter.utils'\n\nconst initialState: FilterAppStore = getInitialFilter()\nconst updateFilter = createAction('filter:set')<Partial<Filter>>()\ntype Actions = ActionType<typeof filterActions>\n\nexport const filterActions = { updateFilter }\n\nexport default createReducer<FilterAppStore, Actions>(initialState).handleAction(\n  updateFilter,\n  (state, { payload }) => ({ ...state, ...payload }),\n)\n","import { isMatch } from 'lodash'\nimport { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AppStore } from './../../store'\nimport { filterActions } from './Filter.actions'\nimport { Filter } from './Filter.interface'\n\nexport const useFilter = () => {\n  const filter = useSelector<AppStore, Filter>(store => store.filter)\n  const dispatch = useDispatch()\n  const setFilter = useCallback(\n    (update: Partial<Filter>) => {\n      if (!isMatch(filter, update)) {\n        dispatch(filterActions.updateFilter(update))\n      }\n    },\n    [filter, dispatch],\n  )\n\n  return [filter, setFilter] as const\n}\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: `{pencils} из {countries}`,\n    id: 'Filter.title',\n  },\n\n  current: {\n    defaultMessage: `{country}: {pencils}`,\n    id: 'Filter.current',\n  },\n\n  all: {\n    defaultMessage: 'Все страны',\n    id: 'Filter.all',\n  },\n})\n","import React, { useEffect, useState } from 'react'\nimport { GlobeProps } from './Globe.interface'\n\nconst Globe = ({ animated }: GlobeProps) => {\n  const isAnimated = Boolean(animated)\n  const frames = ['🌍', '🌏', '🌎']\n  const speed = 400\n  const [index, setIndex] = useState(0)\n  useEffect(() => {\n    if (isAnimated) {\n      const spin = setTimeout(() => {\n        const nextIndex = index + 1 === frames.length ? 0 : index + 1\n        setIndex(nextIndex)\n      }, speed)\n\n      return () => {\n        clearTimeout(spin)\n      }\n    }\n  }, [isAnimated, speed, index, setIndex, frames])\n\n  return <>{frames[index]}</>\n}\n\nexport default Globe\n","import { ActionType, createAsyncAction, createReducer } from 'typesafe-actions'\nimport { TaxonomyAppStore as StoreTaxonomy, TaxonomyResponse } from './Taxonomy.interface'\nimport { getRequestStatus } from '../../requestStatus'\n\nconst requestTaxonomy = createAsyncAction(\n  'taxonomy:pending',\n  'taxonomy:fulfilled',\n  'taxonomy:rejected',\n)<undefined, TaxonomyResponse, undefined>()\n\nconst initialState: StoreTaxonomy = {\n  requestStatus: getRequestStatus().idle,\n  pencilCount: 0,\n  countries: [],\n  tags: [],\n}\n\nexport const taxonomyActions = { requestTaxonomy }\nexport type TaxonomyActions = ActionType<typeof taxonomyActions>\n\nexport default createReducer<StoreTaxonomy, TaxonomyActions>(initialState)\n  .handleAction(requestTaxonomy.request, state => ({\n    requestStatus: getRequestStatus().pending,\n    pencilCount: state.pencilCount,\n    countries: state.countries,\n    tags: state.tags,\n  }))\n  .handleAction(requestTaxonomy.success, (state, { payload }) => ({\n    requestStatus: getRequestStatus().fulfilled,\n    pencilCount: payload.meta.pencils,\n    countries: payload.taxonomy.countries,\n    tags: payload.taxonomy.tags,\n  }))\n  .handleAction(requestTaxonomy.failure, state => ({\n    requestStatus: getRequestStatus().rejected,\n    pencilCount: state.pencilCount,\n    countries: state.countries,\n    tags: state.tags,\n  }))\n","export interface RequestStatus {\n  idle: boolean\n  pending: boolean\n  fulfilled: boolean\n  rejected: boolean\n}\n\nexport const getRequestStatus = (): Record<keyof RequestStatus, RequestStatus> => ({\n  idle: {\n    idle: true,\n    pending: false,\n    fulfilled: false,\n    rejected: false,\n  },\n  pending: {\n    idle: false,\n    pending: true,\n    fulfilled: false,\n    rejected: false,\n  },\n  fulfilled: {\n    idle: false,\n    pending: false,\n    fulfilled: true,\n    rejected: false,\n  },\n  rejected: {\n    idle: false,\n    pending: false,\n    fulfilled: false,\n    rejected: true,\n  },\n})\n","import { compact, mapKeys } from 'lodash'\nimport { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Pencil, PencilCountry } from './../Pencil/Pencil.interface'\nimport { taxonomyActions } from './Taxonomy.actions'\nimport { TaxonomyAppStore } from './Taxonomy.interface'\nimport { AppStore } from '../../store'\n\nexport const useTaxonomy = () => useSelector<AppStore, TaxonomyAppStore>(store => store.taxonomy)\n\nexport const useTaxonomyRequest = () => {\n  const dispatch = useDispatch()\n  const requestStatus = useTaxonomy().requestStatus\n\n  useEffect(() => {\n    dispatch(taxonomyActions.requestTaxonomy.request())\n  }, [dispatch])\n\n  return requestStatus\n}\n\nexport const usePencilFlag = (pencil: Pencil) => {\n  const normalizedCountries = useCountriesNormalizedBy('id')\n  const countryId = pencil.country.id\n\n  return normalizedCountries[countryId]?.flag\n}\n\nexport const useCountryFlags = (geoIds: string[]) => {\n  const normalizedCountries = useCountriesNormalizedBy('id')\n\n  return compact(geoIds.map(geoId => normalizedCountries[geoId]?.flag))\n}\n\nexport const useCountriesNormalizedBy = <K extends keyof PencilCountry>(\n  field: K,\n): Partial<Record<string, PencilCountry>> => {\n  const { countries } = useTaxonomy()\n\n  return useMemo(() => mapKeys(countries, field), [countries, field])\n}\n","import {\n  Pencil,\n  PencilCache,\n  PencilCacheItem,\n  PencilListResponse,\n  PencilPages,\n  PencilQuery,\n  PencilRequest,\n  PencilSingleRequest,\n  PencilsNormalized,\n} from './Pencil.interface'\n\nconst getEmptyPencilCacheItem = (): PencilCacheItem => ({\n  ids: [],\n  geoIds: [],\n  pages: {\n    page: 0,\n    total: 0,\n    nextUrl: null,\n    items: 0,\n    pencils: 0,\n  },\n})\n\nexport const mapPencilsingleQueryRequestUrl = ({ id }: PencilSingleRequest): string =>\n  `/pencil/${id}/`\n\nexport const mapPencilListQueryRequestUrl = ({ page, tag, country }: PencilQuery): string => {\n  const pathParts: string[] = []\n  const sanitize = (input: string) => encodeURIComponent(input.toLowerCase().replace(/\\s/g, '-'))\n\n  if (tag && country) {\n    throw new Error('no tag and country at the same time')\n  }\n\n  if (tag) {\n    pathParts.push(`/tags/${sanitize(tag)}`)\n  }\n  if (country) {\n    pathParts.push(`/countries/${sanitize(country)}`)\n  }\n  if (page && page !== 1) {\n    pathParts.push(`/page/${page}`)\n  }\n\n  return `${pathParts.join('/')}/`\n}\n\nexport const mapRequestToCacheId = (request: PencilRequest): string => {\n  const cahceIdParts: string[] = ['_']\n  if (request.id) {\n    return `id:${request.id}`\n  } else if (request.query) {\n    const { page, tag, country } = request.query\n    if (page) {\n      cahceIdParts.push(`p:${page}`)\n    }\n    if (tag) {\n      cahceIdParts.push(`t:${tag}`)\n    }\n    if (country) {\n      cahceIdParts.push(`c:${country}`)\n    }\n  }\n\n  return cahceIdParts.join('|')\n}\n\ninterface CacheAndNormalize {\n  cache: PencilCache\n  normalized: PencilsNormalized\n}\nexport const getCacheAndNormilizedFromList = ({\n  cacheId,\n  pages,\n  data,\n  geoIds,\n}: PencilListResponse): CacheAndNormalize => {\n  const ids = data.map(({ id }) => id)\n  const normalized = data.reduce((list, pencil) => ({ ...list, [pencil.id]: pencil }), {})\n\n  return { normalized, cache: { [cacheId]: { ids, pages, geoIds } } }\n}\n\nexport const getNextPageNumberFromPages = (pages?: PencilPages): number | null => {\n  if (pages) {\n    if (pages.page < pages.total) {\n      return pages.page + 1\n    }\n  }\n\n  return null\n}\n\nexport const getPencilsFromCacheByQuery = (\n  query: PencilQuery,\n  cache: Partial<PencilCache>,\n  normalized: PencilsNormalized,\n): Pencil[] => {\n  const pencilCache: PencilCacheItem =\n    cache[mapRequestToCacheId({ query })] || getEmptyPencilCacheItem()\n  const pencils = pencilCache.ids.map(id => {\n    const data = normalized[id]\n    if (!data) {\n      throw new Error(`no cache for id ${id}`)\n    }\n\n    return data\n  })\n\n  return pencils\n}\n","import { ActionType, createAsyncAction, createReducer } from 'typesafe-actions'\nimport {\n  PencilAppStore,\n  PencilListResponse,\n  PencilSingleRequest,\n  PencilSingleResponse,\n  PencilsListRequest,\n} from './Pencil.interface'\nimport { getCacheAndNormilizedFromList } from './Pencil.utils'\nimport { getRequestStatus } from '../../requestStatus'\n\nconst initialState: PencilAppStore = {\n  requestStatus: getRequestStatus().idle,\n  cache: {},\n  normalized: {},\n}\n\nconst requestSinglePencil = createAsyncAction(\n  'pencil-single:pending',\n  'pencil-single:fulfilled',\n  'pencil-single:rejected',\n)<PencilSingleRequest, PencilSingleResponse, undefined>()\n\nconst requestPencilList = createAsyncAction(\n  'pencil-list:pending',\n  'pencil-list:fulfilled',\n  'pencil-list:rejected',\n)<PencilsListRequest, PencilListResponse, undefined>()\n\nexport const pencilActions = { requestPencilList, requestSinglePencil }\nexport type PencilActions = ActionType<typeof pencilActions>\n\nexport default createReducer<PencilAppStore, PencilActions>(initialState)\n  .handleAction([requestPencilList.request, requestSinglePencil.request], state => ({\n    requestStatus: getRequestStatus().pending,\n    cache: state.cache,\n    normalized: state.normalized,\n  }))\n  .handleAction([requestPencilList.failure, requestSinglePencil.failure], state => ({\n    requestStatus: getRequestStatus().rejected,\n    cache: state.cache,\n    normalized: state.normalized,\n  }))\n  .handleAction(requestPencilList.success, (state, { payload }) => {\n    const { cache, normalized } = getCacheAndNormilizedFromList(payload)\n\n    return {\n      cache: { ...state.cache, ...cache },\n      normalized: { ...state.normalized, ...normalized },\n      requestStatus: getRequestStatus().fulfilled,\n    }\n  })\n  .handleAction(requestSinglePencil.success, (state, { payload: pencil }) => ({\n    normalized: { ...state.normalized, [pencil.id]: pencil },\n    requestStatus: getRequestStatus().fulfilled,\n    cache: state.cache,\n  }))\n","import { PencilQuery } from '../Pencil/Pencil.interface'\n\nexport const requestFirstPage = (query: PencilQuery): PencilQuery => ({ ...query, page: 1 })\n\nexport const checkFinishZone = (total: number, current: number) => {\n  const sensivity = total * 0.6\n  const thresholdReached = sensivity < current\n\n  return thresholdReached\n}\n\nexport const checkWindowScroll = () => {\n  const scrollBottomLine = window.pageYOffset + window.innerHeight\n\n  return checkFinishZone(document.body.clientHeight, scrollBottomLine)\n}\n","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { isUndefined } from 'util'\nimport { pencilActions } from './Pencil.actions'\nimport { Pencil, PencilAppStore, PencilProps, PencilQuery } from './Pencil.interface'\nimport {\n  getPencilsFromCacheByQuery,\n  mapRequestToCacheId,\n  mapRequestToCacheId as mapQueryToCacheId,\n} from './Pencil.utils'\nimport { AppStore } from '../../store'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { requestFirstPage } from '../Gallery/Gallery.utils'\n\nconst usePencilStore = () => useSelector<AppStore, PencilAppStore>(store => store.pencils)\n\nexport const usePecnilRequestStatus = () => usePencilStore().requestStatus\nexport const useNormalizedPencils = () => usePencilStore().normalized\nexport const usePencilCache = () => usePencilStore().cache\n\nexport const useCached = (userQuery?: PencilQuery) => {\n  const [currentFilter] = useFilter()\n  const cache = usePencilCache()\n\n  const filter = userQuery || currentFilter\n  const query = (filter?.page ?? 0) > 1 ? filter : requestFirstPage(filter)\n  const queryCacheId = mapQueryToCacheId({ query })\n  const cacheItem = cache[queryCacheId]\n\n  return cacheItem\n}\n\nexport const usePencil = ({ id, query, queries }: PencilProps) => {\n  const dispatch = useDispatch()\n  const requestStatus = usePecnilRequestStatus()\n  const cache = usePencilCache()\n  const normalized = useNormalizedPencils()\n  const pencil = id ? normalized[id] : undefined\n  const targetQueries = query ? [query] : queries ? queries : []\n  const pencils = targetQueries.reduce<Pencil[]>(\n    (acc, query) => [...acc, ...getPencilsFromCacheByQuery(query, cache, normalized)],\n    [],\n  )\n\n  useEffect(() => {\n    const isNotCached = (query: PencilQuery) => isUndefined(cache[mapRequestToCacheId({ query })])\n    if (id && !pencil) {\n      dispatch(pencilActions.requestSinglePencil.request({ id }))\n    } else if (query && isNotCached(query)) {\n      dispatch(pencilActions.requestPencilList.request({ query }))\n    } else if (queries) {\n      queries.filter(isNotCached).forEach(query => {\n        dispatch(pencilActions.requestPencilList.request({ query }))\n      })\n    }\n  }, [dispatch, id, query, queries, pencil, cache])\n\n  return { requestStatus, pencil, pencils }\n}\n","import { Location } from 'history'\nimport React, { useEffect, useRef } from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { useHistory } from 'react-router-dom'\nimport { useFilter } from './Filter.hooks'\nimport messages from './Filter.messages'\nimport { mapFilterToQueryString, mapQueryStringToFilter } from './Filter.utils'\nimport Globe from './Globe'\nimport { useTaxonomy } from '../Taxonomy/Taxonomy.hooks'\nimport { useCached } from '../Pencil/Pencil.hooks'\nimport { appMessages } from '../App/App.messages'\n\nconst Filter = () => {\n  const [filter, setFilter] = useFilter()\n  const { countries, pencilCount } = useTaxonomy()\n  const cached = useCached()\n  const history = useHistory()\n  const intl = useIntl()\n  const select = useRef<HTMLSelectElement>(null)\n\n  const isFiltered = Boolean(filter.country || filter.tag)\n  const pencilsInCountry = cached?.pages.pencils\n\n  useEffect(() => {\n    if (mapFilterToQueryString(filter) !== window.location.search) {\n      history.push(mapFilterToQueryString(filter))\n    }\n  }, [filter, history])\n\n  useEffect(() => {\n    const unlisten = history.listen(({ search }: Location, action) => {\n      if (action === 'POP') {\n        setFilter(mapQueryStringToFilter(search))\n      }\n    })\n\n    return unlisten\n  }, [filter, history, setFilter])\n\n  return (\n    <div className=\"Filter\">\n      <div className=\"Filter-control\">\n        <button\n          className=\"Filter-clear-button\"\n          onClick={() => {\n            select.current?.focus()\n            if (isFiltered) {\n              setFilter({ country: '' })\n            }\n          }}\n        >\n          <span className=\"Filter-Globe\">\n            <Globe animated={isFiltered} />\n          </span>\n          <FormattedMessage\n            {...messages.title}\n            values={{\n              pencils: (\n                <span className=\"Filter-span\">\n                  <FormattedMessage {...appMessages.pencil} values={{ count: pencilCount }} />\n                </span>\n              ),\n              countries: (\n                <span className=\"Filter-span\">\n                  <FormattedMessage\n                    {...appMessages.country}\n                    values={{ count: countries.length + 1 }}\n                  />\n                </span>\n              ),\n            }}\n          />\n        </button>\n      </div>\n      <div className=\"Filter-control\">\n        <select\n          ref={select}\n          className=\"Filter-select\"\n          value={filter.country}\n          onChange={e => setFilter({ country: e.target.value, tag: '' })}\n        >\n          <option key=\"empty-country\" value=\"\">\n            {intl.formatMessage(messages.all)}\n          </option>\n          {countries.map(country => {\n            const isCurrent = filter.country === country.name\n            const optionText =\n              isCurrent && pencilsInCountry\n                ? intl.formatMessage(messages.current, {\n                    country: country.name,\n                    pencils: intl.formatMessage(appMessages.pencil, {\n                      count: pencilsInCountry,\n                    }),\n                  })\n                : country.name\n\n            return (\n              <option key={country.name} value={country.name}>\n                {`${country.flag} ${optionText}`}\n              </option>\n            )\n          })}\n        </select>\n      </div>\n    </div>\n  )\n}\n\nexport default Filter\n","import classNames from 'classnames'\nimport React from 'react'\nimport { GridProps } from './Grid.interface'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { mapFilterToQueryString } from '../../Filter/Filter.utils'\n\nconst Grid = ({ pencils }: GridProps) => {\n  const [, setFilter] = useFilter()\n\n  return (\n    <div className=\"Grid\">\n      {pencils.map(pencil => {\n        const thumbSize = pencil.preview\n        const fullSize = pencil.photos[0]\n        const useSize = pencil.grid === 1 ? thumbSize : fullSize\n        const className = classNames('GridItem', {\n          size2: pencil.grid === 2,\n          size3: pencil.grid === 3,\n        })\n        const onClick = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n          e.preventDefault()\n          setFilter({ display: pencil.id })\n        }\n\n        return (\n          <a\n            href={mapFilterToQueryString({ display: pencil.id })}\n            onClick={onClick}\n            className={className}\n            key={pencil.id}\n            title={pencil.title}\n          >\n            <img srcSet={`${useSize}, ${fullSize} 2x`} alt={pencil.title} src={useSize} />\n          </a>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Grid\n","import { last, throttle } from 'lodash'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { checkWindowScroll, requestFirstPage } from './Gallery.utils'\nimport Grid from './Grid'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { useCached, usePencil } from '../Pencil/Pencil.hooks'\nimport { PencilQuery } from '../Pencil/Pencil.interface'\nimport { getNextPageNumberFromPages } from '../Pencil/Pencil.utils'\n\nconst Gallery = () => {\n  const [filter] = useFilter()\n  const [queries, setQueries] = useState<PencilQuery[]>([])\n  const { pencils } = usePencil({ queries })\n  const cached = useCached(last(queries))\n  const { country, tag } = filter\n  const page = getNextPageNumberFromPages(cached?.pages)\n\n  useEffect(() => {\n    setQueries([requestFirstPage({ country, tag })])\n  }, [country, tag])\n\n  const loadNextPage = useCallback(() => {\n    if (page) {\n      setQueries([...queries, { ...filter, page }])\n    }\n  }, [filter, queries, setQueries, page])\n\n  const onScroll = useCallback(\n    throttle(() => checkWindowScroll() && loadNextPage(), 100, { leading: false }),\n    [loadNextPage],\n  )\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll)\n\n    return () => {\n      window.removeEventListener('scroll', onScroll)\n    }\n  }, [onScroll])\n\n  return <Grid pencils={pencils} />\n}\n\nexport default Gallery\n","import React from 'react'\nimport Globe from '../Filter/Globe'\n\nconst Loader = () => (\n  <div className=\"Loader\">\n    <Globe animated />\n  </div>\n)\n\nexport default Loader\n","import { geoPath, GeoRawProjection } from 'd3-geo'\nimport { geoProjection } from 'd3-geo'\nimport { FeatureCollection, GeoJsonProperties, Geometry } from 'geojson'\nimport { feature } from 'topojson-client'\nimport { Topology } from 'topojson-specification'\nimport { TopologyItem } from './Map.interface.js'\nimport geography from './world.json'\n\n// TODO: how to get the type properly?\nconst topology: Topology = geography as any\nconst featureCollection = feature(topology, topology.objects.world) as FeatureCollection<\n  Geometry,\n  GeoJsonProperties\n>\n\nconst timesRaw: GeoRawProjection = (lambda, phi) => {\n  // https://github.com/d3/d3-geo-projection/blob/master/src/times.js\n  const { PI, sin, tan } = Math\n  const t = tan(phi / 2)\n  const quarterPi = PI / 4\n  const s = sin(quarterPi * t)\n\n  return [lambda * (0.74482 - 0.34588 * s * s), 1.70711 * t]\n}\n\nconst projection = () => geoProjection(timesRaw).translate([mapWidth / 2, mapHeight / 2 + 40])\n\nexport const mapWidth = 800\nexport const mapHeight = 400\nexport const topologies = featureCollection.features.map<TopologyItem>(geo => {\n  const pathD = geoPath().projection(projection())(geo)\n  if (pathD === null) {\n    throw new Error()\n  }\n\n  return { ...geo, pathD }\n})\n","import classNames from 'classnames'\nimport { isUndefined } from 'lodash'\nimport React from 'react'\nimport { mapHeight, mapWidth, topologies } from './Map.utils'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { getEmptyFilter } from '../Filter/Filter.utils'\nimport { useCached } from '../Pencil/Pencil.hooks'\nimport { useCountriesNormalizedBy } from '../Taxonomy/Taxonomy.hooks'\n\nconst Map = () => {\n  const [, setFilter] = useFilter()\n  const normalizedIds = useCountriesNormalizedBy('id')\n  const cached = useCached()\n  const geoIds = cached?.geoIds ?? []\n\n  return (\n    <div className=\"Map\">\n      <svg\n        width={mapWidth}\n        height={mapHeight}\n        viewBox={`0 0 ${mapWidth} ${mapHeight}`}\n        className=\"Map-block\"\n      >\n        {topologies.map(topology => {\n          const geoId = topology.id as string\n          const country = geoId ? normalizedIds[geoId]?.name : undefined\n          const hasPencil = !isUndefined(country)\n          const isSelected = geoIds.includes(geoId)\n          const className = classNames(\n            'Map-country',\n            hasPencil && 'Map-has-pencil',\n            isSelected && 'Map-selected',\n          )\n          const onClick = () => {\n            if (isSelected) {\n              setFilter(getEmptyFilter())\n            } else if (country) {\n              setFilter({ country, tag: '' })\n            }\n          }\n\n          return (\n            <path\n              data-testid={geoId}\n              key={geoId}\n              className={className}\n              d={topology.pathD}\n              onClick={onClick}\n            />\n          )\n        })}\n      </svg>\n    </div>\n  )\n}\n\nexport default Map\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: 'В коробке с карандашами',\n    id: 'PageTitle.title',\n  },\n\n  pencil: {\n    defaultMessage: '{flag} {title}, {country}',\n    id: 'PageTitle.pencil',\n  },\n\n  country: {\n    defaultMessage: '{flag} {country}. {pencils}',\n    id: 'PageTitle.country',\n  },\n})\n","import { useEffect } from 'react'\nimport { useIntl } from 'react-intl'\nimport messages from './PageTitle.messages'\nimport { appMessages } from '../App/App.messages'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { useCached, useNormalizedPencils } from '../Pencil/Pencil.hooks'\nimport { useCountriesNormalizedBy } from '../Taxonomy/Taxonomy.hooks'\n\nconst PageTitle = () => {\n  const [filter] = useFilter()\n  const cached = useCached()\n  const intl = useIntl()\n  const normalizedPencils = useNormalizedPencils()\n  const normalizedCoutries = useCountriesNormalizedBy('name')\n  const pencil = normalizedPencils[filter.display]\n  const flag = normalizedCoutries[filter.country]?.flag\n  const count = cached?.pages.pencils\n\n  useEffect(() => {\n    if (pencil && flag) {\n      const { title, country } = pencil\n      document.title = intl.formatMessage(messages.pencil, { title, country: country.name, flag })\n    } else if (filter.country && count) {\n      document.title = intl.formatMessage(messages.country, {\n        flag,\n        country: filter.country,\n        pencils: intl.formatMessage(appMessages.pencil, { count }),\n      })\n    } else {\n      document.title = intl.formatMessage(messages.title)\n    }\n  }, [intl, pencil, count, filter, flag])\n\n  return null\n}\n\nexport default PageTitle\n","import { useCallback } from 'react'\nimport { getFilterFromLink } from './Info.utils'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { getEmptyFilter } from '../../Filter/Filter.utils'\n\nexport const usePseudoClick = () => {\n  const [, setFilter] = useFilter()\n  const handlePseudoLink = useCallback(\n    (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      e.stopPropagation()\n      const targetElement = e.target as HTMLElement\n      if (targetElement.tagName === 'A') {\n        const link = targetElement.getAttribute('href')\n        if (link) {\n          const filterFromLink = getFilterFromLink(link)\n          if (filterFromLink) {\n            e.preventDefault()\n            setFilter({ ...getEmptyFilter(), ...filterFromLink })\n          }\n        }\n      }\n    },\n    [setFilter],\n  )\n\n  return handlePseudoLink\n}\n","import { isEmpty, pick } from 'lodash'\nimport qs from 'qs'\nimport { Filter } from './../../Filter/Filter.interface'\nimport { getEmptyFilter } from './../../Filter/Filter.utils'\nimport { Pencil } from '../../Pencil/Pencil.interface'\n\nexport const getFilterFromLink = (link: string): Filter | null => {\n  const queryPart = link.split('?')[1]\n  if (queryPart) {\n    const emptyFilter = getEmptyFilter()\n    const query = qs.parse(queryPart)\n    const filterKeys = Object.keys(emptyFilter) as Array<keyof Filter>\n    const keysFromQuery = pick<Filter, keyof Filter>(query, filterKeys)\n    if (!isEmpty(keysFromQuery)) {\n      return keysFromQuery\n    }\n  }\n\n  return null\n}\n\nexport const displayPencilLocation = ({ country, city }: Pick<Pencil, 'country' | 'city'>) =>\n  [country.name, city].filter(Boolean).join(', ')\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  photo: {\n    defaultMessage: '{count, number} фото',\n    id: 'Info.photo',\n  },\n})\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { usePseudoClick } from './Info.hooks'\nimport { InfoProps } from './Info.interface'\nimport messages from './Info.messages'\nimport { displayPencilLocation } from './Info.utils'\nimport { usePencilFlag } from '../../Taxonomy/Taxonomy.hooks'\n\nconst Info = ({ pencil }: InfoProps) => {\n  const flag = usePencilFlag(pencil)\n  const handlePseudoLink = usePseudoClick()\n  const location = displayPencilLocation(pencil)\n\n  return (\n    <div className=\"Info\">\n      <div className=\"Info-content\" onClick={handlePseudoLink}>\n        <h1>{pencil.title}</h1>\n\n        <h2>\n          {flag} {location}\n        </h2>\n\n        <article dangerouslySetInnerHTML={{ __html: pencil.content }} />\n\n        <p>\n          <FormattedMessage\n            tagName=\"b\"\n            {...messages.photo}\n            values={{ count: pencil.photos.length }}\n          />\n        </p>\n      </div>\n\n      {pencil.photos.map(src => (\n        <div key={src} className=\"Info-frame\">\n          <img className=\"Info-photo\" alt={pencil.title} src={src} />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Info\n","import React, { useEffect, useRef } from 'react'\nimport Info from './Info'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { usePencil } from '../Pencil/Pencil.hooks'\n\nconst PencilInfo = () => {\n  const [{ display }, setFilter] = useFilter()\n  const scroller = useRef<HTMLDivElement>(null)\n  const { pencil } = usePencil({ id: display })\n  const closePencilInfo = () => setFilter({ display: '' })\n\n  useEffect(() => {\n    if (display === '') {\n      document.body.style.overflow = 'initial'\n    } else {\n      document.body.style.overflow = 'hidden'\n\n      if (scroller.current) {\n        scroller.current.scrollTop = 0\n      }\n    }\n  }, [display, scroller])\n\n  return pencil ? (\n    <div className=\"PencilInfo-backdrop\" onClick={closePencilInfo} ref={scroller}>\n      <div className=\"PencilInfo-content\">\n        <Info pencil={pencil} />\n      </div>\n    </div>\n  ) : null\n}\n\nexport default PencilInfo\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: '🏷 {pencilCount} из {countryCount} в категории \"{tag}\"',\n    id: 'TagHeader.title',\n  },\n})\n","import React, { useCallback, useEffect } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport messages from './TagHeader.messages'\nimport { appMessages } from '../../App/App.messages'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { useCached, usePecnilRequestStatus } from '../../Pencil/Pencil.hooks'\nimport { useCountryFlags } from '../../Taxonomy/Taxonomy.hooks'\n\nconst TagHeader = () => {\n  const [{ tag }, setFilter] = useFilter()\n  const cache = useCached()\n  const requestStatus = usePecnilRequestStatus()\n  const dropTag = useCallback(() => setFilter({ tag: '' }), [setFilter])\n  const countryFlags = useCountryFlags(cache?.geoIds ?? [])\n  const pencilCount = cache?.pages.pencils\n  const countryCount = cache?.geoIds.length\n\n  useEffect(() => {\n    if (requestStatus.rejected) {\n      dropTag()\n    }\n  }, [dropTag, requestStatus])\n\n  return tag && pencilCount && countryCount ? (\n    <button onClick={dropTag} className=\"TagHeader-drop\" title={countryFlags.join(' ')}>\n      <FormattedMessage\n        {...messages.title}\n        values={{\n          tag,\n          pencilCount: <FormattedMessage {...appMessages.pencil} values={{ count: pencilCount }} />,\n          countryCount: (\n            <FormattedMessage {...appMessages.country} values={{ count: countryCount }} />\n          ),\n        }}\n      />\n    </button>\n  ) : null\n}\n\nexport default TagHeader\n","import React from 'react'\nimport { FormattedMessage, IntlProvider } from 'react-intl'\nimport { BrowserRouter } from 'react-router-dom'\nimport { appMessages } from './App.messages'\nimport Filter from '../Filter'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport Gallery from '../Gallery'\nimport Loader from '../Loader'\nimport Map from '../Map'\nimport PageTitle from '../PageTitle'\nimport PencilInfo from '../PencilInfo'\nimport TagHeader from '../PencilInfo/TagHeader'\nimport { useTaxonomyRequest } from '../Taxonomy/Taxonomy.hooks'\n\nconst App = () => {\n  const [{ tag }] = useFilter()\n  const { pending, fulfilled, rejected } = useTaxonomyRequest()\n\n  return (\n    <IntlProvider locale=\"ru\" defaultLocale=\"ru\">\n      {fulfilled ? (\n        <div className=\"App\">\n          <BrowserRouter>\n            <PageTitle />\n            <PencilInfo />\n            <nav className=\"App-block\">\n              <Filter />\n            </nav>\n            {tag ? (\n              <section className=\"App-block\">\n                <TagHeader />{' '}\n              </section>\n            ) : null}\n            <section className=\"App-block\">\n              <Map />\n            </section>\n            <main className=\"App-block\">\n              <Gallery />\n            </main>\n          </BrowserRouter>\n        </div>\n      ) : (\n        <div className=\"App-loading\">\n          {pending && <Loader />}\n          {rejected && (\n            <button onClick={() => window.location.reload()}>\n              <FormattedMessage {...appMessages.error} />\n            </button>\n          )}\n        </div>\n      )}\n    </IntlProvider>\n  )\n}\n\nexport default App\n","const apiUrl = process.env.REACT_APP_API_URL\nif (!apiUrl) {\n  throw new Error('no api url')\n}\n\nconst appConfig = {\n  apiUrl,\n}\n\nexport default appConfig\n","import appConfig from './appConfig'\n\nconst apiRequest = <T>(path: string): Promise<T> =>\n  fetch(appConfig.apiUrl + path)\n    .then(response => response.json())\n    .catch(error => {\n      console.error('api', path, error)\n      throw error\n    })\n\nexport default apiRequest\n","import {\n  PencilListResponse,\n  PencilSingleRequest,\n  PencilSingleResponse,\n  PencilsListRequest,\n} from './Pencil.interface'\nimport {\n  mapPencilListQueryRequestUrl,\n  mapPencilsingleQueryRequestUrl,\n  mapRequestToCacheId,\n} from './Pencil.utils'\nimport apiRequest from '../../api'\n\nexport const apiRequestSinglePencil = (request: PencilSingleRequest) =>\n  apiRequest<PencilSingleResponse>(mapPencilsingleQueryRequestUrl(request))\n\nexport const apiRequestPencilList = (request: PencilsListRequest) =>\n  apiRequest<PencilListResponse>(mapPencilListQueryRequestUrl(request.query)).then(data => {\n    data.cacheId = mapRequestToCacheId(request)\n\n    return data\n  })\n","import { uniqBy } from 'lodash'\nimport { Epic, ofType } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { bufferTime, catchError, filter, map, mergeAll, mergeMap } from 'rxjs/operators'\nimport { ActionType, getType, isActionOf } from 'typesafe-actions'\nimport { PencilActions, pencilActions } from './Pencil.actions'\nimport { apiRequestPencilList, apiRequestSinglePencil } from './Pencil.api'\nimport { mapRequestToCacheId } from './Pencil.utils'\n\ntype PencilRequestActions = ActionType<\n  typeof pencilActions.requestSinglePencil.request | typeof pencilActions.requestPencilList.request\n>\n\nconst pencilEpic: Epic<PencilActions> = action$ =>\n  action$.pipe(\n    ofType<PencilActions, PencilRequestActions>(\n      getType(pencilActions.requestSinglePencil.request),\n      getType(pencilActions.requestPencilList.request),\n    ),\n    bufferTime(66),\n    filter(actions => actions.length > 0),\n    mergeMap(actions =>\n      from(\n        uniqBy(actions, ({ payload }) => mapRequestToCacheId(payload)).map(action => {\n          if (isActionOf(pencilActions.requestSinglePencil.request)(action)) {\n            return from(apiRequestSinglePencil(action.payload)).pipe(\n              map(pencilActions.requestSinglePencil.success),\n              catchError(() => of(pencilActions.requestSinglePencil.failure())),\n            )\n          } else if (isActionOf(pencilActions.requestPencilList.request)(action)) {\n            return from(apiRequestPencilList(action.payload)).pipe(\n              map(pencilActions.requestPencilList.success),\n              catchError(() => of(pencilActions.requestPencilList.failure())),\n            )\n          }\n          throw new Error()\n        }),\n      ).pipe(mergeAll()),\n    ),\n  )\n\nexport default pencilEpic\n","import { Epic, ofType } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { catchError, map, mergeMap } from 'rxjs/operators'\nimport { getType } from 'typesafe-actions'\nimport { taxonomyActions, TaxonomyActions } from './Taxonomy.actions'\nimport { apiRequestTaxonomy } from './Taxonomy.api'\n\nconst taxonomyEpic: Epic<TaxonomyActions> = action$ =>\n  action$.pipe(\n    ofType(getType(taxonomyActions.requestTaxonomy.request)),\n    mergeMap(() =>\n      from(apiRequestTaxonomy()).pipe(\n        map(taxonomyActions.requestTaxonomy.success),\n        catchError(() => of(taxonomyActions.requestTaxonomy.failure())),\n      ),\n    ),\n  )\n\nexport default taxonomyEpic\n","import { TaxonomyResponse } from './Taxonomy.interface'\nimport apiRequest from '../../api'\n\nexport const apiRequestTaxonomy = () => apiRequest<TaxonomyResponse>('/taxonomy/')\n","import { combineEpics } from 'redux-observable'\nimport { pencilEpic } from './components/Pencil'\nimport { taxonomyEpic } from './components/Taxonomy'\n\nconst rootEpic = combineEpics(taxonomyEpic, pencilEpic)\n\nexport default rootEpic\n","import { combineReducers } from 'redux'\nimport { filterReducer as filter } from './components/Filter'\nimport { pencilReducer as pencils } from './components/Pencil'\nimport { taxonomyReducer as taxonomy } from './components/Taxonomy'\n\nconst rootReducer = combineReducers({ taxonomy, pencils, filter })\n\nexport default rootReducer\n","import { applyMiddleware, createStore, Store } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { createEpicMiddleware } from 'redux-observable'\nimport rootEpic from './rootEpic'\nimport rootReducer from './rootReducer'\n\nconst epicMiddleware = createEpicMiddleware()\nconst store: Store<AppStore> = createStore(\n  rootReducer,\n  {},\n  composeWithDevTools(applyMiddleware(epicMiddleware)),\n)\nepicMiddleware.run(rootEpic)\n\nexport type AppStore = ReturnType<typeof rootReducer>\n\nexport const createTestStore = (initialState?: RecursivePartial<AppStore>) =>\n  createStore(rootReducer, initialState as AppStore)\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport './index.css'\nimport store from './store'\n\nif (!Intl.PluralRules) {\n  require('intl-pluralrules')\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}