{"version":3,"sources":["components/Filter/Filter.utils.ts","components/Filter/Filter.actions.ts","components/Pencil/Pencil.utils.ts","components/Pencil/Pencil.actions.ts","components/Gallery/Gallery.utils.ts","components/Pencil/Pencil.hooks.ts","components/Taxonomy/Taxonomy.actions.ts","components/Taxonomy/Taxonomy.hooks.ts","components/Filter/Filter.hooks.ts","components/Filter/Filter.messages.ts","components/Filter/Globe/Globe.tsx","components/App/App.messages.ts","components/PencilInfo/TagHeader/TagHeader.messages.ts","components/PencilInfo/TagHeader/TagHeader.tsx","components/Filter/Filter.tsx","components/Gallery/Grid/Grid.tsx","components/Gallery/Grid/Grid.utils.ts","components/Gallery/Gallery.tsx","components/Map/Map.utils.ts","components/Map/Map.tsx","components/PageTitle/PageTitle.messages.ts","components/PageTitle/PageTitle.tsx","components/PencilInfo/Info/Info.hooks.ts","components/PencilInfo/Info/Info.utils.ts","components/PencilInfo/Info/Info.messages.ts","components/PencilInfo/Info/Info.tsx","components/PencilInfo/PencilInfo.tsx","components/Taxonomy/Taxonomy.messages.ts","components/Loader/Loader.tsx","components/Taxonomy/Taxonomy.tsx","components/App/App.tsx","appConfig.ts","api.ts","components/Pencil/Pencil.api.ts","components/Pencil/Pencil.epic.ts","rootEpic.ts","components/Taxonomy/Taxonomy.epic.ts","components/Taxonomy/Taxonomy.api.ts","rootReducer.ts","store.ts","index.tsx"],"names":["mapFilterToQueryString","filter","qs","stringify","pickBy","Boolean","addQueryPrefix","mapQueryStringToFilter","querystring","window","location","search","input","parse","ignoreQueryPrefix","emptyFilter","country","display","tag","filterKeys","Object","keys","pick","initialState","set","createAction","filterActions","filterReducer","createReducer","handleAction","state","payload","mapRequestToCacheId","request","cahceIdParts","id","query","page","push","join","requestSinglePencil","createAsyncAction","requestPencilList","pencilActions","pencilReducer","cache","data","success","produce","draft","merge","cacheId","pages","pencils","geo","ids","map","mapKeys","item","mapPancilsResponseToStore","requestFirstPage","usePencilStore","useSelector","store","useNormalizedPencils","usePencilCache","userQuery","useFilter","currentFilter","mapQueryToCacheId","usePencil","queries","dispatch","useDispatch","normalized","pencil","undefined","targetQueries","flatMap","currentPage","totalPages","records","Error","getPencilsFromCacheByQuery","useEffect","isNotCached","isUndefined","forEach","requestTaxonomy","taxonomyActions","taxonomyReducer","pending","failure","pencilCount","countries","tags","statistic","items","useTaxonomy","taxonomy","useCountries","useCountryRecord","dispatchFilter","useCallback","newFilter","isMatch","updateFilter","update","setFilter","isFiltered","defineMessages","title","defaultMessage","option","all","Globe","animated","isAnimated","frames","useState","index","setIndex","spin","setTimeout","length","clearTimeout","appMessages","TagHeader","countryCount","onClick","className","messages","values","count","Filter","intl","useIntl","history","useHistory","listen","action","useFilerQueryString","htmlFor","value","onChange","e","target","key","formatMessage","name","flag","Grid","size","grid","thumbSrc","preview","fullSrc","photos","classNames","href","preventDefault","alt","loading","src","srcSet","getGridImageSources","Gallery","setQueries","cached","last","document","documentElement","scrollTop","loadNextPage","onScroll","throttle","scrollBottomLine","pageYOffset","innerHeight","body","clientHeight","checkWindowScroll","leading","trailing","addEventListener","removeEventListener","projection","geoProjection","lambda","phi","PI","Math","sin","t","tan","s","translate","mapWidth","mapHeight","topology","geography","topologies","feature","objects","world","features","pathD","geoPath","Map","countryRecord","filterCountries","isEmpty","geoId","useFilterCountries","activeCountries","width","height","viewBox","hasPencil","isSelected","data-testid","d","PageTitle","normalizedPencils","counry","countryFlag","usePseudoClick","stopPropagation","targetElement","tagName","link","getAttribute","filterFromLink","parsed","getFilterFromLink","photo","unknown","Info","handlePseudoLink","city","dangerouslySetInnerHTML","__html","content","PencilInfo","scroller","useRef","style","overflow","current","ref","error","Loader","Taxonomy","children","useTaxonomyRequest","reload","App","locale","defaultLocale","apiUrl","process","appConfig","apiRequest","path","fetch","then","response","ok","json","String","status","catch","console","apiRequestPencilList","pathParts","encodeURIComponent","toLowerCase","replace","mapPencilListQueryRequestUrl","pencilEpic","combineEpics","action$","pipe","isActionOf","concatMap","from","mapPencilsingleQueryRequestUrl","catchError","of","rootEpic","mergeMap","rootReducer","combineReducers","epicMiddleware","createEpicMiddleware","createStore","composeWithDevTools","applyMiddleware","run","Intl","PluralRules","require","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2e5e9d2f.chunk.js","sourcesContent":["import pick from 'lodash/pick'\nimport pickBy from 'lodash/pickBy'\nimport qs from 'qs'\nimport { Filter } from './Filter.interface'\n\nexport const getEmptyFilter = (): Filter => ({\n  country: '',\n  display: '',\n  tag: '',\n})\n\nexport const mapFilterToQueryString = (filter: Partial<Filter>) =>\n  qs.stringify(pickBy(filter, Boolean), { addQueryPrefix: true })\n\nexport const mapQueryStringToFilter = (querystring = window.location.search): Filter => {\n  const input = qs.parse(querystring, { ignoreQueryPrefix: true })\n  const emptyFilter = getEmptyFilter()\n  const filterKeys = Object.keys(emptyFilter)\n  const filter = pick(input, filterKeys)\n\n  return { ...emptyFilter, ...filter }\n}\n","import { ActionType, createAction, createReducer } from 'typesafe-actions'\nimport { Filter, FilterAppStore } from './Filter.interface'\nimport { mapQueryStringToFilter } from './Filter.utils'\n\nconst initialState: FilterAppStore = mapQueryStringToFilter()\nconst set = createAction('Filter:set')<Filter>()\ntype Actions = ActionType<typeof filterActions>\n\nexport const filterActions = { set }\n\nexport const filterReducer = createReducer<FilterAppStore, Actions>(initialState).handleAction(\n  set,\n  (state, { payload }) => payload,\n)\n","import mapKeys from 'lodash/mapKeys'\nimport {\n  Pencil,\n  PencilCache,\n  PencilCacheItem,\n  PencilListResponse,\n  PencilPages,\n  PencilQuery,\n  PencilRequest,\n  PencilSingleRequest,\n  PencilsNormalized,\n  PencilAppStore,\n} from './Pencil.interface'\n\nconst getEmptyPencilCacheItem = (): PencilCacheItem => ({\n  ids: [],\n  geo: [],\n  pages: {\n    currentPage: 0,\n    totalPages: 0,\n    records: 0,\n    pencils: 0,\n  },\n})\n\nexport const mapPencilsingleQueryRequestUrl = ({ id }: PencilSingleRequest): string =>\n  `/pencil/${id}/`\n\nexport const mapPencilListQueryRequestUrl = ({ page, tag, country }: PencilQuery): string => {\n  const pathParts: string[] = []\n  const sanitize = (input: string) => encodeURIComponent(input.toLowerCase().replace(/\\s/g, '-'))\n\n  if (tag && country) {\n    throw new Error('no tag and country at the same time')\n  }\n\n  if (tag) {\n    pathParts.push(`tags/${sanitize(tag)}`)\n  }\n  if (country) {\n    pathParts.push(`geo/${country}`)\n  }\n  if (page && page !== 1) {\n    pathParts.push(`page/${page}`)\n  }\n\n  return `/${pathParts.join('/')}`\n}\n\nexport const mapRequestToCacheId = (request: PencilRequest): string => {\n  const cahceIdParts = ['']\n  if (request.id) {\n    return `id:${request.id}`\n  } else if (request.query) {\n    const { page, tag, country } = request.query\n    if (page) {\n      cahceIdParts.push(`p:${page}`)\n    }\n    if (tag) {\n      cahceIdParts.push(`t:${tag}`)\n    }\n    if (country) {\n      cahceIdParts.push(`c:${country}`)\n    }\n  }\n\n  return cahceIdParts.join('/')\n}\n\nexport const mapPancilsResponseToStore = ({\n  cacheId,\n  pages,\n  data: pencils,\n  geo,\n}: PencilListResponse): PencilAppStore => {\n  const ids = pencils.map(({ id }) => id)\n  const data = mapKeys(pencils, item => item.id)\n\n  return { data, cache: { [cacheId]: { ids, pages, geo } } }\n}\n\nexport const getNextPageNumberFromPages = (pages?: PencilPages) => {\n  if (pages) {\n    if (pages.currentPage < pages.totalPages) {\n      return pages.currentPage + 1\n    }\n  }\n\n  return null\n}\n\nexport const getPencilsFromCacheByQuery = (\n  query: PencilQuery,\n  cache: Partial<PencilCache>,\n  normalized: PencilsNormalized,\n): Pencil[] => {\n  const pencilCache: PencilCacheItem =\n    cache[mapRequestToCacheId({ query })] || getEmptyPencilCacheItem()\n  const pencils = pencilCache.ids.map(id => {\n    const data = normalized[id]\n    if (!data) {\n      throw new Error(`no cache for id ${id}`)\n    }\n\n    return data\n  })\n\n  return pencils\n}\n","import { ActionType, createAsyncAction, createReducer } from 'typesafe-actions'\nimport produce from 'immer'\nimport merge from 'lodash/merge'\nimport {\n  PencilAppStore,\n  PencilListResponse,\n  PencilSingleRequest,\n  PencilSingleResponse,\n  PencilsListRequest,\n} from './Pencil.interface'\nimport { mapPancilsResponseToStore } from './Pencil.utils'\n\nconst getInitialPencilState = (): PencilAppStore => ({\n  cache: {},\n  data: {},\n})\n\nconst requestSinglePencil = createAsyncAction(\n  'Pencil/single:pending',\n  'Pencil/single:success',\n  'Pencil/single:failure',\n)<PencilSingleRequest, PencilSingleResponse, undefined>()\n\nconst requestPencilList = createAsyncAction(\n  'Pencil/list:pending',\n  'Pencil/list:success',\n  'Pencil/list:failure',\n)<PencilsListRequest, PencilListResponse, undefined>()\n\nexport const pencilActions = { requestPencilList, requestSinglePencil }\nexport type PencilActions = ActionType<typeof pencilActions>\n\nexport const pencilReducer = createReducer<PencilAppStore, PencilActions>(getInitialPencilState())\n  .handleAction(requestPencilList.success, (state, { payload }) =>\n    produce(state, draft => {\n      merge(draft, mapPancilsResponseToStore(payload))\n    }),\n  )\n  .handleAction(requestSinglePencil.success, (state, { payload }) =>\n    produce(state, draft => {\n      draft.data[payload.id] = payload\n    }),\n  )\n","import { PencilQuery } from '../Pencil/Pencil.interface'\n\nexport const requestFirstPage = (query: PencilQuery): PencilQuery => ({ ...query, page: 1 })\n\nexport const checkFinishZone = (total: number, current: number) => {\n  const sensivity = total * 0.6\n  const thresholdReached = sensivity < current\n\n  return thresholdReached\n}\n\nexport const checkWindowScroll = () => {\n  const scrollBottomLine = window.pageYOffset + window.innerHeight\n\n  return checkFinishZone(document.body.clientHeight, scrollBottomLine)\n}\n","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport flatMap from 'lodash/flatMap'\nimport { isUndefined } from 'util'\nimport { pencilActions } from './Pencil.actions'\nimport { PencilAppStore, PencilProps, PencilQuery } from './Pencil.interface'\nimport {\n  getPencilsFromCacheByQuery,\n  mapRequestToCacheId,\n  mapRequestToCacheId as mapQueryToCacheId,\n} from './Pencil.utils'\nimport { AppStore } from '../../store'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { requestFirstPage } from '../Gallery/Gallery.utils'\n\nconst usePencilStore = () => useSelector<AppStore, PencilAppStore>(store => store.pencils)\n\nexport const useNormalizedPencils = () => usePencilStore().data\n\nexport const usePencilCache = (userQuery?: PencilQuery) => {\n  const [currentFilter] = useFilter()\n  const { cache } = usePencilStore()\n\n  const filter = userQuery || currentFilter\n  const query = (filter?.page ?? 0) > 1 ? filter : requestFirstPage(filter)\n  const queryCacheId = mapQueryToCacheId({ query })\n  const cacheItem = cache[queryCacheId]\n\n  return cacheItem\n}\n\nexport const usePencil = ({ id, query, queries }: PencilProps) => {\n  const dispatch = useDispatch()\n  const { cache } = usePencilStore()\n  const normalized = useNormalizedPencils()\n  const pencil = id ? normalized[id] : undefined\n  const targetQueries = query ? [query] : queries ? queries : []\n  const pencils = flatMap(targetQueries, query =>\n    getPencilsFromCacheByQuery(query, cache, normalized),\n  )\n\n  useEffect(() => {\n    const isNotCached = (query: PencilQuery) => isUndefined(cache[mapRequestToCacheId({ query })])\n    if (id && !pencil) {\n      dispatch(pencilActions.requestSinglePencil.request({ id }))\n    } else if (query && isNotCached(query)) {\n      dispatch(pencilActions.requestPencilList.request({ query }))\n    } else if (queries) {\n      queries.filter(isNotCached).forEach(query => {\n        dispatch(pencilActions.requestPencilList.request({ query }))\n      })\n    }\n  }, [dispatch, id, query, queries, pencil, cache])\n\n  return { pencil, pencils }\n}\n","import { ActionType, createAsyncAction, createReducer } from 'typesafe-actions'\nimport produce from 'immer'\nimport { TaxonomyAppStore as StoreTaxonomy, TaxonomyResponse } from './Taxonomy.interface'\n\nconst requestTaxonomy = createAsyncAction(\n  'Taxonomy:pending',\n  'Taxonomy:success',\n  'Taxonomy:failure',\n)<undefined, TaxonomyResponse, undefined>()\n\nconst getInitialTaxonomyState = (): StoreTaxonomy => ({\n  pending: true,\n  failure: false,\n  pencilCount: 0,\n  countries: [],\n  tags: [],\n  statistic: { tags: 0, countries: 0, items: 0, pencils: 0 },\n})\n\nexport const taxonomyActions = { requestTaxonomy }\nexport type TaxonomyActions = ActionType<typeof taxonomyActions>\n\nexport const taxonomyReducer = createReducer<StoreTaxonomy, TaxonomyActions>(\n  getInitialTaxonomyState(),\n)\n  .handleAction(requestTaxonomy.success, (state, { payload }) => ({\n    failure: false,\n    pending: false,\n    countries: payload.countries,\n    pencilCount: payload.statistic.pencils,\n    statistic: payload.statistic,\n    tags: payload.tags,\n  }))\n  .handleAction(requestTaxonomy.failure, () =>\n    produce(getInitialTaxonomyState(), draft => {\n      draft.pending = false\n      draft.failure = true\n    }),\n  )\n","import { useSelector, useDispatch } from 'react-redux'\nimport { useEffect } from 'react'\nimport mapKeys from 'lodash/mapKeys'\nimport { TaxonomyAppStore } from './Taxonomy.interface'\nimport { taxonomyActions } from './Taxonomy.actions'\nimport { AppStore } from '../../store'\n\nexport const useTaxonomy = () => useSelector<AppStore, TaxonomyAppStore>(store => store.taxonomy)\n\nexport const useTaxonomyRequest = () => {\n  const dispatch = useDispatch()\n  const { pending, failure } = useTaxonomy()\n\n  useEffect(() => {\n    dispatch(taxonomyActions.requestTaxonomy.request())\n  }, [dispatch])\n\n  return { pending, failure }\n}\n\nexport const useCountries = () => {\n  const { countries } = useTaxonomy()\n\n  return countries\n}\n\nexport const useCountryRecord = () => {\n  const countries = useCountries()\n\n  return mapKeys(countries, ({ geo }) => geo)\n}\n","import isMatch from 'lodash/isMatch'\nimport { useCallback, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport isEmpty from 'lodash/isEmpty'\nimport { AppStore } from './../../store'\nimport { filterActions } from './Filter.actions'\nimport { Filter } from './Filter.interface'\nimport { mapQueryStringToFilter, mapFilterToQueryString, getEmptyFilter } from './Filter.utils'\nimport { usePencilCache } from '../Pencil/Pencil.hooks'\nimport { useCountryRecord } from '../Taxonomy/Taxonomy.hooks'\n\nexport const useFilter = () => {\n  const filter = useSelector<AppStore, Filter>(store => store.filter)\n  const dispatch = useDispatch()\n\n  const dispatchFilter = useCallback(\n    (newFilter: Filter) => {\n      if (!isMatch(filter, newFilter)) {\n        dispatch(filterActions.set(newFilter))\n      }\n    },\n    [filter, dispatch],\n  )\n\n  const updateFilter = useCallback(\n    (update: Partial<Filter>) => dispatchFilter({ ...filter, ...update }),\n    [dispatchFilter, filter],\n  )\n\n  const setFilter = useCallback(\n    (update: Partial<Filter>) => dispatchFilter({ ...getEmptyFilter(), ...update }),\n    [dispatchFilter],\n  )\n\n  const isFiltered = Boolean(filter.country || filter.tag)\n\n  return [\n    filter,\n    {\n      isFiltered,\n      setFilter,\n      updateFilter,\n    },\n  ] as const\n}\n\nexport const useFilerQueryString = () => {\n  const history = useHistory()\n  const [filter, { updateFilter }] = useFilter()\n\n  useEffect(() => {\n    history.push({ search: mapFilterToQueryString(filter) })\n  }, [filter, history])\n\n  useEffect(() => {\n    const unlisten = history.listen(({ search }, action) => {\n      if (action === 'POP') {\n        updateFilter(mapQueryStringToFilter(search))\n      }\n    })\n\n    return unlisten\n  }, [filter, history, updateFilter])\n}\n\nexport const useFilterCountries = () => {\n  const cache = usePencilCache()\n  const countries = useCountryRecord()\n\n  return isEmpty(countries) ? [] : (cache?.geo || []).map(geoId => countries[geoId])\n}\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: `{pencils} из {countries}`,\n    id: 'Filter.title',\n  },\n\n  option: {\n    defaultMessage: `{flag}{country} {count}`,\n    id: 'Filter.option',\n  },\n\n  all: {\n    defaultMessage: 'Все страны',\n    id: 'Filter.all',\n  },\n})\n","import React, { useEffect, useState } from 'react'\nimport { GlobeProps } from './Globe.interface'\n\nconst Globe = ({ animated }: GlobeProps) => {\n  const isAnimated = Boolean(animated)\n  const frames = ['🌍', '🌏', '🌎']\n  const speed = 400\n  const [index, setIndex] = useState(0)\n  useEffect(() => {\n    if (isAnimated) {\n      const spin = setTimeout(() => {\n        const nextIndex = index + 1 === frames.length ? 0 : index + 1\n        setIndex(nextIndex)\n      }, speed)\n\n      return () => {\n        clearTimeout(spin)\n      }\n    }\n  }, [isAnimated, speed, index, setIndex, frames])\n\n  return <>{frames[index]}</>\n}\n\nexport default Globe\n","import { defineMessages } from 'react-intl'\n\nexport const appMessages = defineMessages({\n  pencil: {\n    defaultMessage: `{count, plural,\n      one {# карандаш}\n      few {# карандаша}\n      many {# карандашей}\n    }`,\n    id: 'App.pencil',\n  },\n\n  country: {\n    defaultMessage: `{count, plural,\n      one {# страны}\n      few {# стран}\n      many {# стран}\n    }`,\n    id: 'App.country',\n  },\n})\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: '🏷 {pencilCount} из {countryCount} в категории \"{tag}\"',\n    id: 'TagHeader.title',\n  },\n})\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport messages from './TagHeader.messages'\nimport { appMessages } from '../../App/App.messages'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { usePencilCache } from '../../Pencil/Pencil.hooks'\n\nconst TagHeader = () => {\n  const [{ tag }, { updateFilter }] = useFilter()\n  const cache = usePencilCache()\n\n  if (tag && cache) {\n    const pencilCount = cache.pages.pencils\n    const countryCount = cache.geo.length\n\n    return (\n      <button onClick={() => updateFilter({ tag: '' })} className=\"TagHeader-drop\">\n        <FormattedMessage\n          {...messages.title}\n          values={{\n            tag,\n            pencilCount: (\n              <FormattedMessage {...appMessages.pencil} values={{ count: pencilCount }} />\n            ),\n            countryCount: (\n              <FormattedMessage {...appMessages.country} values={{ count: countryCount }} />\n            ),\n          }}\n        />\n      </button>\n    )\n  }\n\n  return null\n}\n\nexport default TagHeader\n","import React from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { useFilter, useFilerQueryString } from './Filter.hooks'\nimport messages from './Filter.messages'\nimport Globe from './Globe'\nimport { useTaxonomy, useCountries } from '../Taxonomy/Taxonomy.hooks'\nimport { appMessages } from '../App/App.messages'\nimport TagHeader from '../PencilInfo/TagHeader'\n\nconst Filter = () => {\n  const intl = useIntl()\n  const [filter, { updateFilter, setFilter, isFiltered }] = useFilter()\n  const { statistic } = useTaxonomy()\n  const countries = useCountries()\n\n  useFilerQueryString()\n\n  const htmlFor = 'country-filter'\n\n  return (\n    <div className=\"Filter\">\n      <div className=\"Filter-control\">\n        <label\n          htmlFor={htmlFor}\n          className=\"Filter-label\"\n          onClick={() => isFiltered && updateFilter({ country: '' })}\n        >\n          <span className=\"Filter-Globe\">\n            <Globe animated={isFiltered} />\n          </span>\n          <FormattedMessage\n            {...messages.title}\n            values={{\n              pencils: (\n                <span className=\"Filter-span\">\n                  <FormattedMessage {...appMessages.pencil} values={{ count: statistic.pencils }} />\n                </span>\n              ),\n              countries: (\n                <span className=\"Filter-span\">\n                  <FormattedMessage\n                    {...appMessages.country}\n                    values={{ count: statistic.countries }}\n                  />\n                </span>\n              ),\n            }}\n          />\n        </label>\n      </div>\n      <div className=\"Filter-control\">\n        <select\n          id={htmlFor}\n          className=\"Filter-select\"\n          value={filter.country}\n          onChange={e => setFilter({ country: e.target.value })}\n        >\n          <option key=\"empty-country\" value=\"\">\n            {intl.formatMessage(messages.all)}\n          </option>\n\n          {countries.map(country => (\n            <option key={country.name} value={country.geo}>\n              {intl.formatMessage(messages.option, {\n                flag: country.flag,\n                country: country.name,\n                count: country.pencils,\n              })}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {filter.tag ? (\n        <div className=\"Filter-control\">\n          <TagHeader />\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nexport default Filter\n","import classNames from 'classnames'\nimport React from 'react'\nimport { GridProps } from './Grid.interface'\nimport { getGridImageSources } from './Grid.utils'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { mapFilterToQueryString } from '../../Filter/Filter.utils'\n\nconst Grid = ({ pencils }: GridProps) => {\n  const [, { updateFilter }] = useFilter()\n\n  return (\n    <div className=\"Grid\">\n      {pencils.map(pencil => {\n        const size = pencil.grid\n        const thumbSrc = pencil.preview\n        const fullSrc = pencil.photos[0]\n        const className = classNames('GridItem', size === 2 && 'size2', size === 3 && 'size3')\n        const onClick = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n          e.preventDefault()\n          updateFilter({ display: pencil.id })\n        }\n\n        return (\n          <a\n            href={mapFilterToQueryString({ display: pencil.id })}\n            onClick={onClick}\n            className={className}\n            key={pencil.id}\n            title={pencil.title}\n          >\n            <img\n              alt={pencil.title}\n              loading=\"lazy\"\n              {...getGridImageSources(size, fullSrc, thumbSrc)}\n            />\n          </a>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Grid\n","import { ImgHTMLAttributes } from 'react'\nimport { PencilGridSize } from '../../Pencil/Pencil.interface'\n\nexport const getGridImageSources = (\n  size: PencilGridSize,\n  fullSrc: string,\n  thumbSrc: string,\n): ImgHTMLAttributes<{}> => {\n  switch (size) {\n    case 3:\n      return { src: fullSrc }\n\n    case 2:\n      return { src: thumbSrc, srcSet: `${thumbSrc}, ${fullSrc} 2x` }\n\n    default:\n      return { src: thumbSrc }\n  }\n}\n","import last from 'lodash/last'\nimport throttle from 'lodash/throttle'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { checkWindowScroll, requestFirstPage } from './Gallery.utils'\nimport Grid from './Grid'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { usePencilCache, usePencil } from '../Pencil/Pencil.hooks'\nimport { PencilQuery } from '../Pencil/Pencil.interface'\nimport { getNextPageNumberFromPages } from '../Pencil/Pencil.utils'\n\nconst Gallery = () => {\n  const [filter] = useFilter()\n  const [queries, setQueries] = useState<PencilQuery[]>([])\n  const { pencils } = usePencil({ queries })\n  const cached = usePencilCache(last(queries))\n  const { country, tag } = filter\n  const page = getNextPageNumberFromPages(cached?.pages)\n\n  useEffect(() => {\n    setQueries([requestFirstPage({ country, tag })])\n    document.documentElement.scrollTop = 0\n  }, [country, tag])\n\n  const loadNextPage = useCallback(() => {\n    if (page) {\n      setQueries([...queries, { ...filter, page }])\n    }\n  }, [filter, queries, setQueries, page])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const onScroll = useCallback(\n    throttle(\n      () => {\n        if (page && checkWindowScroll()) {\n          loadNextPage()\n        }\n      },\n      100,\n      { leading: false, trailing: false },\n    ),\n    [loadNextPage],\n  )\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll)\n\n    return () => {\n      window.removeEventListener('scroll', onScroll)\n    }\n  }, [onScroll])\n\n  return <Grid pencils={pencils} />\n}\n\nexport default Gallery\n","import { geoPath, GeoRawProjection } from 'd3-geo'\nimport { geoProjection } from 'd3-geo'\nimport { FeatureCollection, GeoJsonProperties, Geometry } from 'geojson'\nimport { feature } from 'topojson-client'\nimport { Topology } from 'topojson-specification'\nimport { TopologyItem } from './Map.interface.js'\nimport geography from './world.json'\n\nexport const mapWidth = 800\nexport const mapHeight = 400\n\nconst timesRaw: GeoRawProjection = (lambda, phi) => {\n  // https://github.com/d3/d3-geo-projection/blob/master/src/times.js\n  const { PI, sin, tan } = Math\n  const t = tan(phi / 2)\n  const quarterPi = PI / 4\n  const s = sin(quarterPi * t)\n\n  return [lambda * (0.74482 - 0.34588 * s * s), 1.70711 * t]\n}\n\nconst projection = geoProjection(timesRaw).translate([mapWidth / 2, mapHeight / 2 + 40])\nconst topology: Topology = geography as any\nconst featureCollection = feature(topology, topology.objects.world) as FeatureCollection<\n  Geometry,\n  GeoJsonProperties\n>\n\nexport const topologies = featureCollection.features.map<TopologyItem>(geo => {\n  const pathD = geoPath().projection(projection)(geo)\n  if (pathD === null) {\n    throw new Error()\n  }\n\n  return { ...geo, pathD }\n})\n","import classNames from 'classnames'\nimport isUndefined from 'lodash/isUndefined'\nimport React from 'react'\nimport mapKeys from 'lodash/mapKeys'\nimport { mapHeight, mapWidth, topologies } from './Map.utils'\nimport { useFilter, useFilterCountries } from '../Filter/Filter.hooks'\nimport { useCountryRecord } from '../Taxonomy/Taxonomy.hooks'\n\nconst Map = () => {\n  const [, { setFilter, updateFilter }] = useFilter()\n  const countryRecord = useCountryRecord()\n  const filterCountries = useFilterCountries()\n\n  const activeCountries = mapKeys(filterCountries, ({ geo }) => geo)\n\n  return (\n    <div className=\"Map\">\n      <div className=\"Map-flags\">\n        {filterCountries.map(({ flag }) => (\n          <span key={flag}>{flag}</span>\n        ))}\n      </div>\n      <svg\n        width={mapWidth}\n        height={mapHeight}\n        viewBox={`0 0 ${mapWidth} ${mapHeight}`}\n        className=\"Map-block\"\n      >\n        {topologies.map(topology => {\n          const geoId = topology.id as string\n          const country = countryRecord[geoId]\n          const hasPencil = !isUndefined(country)\n          const isSelected = !isUndefined(activeCountries[geoId])\n          const className = classNames(\n            'Map-country',\n            hasPencil && 'Map-has-pencil',\n            isSelected && 'Map-selected',\n          )\n          const onClick = () => {\n            if (isSelected) {\n              updateFilter({ country: '' })\n            } else if (hasPencil) {\n              setFilter({ country: geoId })\n            }\n          }\n\n          return (\n            <path\n              data-testid={geoId}\n              key={geoId}\n              className={className}\n              d={topology.pathD}\n              onClick={onClick}\n            >\n              {<title>{country?.name}</title>}\n            </path>\n          )\n        })}\n      </svg>\n    </div>\n  )\n}\n\nexport default Map\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: 'В коробке с карандашами',\n    id: 'PageTitle.title',\n  },\n\n  pencil: {\n    defaultMessage: '{flag} {title}. {country}',\n    id: 'PageTitle.pencil',\n  },\n\n  country: {\n    defaultMessage: '{countryFlag} {country}. {pencils}',\n    id: 'PageTitle.country',\n  },\n\n  tag: {\n    defaultMessage: '\"{tag}\" {pencils} из {countries}',\n    id: 'PageTitle.tag',\n  },\n})\n","import { useEffect } from 'react'\nimport { useIntl } from 'react-intl'\nimport messages from './PageTitle.messages'\nimport { appMessages } from '../App/App.messages'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { useNormalizedPencils, usePencilCache } from '../Pencil/Pencil.hooks'\nimport { useCountryRecord } from '../Taxonomy/Taxonomy.hooks'\n\nconst PageTitle = () => {\n  const [filter] = useFilter()\n  const intl = useIntl()\n  const normalizedPencils = useNormalizedPencils()\n  const cache = usePencilCache()\n\n  const pencil = normalizedPencils[filter.display]\n  const countryRecord = useCountryRecord()\n  const counry = countryRecord[filter.country]\n\n  useEffect(() => {\n    if (pencil) {\n      if (pencil.country) {\n        const { flag, name } = pencil.country\n        document.title = intl.formatMessage(messages.pencil, {\n          title: pencil.title,\n          flag,\n          country: name,\n        })\n      } else {\n        document.title = pencil.title\n      }\n    } else if (filter.country && counry) {\n      document.title = intl.formatMessage(messages.country, {\n        countryFlag: counry.flag,\n        country: counry.name,\n        pencils: intl.formatMessage(appMessages.pencil, { count: counry.pencils }),\n      })\n    } else if (filter.tag && cache) {\n      const pencilCount = cache.pages.pencils\n      const countryCount = cache.geo.length\n\n      document.title = intl.formatMessage(messages.tag, {\n        tag: filter.tag,\n        countries: intl.formatMessage(appMessages.country, { count: countryCount }),\n        pencils: intl.formatMessage(appMessages.pencil, { count: pencilCount }),\n      })\n    } else {\n      document.title = intl.formatMessage(messages.title)\n    }\n  }, [intl, pencil, filter, counry, cache])\n\n  return null\n}\n\nexport default PageTitle\n","import { useCallback } from 'react'\nimport { getFilterFromLink } from './Info.utils'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { getEmptyFilter } from '../../Filter/Filter.utils'\n\nexport const usePseudoClick = () => {\n  const [, { updateFilter }] = useFilter()\n  const handlePseudoLink = useCallback(\n    (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      e.stopPropagation()\n      const targetElement = e.target as HTMLElement\n      if (targetElement.tagName === 'A') {\n        const link = targetElement.getAttribute('href')\n        if (link) {\n          const filterFromLink = getFilterFromLink(link)\n          if (filterFromLink) {\n            e.preventDefault()\n            updateFilter({ ...getEmptyFilter(), ...filterFromLink })\n          }\n        }\n      }\n    },\n    [updateFilter],\n  )\n\n  return handlePseudoLink\n}\n","import isEmpty from 'lodash/isEmpty'\nimport pick from 'lodash/pick'\nimport qs from 'qs'\nimport { Filter } from './../../Filter/Filter.interface'\nimport { getEmptyFilter } from './../../Filter/Filter.utils'\nimport { Pencil } from '../../Pencil/Pencil.interface'\n\nexport const getFilterFromLink = (querystring: string): Filter | null => {\n  const parsed = qs.parse(querystring, { ignoreQueryPrefix: true }) as {}\n  const filterKeys = Object.keys(getEmptyFilter())\n  const filter = pick(parsed, filterKeys) as Filter\n\n  if (!isEmpty(filter)) {\n    return filter\n  }\n\n  return null\n}\n\nexport const displayPencilLocation = ({ geo, city }: Pick<Pencil, 'geo' | 'city'>) =>\n  [geo, city].filter(Boolean).join(', ')\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  photo: {\n    defaultMessage: '{count, number} фото',\n    id: 'Info.photo',\n  },\n  location: {\n    defaultMessage: `{flag} {country}, {city}`,\n    id: 'Info.fullLocation',\n  },\n  unknown: {\n    defaultMessage: 'Неизвестно откуда',\n    id: 'Info.unknown',\n  },\n})\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { usePseudoClick } from './Info.hooks'\nimport { InfoProps } from './Info.interface'\nimport messages from './Info.messages'\nimport { mapFilterToQueryString } from '../../Filter/Filter.utils'\n\nconst Info = ({ pencil }: InfoProps) => {\n  const handlePseudoLink = usePseudoClick()\n  const { country, city } = pencil\n\n  return (\n    <div className=\"Info\">\n      <div className=\"Info-content\" onClick={handlePseudoLink}>\n        <h1>{pencil.title}</h1>\n\n        <h2>\n          {city && country ? (\n            <FormattedMessage\n              {...messages.location}\n              values={{\n                flag: country.flag,\n                country: country.name,\n                city: pencil.city,\n              }}\n            />\n          ) : city ? (\n            city\n          ) : (\n            <FormattedMessage {...messages.unknown} />\n          )}\n        </h2>\n\n        <article dangerouslySetInnerHTML={{ __html: pencil.content }} />\n\n        <p>\n          <FormattedMessage\n            tagName=\"b\"\n            {...messages.photo}\n            values={{ count: pencil.photos.length }}\n          />\n        </p>\n      </div>\n\n      {pencil.photos.map(src => (\n        <div key={src} className=\"Info-frame\">\n          <img className=\"Info-photo\" alt={pencil.title} src={src} />\n        </div>\n      ))}\n\n      <div className=\"Info-content\" onClick={handlePseudoLink}>\n        <article className=\"Info-tags\">\n          🏷\n          {pencil.tags.map(tag => (\n            <a className=\"Info-tag\" key={tag} href={mapFilterToQueryString({ tag })}>\n              {tag}\n            </a>\n          ))}\n        </article>\n      </div>\n    </div>\n  )\n}\n\nexport default Info\n","import React, { useEffect, useRef } from 'react'\nimport Info from './Info'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { usePencil } from '../Pencil/Pencil.hooks'\n\nconst PencilInfo = () => {\n  const [{ display }, { updateFilter }] = useFilter()\n  const scroller = useRef<HTMLDivElement>(null)\n  const { pencil } = usePencil({ id: display })\n\n  useEffect(() => {\n    if (display === '') {\n      document.body.style.overflow = 'initial'\n    } else {\n      document.body.style.overflow = 'hidden'\n\n      if (scroller.current) {\n        scroller.current.scrollTop = 0\n      }\n    }\n  }, [display, scroller])\n\n  return pencil ? (\n    <div\n      className=\"PencilInfo-backdrop\"\n      onClick={() => updateFilter({ display: '' })}\n      ref={scroller}\n    >\n      <div className=\"PencilInfo-content\">\n        <Info pencil={pencil} />\n      </div>\n    </div>\n  ) : null\n}\n\nexport default PencilInfo\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  error: {\n    defaultMessage: 'не могу загрузить, попробуй перезагрузить страницу',\n    id: 'Taxonomy.error',\n  },\n})\n","import React from 'react'\nimport Globe from '../Filter/Globe'\n\nconst Loader = () => (\n  <div className=\"Loader\">\n    <Globe animated />\n  </div>\n)\n\nexport default Loader\n","import React, { FC } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport messages from './Taxonomy.messages'\nimport Loader from '../Loader'\nimport { useTaxonomyRequest } from '../Taxonomy/Taxonomy.hooks'\n\nconst Taxonomy: FC = ({ children }) => {\n  const { pending, failure } = useTaxonomyRequest()\n\n  return (\n    <>\n      {pending || failure ? (\n        <div className=\"Taxonomy-loading\">\n          {pending && <Loader />}\n          {failure && (\n            <button onClick={() => window.location.reload()}>\n              <FormattedMessage {...messages.error} />\n            </button>\n          )}\n        </div>\n      ) : (\n        children\n      )}\n    </>\n  )\n}\n\nexport default Taxonomy\n","import React from 'react'\nimport { IntlProvider } from 'react-intl'\n\nimport Filter from '../Filter'\nimport Gallery from '../Gallery'\nimport Map from '../Map'\nimport PageTitle from '../PageTitle'\nimport PencilInfo from '../PencilInfo'\nimport Taxonomy from '../Taxonomy'\n\nconst App = () => (\n  <IntlProvider locale=\"ru\" defaultLocale=\"ru\">\n    <Taxonomy>\n      <PageTitle />\n      <PencilInfo />\n      <nav className=\"App-block\">\n        <Filter />\n      </nav>\n      <Map />\n      <main className=\"App-block\">\n        <Gallery />\n      </main>\n    </Taxonomy>\n  </IntlProvider>\n)\n\nexport default App\n","const apiUrl = process.env.REACT_APP_API_URL\nif (!apiUrl) {\n  throw new Error('no api url')\n}\n\nconst appConfig = {\n  apiUrl,\n}\n\nexport default appConfig\n","import appConfig from './appConfig'\n\nconst apiRequest = <T>(path: string): Promise<T> =>\n  fetch(appConfig.apiUrl + path)\n    .then(response => {\n      if (response.ok) {\n        return response.json()\n      }\n\n      throw new Error(String(response.status))\n    })\n    .catch(error => {\n      console.error('api', path, error)\n      throw error\n    })\n\nexport default apiRequest\n","import {\n  PencilListResponse,\n  PencilSingleRequest,\n  PencilSingleResponse,\n  PencilsListRequest,\n} from './Pencil.interface'\nimport {\n  mapPencilListQueryRequestUrl,\n  mapPencilsingleQueryRequestUrl,\n  mapRequestToCacheId,\n} from './Pencil.utils'\nimport apiRequest from '../../api'\n\nexport const apiRequestSinglePencil = (request: PencilSingleRequest) =>\n  apiRequest<PencilSingleResponse>(mapPencilsingleQueryRequestUrl(request))\n\nexport const apiRequestPencilList = (request: PencilsListRequest) =>\n  apiRequest<PencilListResponse>(mapPencilListQueryRequestUrl(request.query)).then(data => {\n    data.cacheId = mapRequestToCacheId(request)\n\n    return data\n  })\n","import { Epic, combineEpics } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { catchError, filter, map, concatMap } from 'rxjs/operators'\nimport { isActionOf } from 'typesafe-actions'\nimport { PencilActions, pencilActions } from './Pencil.actions'\nimport { apiRequestPencilList, apiRequestSinglePencil } from './Pencil.api'\nimport { filterActions } from '../Filter/Filter.actions'\nimport { getEmptyFilter } from '../Filter/Filter.utils'\n\nexport const pencilEpic: Epic<PencilActions> = combineEpics(\n  action$ =>\n    action$.pipe(\n      filter(isActionOf(pencilActions.requestSinglePencil.request)),\n      concatMap(({ payload }) =>\n        from(apiRequestSinglePencil(payload)).pipe(\n          map(pencilActions.requestSinglePencil.success),\n          catchError(() =>\n            of(filterActions.set(getEmptyFilter()), pencilActions.requestSinglePencil.failure()),\n          ),\n        ),\n      ),\n    ),\n\n  action$ =>\n    action$.pipe(\n      filter(isActionOf(pencilActions.requestPencilList.request)),\n      concatMap(({ payload }) =>\n        from(apiRequestPencilList(payload)).pipe(\n          map(pencilActions.requestPencilList.success),\n          catchError(() =>\n            of(filterActions.set(getEmptyFilter()), pencilActions.requestPencilList.failure()),\n          ),\n        ),\n      ),\n    ),\n)\n","import { combineEpics } from 'redux-observable'\nimport { taxonomyEpic } from './components/Taxonomy/Taxonomy.epic'\nimport { pencilEpic } from './components/Pencil/Pencil.epic'\n\nexport const rootEpic = combineEpics(taxonomyEpic, pencilEpic)\n","import { Epic } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { catchError, map, mergeMap, filter } from 'rxjs/operators'\nimport { isActionOf } from 'typesafe-actions'\nimport { taxonomyActions, TaxonomyActions } from './Taxonomy.actions'\nimport { apiRequestTaxonomy } from './Taxonomy.api'\n\nexport const taxonomyEpic: Epic<TaxonomyActions> = action$ =>\n  action$.pipe(\n    filter(isActionOf(taxonomyActions.requestTaxonomy.request)),\n    mergeMap(() =>\n      from(apiRequestTaxonomy()).pipe(\n        map(taxonomyActions.requestTaxonomy.success),\n        catchError(() => of(taxonomyActions.requestTaxonomy.failure())),\n      ),\n    ),\n  )\n","import { TaxonomyResponse } from './Taxonomy.interface'\nimport apiRequest from '../../api'\n\nexport const apiRequestTaxonomy = () => apiRequest<TaxonomyResponse>('/taxonomy/')\n","import { combineReducers } from 'redux'\nimport { taxonomyReducer } from './components/Taxonomy/Taxonomy.actions'\nimport { pencilReducer } from './components/Pencil/Pencil.actions'\nimport { filterReducer } from './components/Filter/Filter.actions'\n\nexport const rootReducer = combineReducers({\n  filter: filterReducer,\n  pencils: pencilReducer,\n  taxonomy: taxonomyReducer,\n})\n","import { applyMiddleware, createStore, Store } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { createEpicMiddleware } from 'redux-observable'\nimport { rootEpic } from './rootEpic'\nimport { rootReducer } from './rootReducer'\n\nconst epicMiddleware = createEpicMiddleware()\nconst store: Store<AppStore> = createStore(\n  rootReducer,\n  {},\n  composeWithDevTools(applyMiddleware(epicMiddleware)),\n)\nepicMiddleware.run(rootEpic)\n\nexport type AppStore = ReturnType<typeof rootReducer>\n\nexport const createTestStore = (initialState?: RecursivePartial<AppStore>) =>\n  createStore(rootReducer, initialState as AppStore)\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './components/App'\nimport './index.css'\nimport store from './store'\n\nif (!Intl.PluralRules) {\n  require('intl-pluralrules')\n}\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}