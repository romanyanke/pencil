{"version":3,"sources":["components/Filter/Filter.utils.ts","components/Filter/Filter.actions.ts","components/Filter/Filter.hooks.ts","components/Gallery/Gallery.utils.ts","components/Pencil/Pencil.utils.ts","components/Pencil/Pancil.hooks.ts","components/Taxonomy/Taxonomy.hooks.ts","components/Filter/Filter.messages.ts","components/Filter/Globe/Globe.tsx","components/App/App.messages.ts","components/Filter/Filter.tsx","components/Pencil/Pencil.actions.ts","modules/requestStatus.ts","components/Pencil/Pencil.tsx","appConfig.ts","modules/api.ts","components/Pencil/Pencil.api.ts","components/Pencil/Pencil.epic.ts","components/Gallery/Grid/Grid.tsx","components/Gallery/Gallery.tsx","components/Loader/Loader.tsx","components/Map/Map.utils.ts","components/Map/Map.tsx","components/PencilInfo/Info/Info.tsx","components/PencilInfo/Info/Info.utils.ts","components/PencilInfo/PencilInfo.tsx","components/PencilInfo/TagHeader/TagHeader.messages.ts","components/PencilInfo/TagHeader/TagHeader.tsx","components/Taxonomy/Taxonomy.actions.ts","components/Taxonomy/Taxonomy.tsx","components/Taxonomy/Taxonomy.epic.ts","components/Taxonomy/Taxonomy.api.ts","components/App/App.tsx","epics.ts","store.ts","index.tsx"],"names":["mapFilterToQueryString","filter","query","qs","stringify","pickBy","Boolean","mapQueryStringToFilter","querystring","arguments","length","undefined","window","location","search","input","parse","ignoreQueryPrefix","Object","objectSpread","display","country","tag","initialState","updateFilter","createStandardAction","createReducer","handleAction","state","_ref","payload","useFilter","useSelector","store","dispatch","useDispatch","update","requestFirstPage","page","mapRequestToCacheId","request","cahceIdParts","id","concat","_request$query","push","join","usePencil","pencils","usePencilCache","cache","useCached","userQuery","_useFilter","currentFilter","slicedToArray","queryCacheId","mapQueryToCacheId","useTaxonomy","taxonomy","useCountries","countries","defineMessages","title","defaultMessage","current","Globe","animated","isAnimated","frames","_useState","useState","_useState2","index","setIndex","useEffect","spin","setTimeout","clearTimeout","react_default","a","createElement","Fragment","appMessages","pencil","injectIntl","withRouter","history","intl","_useTaxonomy","pencilCount","_useFilter2","setFilter","cached","listen","_ref2","action","isCountryFiltered","select","useRef","className","onClick","focus","Filter_Globe_Globe","index_es","assign","messages","values","count","ref","value","onChange","e","target","key","map","isCurrent","name","flag","formatMessage","pages","requestStatus","idle","pending","fulfilled","rejected","normalized","requestSinglePencil","createAsyncAction","requestPencilList","failure","success","_getCacheAndNormilize","_ref3","cacheId","data","ids","_ref4","reduce","list","defineProperty","getCacheAndNormilizedFromList","Pencil","queries","children","acc","toConsumableArray","total","nextUrl","items","Error","getPencilsFromCacheByQuery","isNotCached","isUndefined","forEach","apiUrl","process","appConfig","apiRequest","path","fetch","then","response","json","catch","error","console","apiRequestPencilList","pathParts","sanitize","encodeURIComponent","toLowerCase","replace","mapPencilListQueryRequestUrl","combineEpics","action$","pipe","ofType","getType","bufferTime","actions","mergeMap","from","uniqBy","isActionOf","mapPencilsingleQueryRequestUrl","catchError","of","mergeAll","Grid","href","preventDefault","classNames","size2","grid","size3","alt","src","preview","photos","Gallery","setQueries","_useState3","_useState4","loading","setLoading","lastQuery","nextPageNumber","onScroll","throttle","scrollBottomLine","pageYOffset","innerHeight","document","body","clientHeight","nextpage","addEventListener","removeEventListener","components_Pencil_Pencil","Gallery_Grid_Grid","Loader","baseStyle","stroke","strokeWidth","outline","red","mapGeoIdToStyle","hasPencil","isSelected","default","fill","hover","cursor","pressed","Map","geoIds","normalizedIds","normalizedNames","onCountryClick","geoId","react_simple_maps_lib","height","projectionConfig","yOffset","geography","disableOptimization","geographies","projection","geo","includes","style","Info","handlePseudoLink","useCallback","targetElement","tagName","stopPropagation","link","getAttribute","filterFromLink","queryPart","split","emptyFilter","filterKeys","keys","keysFromQuery","pick","isEmpty","getFilterFromLink","city","tags","dangerouslySetInnerHTML","__html","content","PencilInfo","closePencilInfo","PencilInfo_Info_Info","TagHeader","requestTaxonomy","meta","Taxonomy","addLocaleData","ru","App","components_Taxonomy_Taxonomy","_ref$requestStatus","components_Loader_Loader","locale","defaultLocale","textComponent","react_router_dom","components_PencilInfo_PencilInfo","components_Filter_Filter","PencilInfo_TagHeader_TagHeader","components_Map_Map","components_Gallery_Gallery","rootEpic","taxonomyEpic","pencilEpic","epicMiddleware","createEpicMiddleware","rootReducer","combineReducers","taxonomyReducer","pencilReducer","filterReducer","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","es","components_App_App","getElementById"],"mappings":"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","file":"static/js/main.4f42fbca.chunk.js","sourcesContent":["import { pickBy } from 'lodash'\nimport qs from 'qs'\nimport { Filter } from './Filter.interface'\n\nexport const getEmptyFilter = (): Filter => ({\n  display: '',\n  country: '',\n  tag: '',\n})\n\nexport const mapFilterToQueryString = (filter: Filter): string => {\n  const query = qs.stringify(pickBy(filter, Boolean))\n  return query ? '?' + query : ''\n}\n\nexport const mapQueryStringToFilter = (querystring = window.location.search): Filter => {\n  const input = qs.parse(querystring, { ignoreQueryPrefix: true })\n  return { ...getEmptyFilter(), ...input }\n}\n\nexport const getInitialFilter = (): Filter => ({\n  ...getEmptyFilter(),\n  ...mapQueryStringToFilter(),\n})\n","import { ActionType, createReducer, createStandardAction } from 'typesafe-actions'\nimport { Filter, FilterAppStore } from './Filter.interface'\nimport { getInitialFilter } from './Filter.utils'\n\nconst initialState: FilterAppStore = getInitialFilter()\nexport const updateFilter = createStandardAction('filter:set')<Partial<Filter>>()\nconst actions = { updateFilter }\ntype Actions = ActionType<typeof actions>\n\nexport default createReducer<FilterAppStore, Actions>(initialState).handleAction(\n  updateFilter,\n  (state, { payload }) => ({\n    ...state,\n    ...payload,\n  }),\n)\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AppStore } from './../../store'\nimport { updateFilter } from './Filter.actions'\nimport { Filter } from './Filter.interface'\n\nexport const useFilter = (): [Filter, (update: Partial<Filter>) => void] => {\n  const filter = useSelector<AppStore, Filter>(store => store.filter)\n  const dispatch = useDispatch()\n  const setFilter = (update: Partial<Filter>) => dispatch(updateFilter(update))\n\n  return [filter, setFilter]\n}\n","import { PencilQuery } from '../Pencil/Pencil.interface'\nexport const requestFirstPage = (query: PencilQuery): PencilQuery => ({ ...query, page: 1 })\n","import {\n  Pencil,\n  PencilCache,\n  PencilCacheItem,\n  PencilListResponse,\n  PencilPages,\n  PencilQuery,\n  PencilRequest,\n  PencilSingleRequest,\n  PencilsNormalized,\n} from './Pencil.interface'\n\nexport const getEmptyPencilCacheItem = (): PencilCacheItem => ({\n  ids: [],\n  pages: {\n    page: 0,\n    total: 0,\n    nextUrl: null,\n    items: 0,\n    pencils: 0,\n  },\n})\n\nexport const mapPencilsingleQueryRequestUrl = ({ id }: PencilSingleRequest): string => {\n  return `/pencil/${id}/`\n}\n\nexport const mapPencilListQueryRequestUrl = ({ page, tag, country }: PencilQuery): string => {\n  const pathParts: string[] = []\n  const sanitize = (input: string) => {\n    return encodeURIComponent(input.toLowerCase().replace(/\\s/g, '-'))\n  }\n\n  if (tag && country) {\n    throw new Error('no tag and country at the same time')\n  }\n\n  if (tag) {\n    pathParts.push(`/tags/${sanitize(tag)}`)\n  }\n  if (country) {\n    pathParts.push(`/countries/${sanitize(country)}`)\n  }\n  if (page && page !== 1) {\n    pathParts.push(`/page/${page}`)\n  }\n  return pathParts.join('/') + '/'\n}\n\nexport const mapRequestToCacheId = (request: PencilRequest): string => {\n  const cahceIdParts: string[] = ['_']\n  if (request.id) {\n    return `id:${request.id}`\n  } else if (request.query) {\n    const { page, tag, country } = request.query\n    if (page) {\n      cahceIdParts.push(`p:${page}`)\n    }\n    if (tag) {\n      cahceIdParts.push(`t:${tag}`)\n    }\n    if (country) {\n      cahceIdParts.push(`c:${country}`)\n    }\n  }\n\n  return cahceIdParts.join('|')\n}\n\nexport const mapQueriesToCacheId = (queries: PencilQuery[]): string =>\n  queries.map(query => mapRequestToCacheId({ query })).join('+')\n\ninterface CacheAndNormalize {\n  cache: PencilCache\n  normalized: PencilsNormalized\n}\nexport const getCacheAndNormilizedFromList = ({\n  cacheId,\n  pages,\n  data,\n}: PencilListResponse): CacheAndNormalize => {\n  const ids = data.map(({ id }) => id)\n  const normalized = data.reduce((list, pencil) => ({ ...list, [pencil.id]: pencil }), {})\n  return { normalized, cache: { [cacheId]: { ids, pages } } }\n}\n\nexport const getNextPageNumberFromPages = (pages: PencilPages): number | null => {\n  if (pages) {\n    if (pages.page < pages.total) {\n      return pages.page + 1\n    }\n  }\n\n  return null\n}\n\nexport const getPencilsFromCacheByQuery = (\n  query: PencilQuery,\n  cache: Partial<PencilCache>,\n  normalized: PencilsNormalized,\n): Pencil[] => {\n  const pencilCache: PencilCacheItem =\n    cache[mapRequestToCacheId({ query })] || getEmptyPencilCacheItem()\n  const pencils = pencilCache.ids.map(id => {\n    const data = normalized[id]\n    if (!data) {\n      throw new Error('no cache for id ' + id)\n    }\n    return data\n  })\n\n  return pencils\n}\n","import { useSelector } from 'react-redux'\nimport { AppStore } from '../../store'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { requestFirstPage } from '../Gallery/Gallery.utils'\nimport { PencilAppStore, PencilQuery } from './Pencil.interface'\nimport { mapRequestToCacheId as mapQueryToCacheId } from './Pencil.utils'\n\nconst usePencil = () => useSelector<AppStore, PencilAppStore>(store => store.pencils)\n\nexport const usePecnilRequestStatus = () => usePencil().requestStatus\nexport const useNormalizedPencils = () => usePencil().normalized\nexport const usePencilCache = () => usePencil().cache\n\nexport const useCached = (userQuery?: PencilQuery) => {\n  const [currentFilter] = useFilter()\n  const filter = userQuery || currentFilter\n  const query = filter && filter.page && filter.page > 1 ? filter : requestFirstPage(filter)\n  const queryCacheId = mapQueryToCacheId({ query })\n  const cache = usePencilCache()\n  const cacheItem = cache[queryCacheId]\n  return cacheItem\n}\n","import { useSelector } from 'react-redux'\nimport { AppStore } from '../../store'\nimport { TaxonomyAppStore } from './Taxonomy.interface'\n\nexport const useTaxonomy = () => useSelector<AppStore, TaxonomyAppStore>(store => store.taxonomy)\nexport const useTaxonomyRequestStatus = () => useTaxonomy().requestStatus\nexport const useCountries = () => useTaxonomy().countries\n\nexport const useCountriesNormalizedByGeoId = () =>\n  useCountries().reduce<Record<string, string>>(\n    (normalized, country) => ({\n      ...normalized,\n      [country.id]: country.name,\n    }),\n    {},\n  )\n\nexport const useCountriesNormalizedByName = () =>\n  useCountries().reduce<Record<string, string>>(\n    (normalized, country) => ({\n      ...normalized,\n      [country.name]: country.id,\n    }),\n    {},\n  )\n\nexport const useTags = () => useTaxonomy().tags\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: `{pencils} из {countries}`,\n    id: 'Filter.title',\n  },\n\n  current: {\n    defaultMessage: `{country}: {pencils}`,\n    id: 'Filter.current',\n  },\n})\n","import React, { FC, useEffect, useState } from 'react'\nimport { GlobeProps } from './Globe.interface'\n\nconst Globe: FC<GlobeProps> = ({ animated }) => {\n  const isAnimated = Boolean(animated)\n  const frames = ['🌍', '🌏', '🌎']\n  const speed = 400\n  const [index, setIndex] = useState(0)\n  useEffect(() => {\n    if (isAnimated) {\n      const spin = setTimeout(() => {\n        const nextIndex = index + 1 === frames.length ? 0 : index + 1\n        setIndex(nextIndex)\n      }, speed)\n      return () => {\n        clearTimeout(spin)\n      }\n    }\n  }, [isAnimated, speed, index, setIndex, frames])\n\n  return <>{frames[index]}</>\n}\n\nexport default Globe\n","import { defineMessages } from 'react-intl'\n\nexport const appMessages = defineMessages({\n  pencil: {\n    defaultMessage: `{count, plural,\n      one {# карандаш}\n      few {# карандаша}\n      many {# карандашей}\n    }`,\n    id: 'App.pencil',\n  },\n\n  country: {\n    defaultMessage: `{count, plural,\n      one {# страны}\n      few {# стран}\n      many {# стран}\n    }`,\n    id: 'App.country',\n  },\n})\n","import { Location } from 'history'\nimport React, { ChangeEvent, SFC, useEffect, useRef } from 'react'\nimport { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl'\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\nimport { useCached } from '../Pencil/Pancil.hooks'\nimport { useTaxonomy } from '../Taxonomy/Taxonomy.hooks'\nimport { useFilter } from './Filter.hooks'\nimport { FilterProps } from './Filter.interface'\nimport messages from './Filter.messages'\nimport { mapFilterToQueryString, mapQueryStringToFilter } from './Filter.utils'\nimport Globe from './Globe'\nimport { appMessages } from '../App/App.messages'\n\nconst Filter: SFC<FilterProps & RouteComponentProps & InjectedIntlProps> = ({ history, intl }) => {\n  const { countries, pencilCount } = useTaxonomy()\n  const [filter, setFilter] = useFilter()\n  const cached = useCached()\n\n  useEffect(() => {\n    if (mapFilterToQueryString(filter) !== window.location.search) {\n      history.push(mapFilterToQueryString(filter))\n    }\n  }, [filter, history])\n\n  useEffect(() => {\n    const unlisten = history.listen(({ search }: Location, action) => {\n      if (action === 'POP') {\n        setFilter(mapQueryStringToFilter(search))\n      }\n    })\n    return unlisten\n  }, [filter, history, setFilter])\n\n  const isCountryFiltered = Boolean(filter.country)\n  const select = useRef<HTMLSelectElement>(null)\n\n  return (\n    <div className=\"Filter\">\n      <div className=\"Filter-control\">\n        <button\n          className=\"Filter-clear-button\"\n          onClick={() => {\n            if (isCountryFiltered) {\n              setFilter({ country: '' })\n            }\n            if (select.current) {\n              select.current.focus()\n            }\n          }}\n        >\n          <span className=\"Filter-Globe\">\n            <Globe animated={isCountryFiltered} />\n          </span>\n          <FormattedMessage\n            {...messages.title}\n            values={{\n              pencils: <FormattedMessage {...appMessages.pencil} values={{ count: pencilCount }} />,\n              countries: (\n                <FormattedMessage {...appMessages.country} values={{ count: countries.length }} />\n              ),\n            }}\n          />\n        </button>\n      </div>\n      <div className=\"Filter-control\">\n        <select\n          ref={select}\n          className=\"Filter-select\"\n          value={filter.country}\n          onChange={(e: ChangeEvent<HTMLSelectElement>) =>\n            setFilter({ country: e.target.value, tag: '' })\n          }\n        >\n          <option key=\"empty-country\" value=\"\">\n            Все страны\n          </option>\n          {countries.map(country => {\n            const isCurrent = filter.country === country.name\n            return (\n              <option key={country.name} value={country.name}>\n                {country.flag}{' '}\n                {isCurrent && cached\n                  ? intl.formatMessage(messages.current, {\n                      country: country.name,\n                      pencils: intl.formatMessage(appMessages.pencil, {\n                        count: cached.pages.pencils,\n                      }),\n                    })\n                  : country.name}\n              </option>\n            )\n          })}\n        </select>\n      </div>\n    </div>\n  )\n}\n\nexport default injectIntl(withRouter(Filter))\n","import { ActionType, createAsyncAction, createReducer } from 'typesafe-actions'\nimport { getRequestStatus } from '../../modules/requestStatus'\nimport {\n  PencilAppStore,\n  PencilListResponse,\n  PencilSingleRequest,\n  PencilSingleResponse,\n  PencilsListRequest,\n} from './Pencil.interface'\nimport { getCacheAndNormilizedFromList } from './Pencil.utils'\n\nconst initialState: PencilAppStore = {\n  requestStatus: getRequestStatus().idle,\n  cache: {},\n  normalized: {},\n}\n\nexport const requestSinglePencil = createAsyncAction(\n  'pencil-single:pending',\n  'pencil-single:fulfilled',\n  'pencil-single:rejected',\n)<PencilSingleRequest, PencilSingleResponse, undefined>()\n\nexport const requestPencilList = createAsyncAction(\n  'pencil-list:pending',\n  'pencil-list:fulfilled',\n  'pencil-list:rejected',\n)<PencilsListRequest, PencilListResponse, undefined>()\n\nconst actions = { requestPencils: requestPencilList, requestPencil: requestSinglePencil }\ntype Actions = ActionType<typeof actions>\n\nexport default createReducer<PencilAppStore, Actions>(initialState)\n  .handleAction([requestPencilList.request, requestSinglePencil.request], state => ({\n    ...state,\n    requestStatus: getRequestStatus().pending,\n  }))\n  .handleAction([requestPencilList.failure, requestSinglePencil.failure], state => ({\n    ...state,\n    requestStatus: getRequestStatus().rejected,\n  }))\n  .handleAction(requestPencilList.success, (state, { payload }) => {\n    const { cache, normalized } = getCacheAndNormilizedFromList(payload)\n    return {\n      ...state,\n      cache: { ...state.cache, ...cache },\n      normalized: { ...state.normalized, ...normalized },\n      requestStatus: getRequestStatus().fulfilled,\n    }\n  })\n  .handleAction(requestSinglePencil.success, (state, { payload: pencil }) => ({\n    ...state,\n    normalized: {\n      ...state.normalized,\n      [pencil.id]: pencil,\n    },\n    requestStatus: getRequestStatus().fulfilled,\n  }))\n","export interface RequestStatus {\n  idle: boolean\n  pending: boolean\n  fulfilled: boolean\n  rejected: boolean\n}\n\nexport const getRequestStatus = (): Record<keyof RequestStatus, RequestStatus> => ({\n  idle: {\n    idle: true,\n    pending: false,\n    fulfilled: false,\n    rejected: false,\n  },\n  pending: {\n    idle: false,\n    pending: true,\n    fulfilled: false,\n    rejected: false,\n  },\n  fulfilled: {\n    idle: false,\n    pending: false,\n    fulfilled: true,\n    rejected: false,\n  },\n  rejected: {\n    idle: false,\n    pending: false,\n    fulfilled: false,\n    rejected: true,\n  },\n})\n","import { isUndefined } from 'lodash'\nimport React, { SFC, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useNormalizedPencils, usePecnilRequestStatus, usePencilCache } from './Pancil.hooks'\nimport { requestPencilList, requestSinglePencil } from './Pencil.actions'\nimport { Pencil as PencilInterface, PencilProps, PencilQuery } from './Pencil.interface'\nimport { getPencilsFromCacheByQuery, mapRequestToCacheId } from './Pencil.utils'\n\n// tslint:disable: no-shadowed-variable\nconst Pencil: SFC<PencilProps> = ({ id, query, queries, children }) => {\n  const dispatch = useDispatch()\n  const requestStatus = usePecnilRequestStatus()\n  const cache = usePencilCache()\n  const normalized = useNormalizedPencils()\n  const pencil = id ? normalized[id] : undefined\n  const targetQueries = query ? [query] : queries ? queries : []\n  const pencils = targetQueries.reduce<PencilInterface[]>((acc, query) => {\n    return [...acc, ...getPencilsFromCacheByQuery(query, cache, normalized)]\n  }, [])\n  // console.log(queries, pencils)\n\n  useEffect(() => {\n    const isNotCached = (query: PencilQuery) => isUndefined(cache[mapRequestToCacheId({ query })])\n    if (id && !pencil) {\n      dispatch(requestSinglePencil.request({ id }))\n    } else if (query && isNotCached(query)) {\n      dispatch(requestPencilList.request({ query }))\n    } else if (queries) {\n      queries.filter(isNotCached).forEach(query => {\n        dispatch(requestPencilList.request({ query }))\n      })\n    }\n  }, [dispatch, id, query, queries, pencil, cache])\n\n  return <>{children({ requestStatus, pencil, pencils })} </>\n}\n\nexport default Pencil\n","const apiUrl = process.env.REACT_APP_API_URL\nif (!apiUrl) {\n  throw new Error('no api url')\n}\n\nconst appConfig = {\n  apiUrl,\n}\n\nexport default appConfig\n","import appConfig from '../appConfig'\n\nconst apiRequest = <T>(path: string): Promise<T> => {\n  return fetch(appConfig.apiUrl + path)\n    .then(response => response.json())\n    .catch(error => {\n      console.error('api', path, error)\n      throw error\n    })\n}\n\nexport default apiRequest\n","import apiRequest from '../../modules/api'\nimport {\n  PencilListResponse,\n  PencilSingleRequest,\n  PencilSingleResponse,\n  PencilsListRequest,\n} from './Pencil.interface'\nimport {\n  mapPencilListQueryRequestUrl,\n  mapPencilsingleQueryRequestUrl,\n  mapRequestToCacheId,\n} from './Pencil.utils'\n\nexport const apiRequestSinglePencil = (request: PencilSingleRequest) =>\n  apiRequest<PencilSingleResponse>(mapPencilsingleQueryRequestUrl(request))\n\nexport const apiRequestPencilList = (request: PencilsListRequest) =>\n  apiRequest<PencilListResponse>(mapPencilListQueryRequestUrl(request.query)).then(data => {\n    data.cacheId = mapRequestToCacheId(request)\n    return data\n  })\n","import { uniqBy } from 'lodash'\nimport { ActionsObservable, combineEpics, ofType } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { bufferTime, catchError, filter, map, mergeAll, mergeMap } from 'rxjs/operators'\nimport { ActionType, getType, isActionOf } from 'typesafe-actions'\nimport { requestPencilList, requestSinglePencil } from './Pencil.actions'\nimport { apiRequestPencilList, apiRequestSinglePencil } from './Pencil.api'\nimport { mapRequestToCacheId } from './Pencil.utils'\n\nexport default combineEpics(\n  (\n    action$: ActionsObservable<\n      ActionType<typeof requestSinglePencil.request | typeof requestPencilList.request>\n    >,\n  ) =>\n    action$.pipe(\n      ofType(getType(requestSinglePencil.request), getType(requestPencilList.request)),\n      bufferTime(33),\n      filter(actions => actions.length > 0),\n      mergeMap(actions =>\n        from(\n          uniqBy(actions, ({ payload }) => mapRequestToCacheId(payload)).map(action => {\n            if (isActionOf(requestSinglePencil.request)(action)) {\n              return from(apiRequestSinglePencil(action.payload)).pipe(\n                map(requestSinglePencil.success),\n                catchError(() => of(requestSinglePencil.failure())),\n              )\n            } else if (isActionOf(requestPencilList.request)(action)) {\n              return from(apiRequestPencilList(action.payload)).pipe(\n                map(requestPencilList.success),\n                catchError(() => of(requestPencilList.failure())),\n              )\n            }\n            throw new Error()\n          }),\n        ).pipe(mergeAll()),\n      ),\n    ),\n)\n","import classNames from 'classnames'\nimport React, { SFC } from 'react'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { GridProps } from './Grid.interface'\n\nconst Grid: SFC<GridProps> = ({ pencils }) => {\n  const [, setFilter] = useFilter()\n\n  return (\n    <div className=\"Grid\">\n      {pencils.map(pencil => {\n        return (\n          <a\n            href={`?display=${pencil.id}`}\n            onClick={e => {\n              e.preventDefault()\n              setFilter({ display: pencil.id })\n            }}\n            className={classNames('GridItem', {\n              size2: pencil.grid === 2,\n              size3: pencil.grid === 3,\n            })}\n            key={pencil.id}\n            title={pencil.title}\n          >\n            <img alt={pencil.title} src={pencil.grid === 1 ? pencil.preview : pencil.photos[0]} />\n          </a>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Grid\n","import { throttle } from 'lodash'\nimport React, { FC, useEffect, useState } from 'react'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport Pencil from '../Pencil'\nimport { useCached } from '../Pencil/Pancil.hooks'\nimport { PencilQuery } from '../Pencil/Pencil.interface'\nimport { getNextPageNumberFromPages } from '../Pencil/Pencil.utils'\nimport { requestFirstPage } from './Gallery.utils'\nimport Grid from './Grid'\n\nconst Gallery: FC = () => {\n  const [filter] = useFilter()\n  const [queries, setQueries] = useState<PencilQuery[]>([])\n  const [loading, setLoading] = useState(false)\n  const lastQuery = queries[queries.length - 1]\n  const cached = useCached(lastQuery)\n  const nextPageNumber = cached ? getNextPageNumberFromPages(cached.pages) : null\n  const { country, tag, page } = filter\n\n  useEffect(() => {\n    setQueries([requestFirstPage({ country, tag, page })])\n  }, [country, tag, page])\n  useEffect(() => setLoading(false), [nextPageNumber])\n  useEffect(() => {\n    const loadNextPage = (nextpage: number) => {\n      setQueries([...queries, { page: nextpage, ...filter }])\n    }\n    const onScroll = throttle(() => {\n      if (nextPageNumber && !loading) {\n        const scrollBottomLine = window.pageYOffset + window.innerHeight\n        const total = document.body.clientHeight\n        if (total * 0.6 < scrollBottomLine) {\n          setLoading(true)\n          loadNextPage(nextPageNumber)\n        }\n      }\n    }, 500)\n    if (nextPageNumber) {\n      window.addEventListener('scroll', onScroll)\n    }\n    return () => {\n      window.removeEventListener('scroll', onScroll)\n    }\n  }, [queries, nextPageNumber, loading, filter])\n\n  return <Pencil queries={queries}>{({ pencils }) => <Grid pencils={pencils} />}</Pencil>\n}\n\nexport default Gallery\n","import React from 'react'\nimport Globe from '../Filter/Globe'\n\nconst Loader = () => (\n  <div className=\"Loader\">\n    <Globe animated />\n  </div>\n)\n\nexport default Loader\n","import { GeographyProps } from 'react-simple-maps'\nimport { MapGeoStyleProps } from './Map.interface'\n\nconst baseStyle: React.CSSProperties = {\n  stroke: '#607D8B',\n  strokeWidth: 0.75,\n  outline: 'none',\n}\n\nconst lightGrey = '#eceff1'\nconst grey = '#cfd8dc'\nconst blue = '#309cd0'\nconst darkBlue = '#226a8c'\nconst red = '#ff5722'\n\nexport const mapGeoIdToStyle = ({\n  hasPencil,\n  isSelected,\n}: MapGeoStyleProps): GeographyProps['style'] => ({\n  default: {\n    fill: isSelected ? red : hasPencil ? blue : lightGrey,\n    ...baseStyle,\n  },\n  hover: {\n    fill: isSelected ? red : hasPencil ? darkBlue : grey,\n    cursor: hasPencil ? 'pointer' : 'default',\n    ...baseStyle,\n  },\n  pressed: { fill: isSelected ? red : hasPencil ? darkBlue : grey, ...baseStyle },\n})\n","import React from 'react'\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport {\n  useCountries,\n  useCountriesNormalizedByGeoId,\n  useCountriesNormalizedByName,\n} from '../Taxonomy/Taxonomy.hooks'\nimport { mapGeoIdToStyle } from './Map.utils'\nimport geography from './world.json'\n\nconst Map = () => {\n  const [filter, setFilter] = useFilter()\n  const countries = useCountries()\n  const geoIds = countries.map(({ id }) => id)\n\n  const normalizedIds = useCountriesNormalizedByGeoId()\n  const normalizedNames = useCountriesNormalizedByName()\n\n  const onCountryClick = (geoId: string) => () => {\n    setFilter({ country: normalizedIds[geoId] })\n  }\n\n  return (\n    <div className=\"Map\">\n      <ComposableMap\n        className=\"Map-block\"\n        height={400}\n        projectionConfig={{\n          yOffset: 50,\n        }}\n      >\n        <Geographies geography={geography} disableOptimization>\n          {(geographies, projection) => {\n            return geographies.map((geo, index) => {\n              // TODO issue types\n              const geoId = (geo as any).id\n              const hasPencil = geoIds.includes(geoId)\n              const isSelected = normalizedNames[filter.country] === geoId\n              return (\n                <Geography\n                  key={index}\n                  geography={geo}\n                  projection={projection}\n                  onClick={hasPencil ? onCountryClick(geoId) : undefined}\n                  style={mapGeoIdToStyle({ hasPencil, isSelected })}\n                />\n              )\n            })\n          }}\n        </Geographies>\n      </ComposableMap>\n    </div>\n  )\n}\n\nexport default Map\n","import React, { SFC, useCallback } from 'react'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { getEmptyFilter } from '../../Filter/Filter.utils'\nimport { InfoProps } from './Info.interface'\nimport { getFilterFromLink } from './Info.utils'\n\nconst Info: SFC<InfoProps> = ({ pencil }) => {\n  const [, setFilter] = useFilter()\n\n  const handlePseudoLink = useCallback(\n    (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      const targetElement = e.target as HTMLElement\n\n      if (targetElement.tagName === 'A') {\n        e.stopPropagation()\n        const link = targetElement.getAttribute('href')\n        if (link) {\n          const filterFromLink = getFilterFromLink(link)\n          if (filterFromLink) {\n            e.preventDefault()\n            setFilter({ ...getEmptyFilter(), ...filterFromLink })\n          }\n        }\n      }\n    },\n    [setFilter],\n  )\n\n  return (\n    <div className=\"Info\">\n      <h1>{pencil.title}</h1>\n      <h2>\n        {pencil.country.name}, {pencil.city}\n      </h2>\n\n      <p>\n        {pencil.tags.map((tag, index) => {\n          return (\n            <span key={`${index}/${tag}`}>\n              #\n              <a\n                href={`?tag=${tag}`}\n                onClick={e => {\n                  e.preventDefault()\n                  setFilter({ tag, display: '', country: '' })\n                }}\n              >\n                {tag}\n              </a>{' '}\n            </span>\n          )\n        })}\n      </p>\n      <article\n        className=\"Pencil-content\"\n        dangerouslySetInnerHTML={{ __html: pencil.content }}\n        onClick={handlePseudoLink}\n      />\n      <p>\n        {pencil.photos.map(src => {\n          return <img className=\"Info-photo\" alt={pencil.title} key={src} src={src} />\n        })}\n      </p>\n    </div>\n  )\n}\n\nexport default Info\n","import { isEmpty, pick } from 'lodash'\nimport qs from 'qs'\nimport { Filter } from './../../Filter/Filter.interface'\nimport { getEmptyFilter } from './../../Filter/Filter.utils'\n\nexport const getFilterFromLink = (link: string): Filter | null => {\n  const queryPart = link.split('?')[1]\n  if (queryPart) {\n    const emptyFilter = getEmptyFilter()\n    const query = qs.parse(queryPart)\n    const filterKeys = Object.keys(emptyFilter) as Array<keyof Filter>\n    const keysFromQuery = pick<Filter, keyof Filter>(query, filterKeys)\n    if (!isEmpty(keysFromQuery)) {\n      return keysFromQuery\n    }\n  }\n\n  return null\n}\n","import React, { SFC } from 'react'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport Pencil from '../Pencil'\nimport Info from './Info'\nimport { PencilInfoProps } from './PencilInfo.interface'\n\nconst PencilInfo: SFC<PencilInfoProps> = () => {\n  const [filter, setFilter] = useFilter()\n  const closePencilInfo = () => setFilter({ display: '' })\n\n  if (filter.display) {\n    return (\n      <Pencil id={filter.display}>\n        {({ pencil }) => {\n          if (pencil) {\n            return (\n              <div className=\"PencilInfo-backdrop\" onClick={closePencilInfo}>\n                <Info pencil={pencil} />\n              </div>\n            )\n          }\n          return null\n        }}\n      </Pencil>\n    )\n  }\n  return null\n}\n\nexport default PencilInfo\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: '{pencils} в категории \"{tag}\"',\n    id: 'TagHeader.title',\n  },\n})\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { appMessages } from '../../App/App.messages'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { useCached } from '../../Pencil/Pancil.hooks'\nimport messages from './TagHeader.messages'\n\nconst TagHeader = () => {\n  const [filter, setFilter] = useFilter()\n  const cache = useCached()\n  return (\n    <button onClick={() => setFilter({ tag: '' })} className=\"TagHeader-drop\">\n      {cache ? (\n        <FormattedMessage\n          tagName=\"h3\"\n          {...messages.title}\n          values={{\n            tag: filter.tag,\n            pencils: (\n              <FormattedMessage {...appMessages.pencil} values={{ count: cache.pages.pencils }} />\n            ),\n          }}\n        />\n      ) : (\n        'x'\n      )}\n    </button>\n  )\n}\n\nexport default TagHeader\n","import { ActionType, createAsyncAction, createReducer } from 'typesafe-actions'\nimport { getRequestStatus } from '../../modules/requestStatus'\nimport { TaxonomyAppStore as StoreTaxonomy, TaxonomyResponse } from './Taxonomy.interface'\n\nexport const requestTaxonomy = createAsyncAction(\n  'taxonomy:pending',\n  'taxonomy:fulfilled',\n  'taxonomy:rejected',\n)<undefined, TaxonomyResponse, undefined>()\n\nconst initialState: StoreTaxonomy = {\n  requestStatus: getRequestStatus().idle,\n  pencilCount: 0,\n\n  countries: [],\n  tags: [],\n}\n\nconst actions = { requestTaxonomy }\ntype Actions = ActionType<typeof actions>\n\nexport default createReducer<StoreTaxonomy, Actions>(initialState)\n  .handleAction(requestTaxonomy.request, state => ({\n    ...state,\n    requestStatus: getRequestStatus().pending,\n  }))\n  .handleAction(requestTaxonomy.success, (state, { payload }) => ({\n    ...state,\n    countries: payload.taxonomy.countries,\n    requestStatus: getRequestStatus().fulfilled,\n    tags: payload.taxonomy.tags,\n    pencilCount: payload.meta.pencils,\n  }))\n  .handleAction(requestTaxonomy.failure, state => ({\n    ...state,\n    requestStatus: getRequestStatus().rejected,\n  }))\n","import React, { SFC, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { requestTaxonomy } from './Taxonomy.actions'\nimport { useTaxonomyRequestStatus } from './Taxonomy.hooks'\nimport { TaxonomyProps } from './Taxonomy.interface'\n\nconst Taxonomy: SFC<TaxonomyProps> = ({ children }) => {\n  const dispatch = useDispatch()\n  const requestStatus = useTaxonomyRequestStatus()\n\n  useEffect(() => {\n    dispatch(requestTaxonomy.request())\n  }, [dispatch])\n\n  return <>{children({ requestStatus })}</>\n}\n\nexport default Taxonomy\n","import { ActionsObservable, combineEpics, ofType } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { catchError, map, mergeMap } from 'rxjs/operators'\nimport { ActionType, getType } from 'typesafe-actions'\nimport { requestTaxonomy } from './Taxonomy.actions'\nimport { apiRequestTaxonomy } from './Taxonomy.api'\n\nexport default combineEpics(\n  (action$: ActionsObservable<ActionType<typeof requestTaxonomy.request>>) =>\n    action$.pipe(\n      ofType(getType(requestTaxonomy.request)),\n      mergeMap(() =>\n        from(apiRequestTaxonomy()).pipe(\n          map(requestTaxonomy.success),\n          catchError(() => of(requestTaxonomy.failure())),\n        ),\n      ),\n    ),\n)\n","import apiRequest from '../../modules/api'\nimport { TaxonomyResponse } from './Taxonomy.interface'\n\nexport const apiRequestTaxonomy = () => apiRequest<TaxonomyResponse>('/taxonomy/')\n","import React, { Fragment } from 'react'\nimport { addLocaleData, IntlProvider } from 'react-intl'\nimport ru from 'react-intl/locale-data/ru'\nimport { BrowserRouter } from 'react-router-dom'\nimport Filter from '../Filter'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport Gallery from '../Gallery'\nimport Loader from '../Loader'\nimport Map from '../Map'\nimport PencilInfo from '../PencilInfo'\nimport TagHeader from '../PencilInfo/TagHeader'\nimport Taxonomy from '../Taxonomy'\n\naddLocaleData(ru)\n\nconst App: React.FC = () => {\n  const [filter] = useFilter()\n  return (\n    <Taxonomy>\n      {({ requestStatus: { pending, fulfilled, rejected } }) => {\n        if (rejected) {\n          return <b>Не могу загрузить</b>\n        }\n        return pending ? (\n          <div className=\"App-loading\">\n            <Loader />\n          </div>\n        ) : fulfilled ? (\n          <div className=\"App\">\n            <IntlProvider locale=\"ru\" defaultLocale=\"ru\" textComponent={Fragment}>\n              <BrowserRouter>\n                <PencilInfo />\n\n                <section className=\"App-block\">\n                  <Filter />\n                </section>\n\n                {filter.tag ? (\n                  <section className=\"App-block\">\n                    <TagHeader />\n                  </section>\n                ) : (\n                  <Map />\n                )}\n\n                <section className=\"App-block\">\n                  <Gallery />\n                </section>\n              </BrowserRouter>\n            </IntlProvider>\n          </div>\n        ) : null\n      }}\n    </Taxonomy>\n  )\n}\n\nexport default App\n","import { combineEpics } from 'redux-observable'\nimport { pencilEpic } from './components/Pencil'\nimport { taxonomyEpic } from './components/Taxonomy'\n\nconst rootEpic = combineEpics(taxonomyEpic, pencilEpic)\n\nexport default rootEpic\n","import { applyMiddleware, combineReducers, createStore, Store } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { createEpicMiddleware } from 'redux-observable'\nimport { filterReducer } from './components/Filter'\nimport { pencilReducer } from './components/Pencil'\nimport { taxonomyReducer } from './components/Taxonomy'\nimport rootEpic from './epics'\n\nconst epicMiddleware = createEpicMiddleware()\nconst rootReducer = combineReducers({\n  taxonomy: taxonomyReducer,\n  pencils: pencilReducer,\n  filter: filterReducer,\n})\nconst store: Store<AppStore> = createStore(\n  rootReducer,\n  {},\n  composeWithDevTools(applyMiddleware(epicMiddleware)),\n)\nepicMiddleware.run(rootEpic)\n\nexport type AppStore = ReturnType<typeof rootReducer>\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport './index.css'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}