{"version":3,"sources":["components/App/App.messages.ts","components/Filter/Filter.utils.ts","components/Filter/Filter.actions.ts","components/Filter/Filter.hooks.ts","components/Filter/Filter.messages.ts","components/Filter/Globe/Globe.tsx","components/Taxonomy/Taxonomy.actions.ts","components/Taxonomy/Taxonomy.hooks.ts","components/Pencil/Pencil.utils.ts","components/Pencil/Pencil.actions.ts","components/Gallery/Gallery.utils.ts","components/Pencil/Pencil.hooks.ts","components/PencilInfo/TagHeader/TagHeader.messages.ts","components/PencilInfo/TagHeader/TagHeader.tsx","components/Filter/Filter.tsx","components/Gallery/Grid/Grid.tsx","components/Gallery/Grid/Grid.utils.ts","components/Gallery/Gallery.tsx","components/Loader/Loader.tsx","components/Map/Map.utils.ts","components/Map/Map.tsx","components/PageTitle/PageTitle.messages.ts","components/PageTitle/PageTitle.tsx","components/PencilInfo/Info/Info.hooks.ts","components/PencilInfo/Info/Info.utils.ts","components/PencilInfo/Info/Info.messages.ts","components/PencilInfo/Info/Info.tsx","components/PencilInfo/PencilInfo.tsx","components/App/App.tsx","appConfig.ts","api.ts","components/Pencil/Pencil.api.ts","components/Pencil/Pencil.epic.ts","components/Taxonomy/Taxonomy.epic.ts","components/Taxonomy/Taxonomy.api.ts","rootEpic.ts","rootReducer.ts","store.ts","index.tsx"],"names":["appMessages","defineMessages","pencil","defaultMessage","id","country","error","mapFilterToQueryString","filter","qs","stringify","pickBy","Boolean","addQueryPrefix","mapQueryStringToFilter","querystring","window","location","search","input","parse","ignoreQueryPrefix","emptyFilter","display","tag","filterKeys","Object","keys","pick","initialState","set","createAction","filterActions","createReducer","handleAction","state","payload","useFilter","useSelector","store","dispatch","useDispatch","dispatchFilter","useCallback","newFilter","isMatch","updateFilter","update","setFilter","title","current","all","Globe","animated","isAnimated","frames","useState","index","setIndex","useEffect","spin","setTimeout","length","clearTimeout","requestTaxonomy","createAsyncAction","taxonomyActions","loading","failure","pencilCount","countries","tags","success","meta","pencils","taxonomy","produce","draft","useTaxonomy","usePencilFlag","normalizedCountries","useCountriesNormalizedBy","countryId","flag","undefined","field","useMemo","mapKeys","mapRequestToCacheId","request","cahceIdParts","query","page","push","join","requestSinglePencil","requestPencilList","pencilActions","cache","data","merge","cacheId","pages","geoIds","ids","map","item","mapPancilsResponseToStore","requestFirstPage","usePencilStore","useNormalizedPencils","usePencilCache","userQuery","currentFilter","mapQueryToCacheId","usePencil","queries","normalized","reduce","acc","total","nextUrl","items","Error","getPencilsFromCacheByQuery","isNotCached","isUndefined","forEach","TagHeader","countryCount","onClick","className","messages","values","count","Filter","cached","intl","useIntl","isFiltered","pencilsInCountry","htmlFor","value","onChange","e","target","key","formatMessage","optionText","name","Grid","size","grid","thumbSrc","preview","fullSrc","photos","classNames","href","preventDefault","alt","src","srcSet","getGridImageSources","Gallery","setQueries","last","document","documentElement","scrollTop","loadNextPage","onScroll","throttle","scrollBottomLine","pageYOffset","innerHeight","body","clientHeight","checkWindowScroll","leading","trailing","addEventListener","removeEventListener","Loader","projection","geoProjection","lambda","phi","PI","Math","sin","t","tan","s","translate","mapWidth","mapHeight","topology","geography","topologies","feature","objects","world","features","geo","pathD","geoPath","Map","normalizedIds","countryFlags","compact","geoId","useCountryFlags","width","height","viewBox","hasPencil","isSelected","includes","data-testid","d","PageTitle","normalizedPencils","normalizedCoutries","countryFlag","pencilFlag","usePseudoClick","stopPropagation","targetElement","tagName","link","getAttribute","filterFromLink","parsed","isEmpty","getFilterFromLink","photo","Info","handlePseudoLink","city","displayPencilLocation","dangerouslySetInnerHTML","__html","content","PencilInfo","scroller","useRef","style","overflow","ref","App","useTaxonomyRequest","history","useHistory","listen","action","useFilerQueryString","locale","defaultLocale","reload","apiUrl","process","appConfig","apiRequest","path","fetch","then","response","ok","json","String","status","catch","console","apiRequestPencilList","pathParts","sanitize","encodeURIComponent","toLowerCase","replace","mapPencilListQueryRequestUrl","pencilEpic","combineEpics","action$","pipe","isActionOf","concatMap","from","mapPencilsingleQueryRequestUrl","catchError","of","taxonomyEpic","mergeMap","rootEpic","rootReducer","combineReducers","epicMiddleware","createEpicMiddleware","createStore","composeWithDevTools","applyMiddleware","run","Intl","PluralRules","require","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4dea32bc.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl'\n\nexport const appMessages = defineMessages({\n  pencil: {\n    defaultMessage: `{count, plural,\n      one {# карандаш}\n      few {# карандаша}\n      many {# карандашей}\n    }`,\n    id: 'App.pencil',\n  },\n\n  country: {\n    defaultMessage: `{count, plural,\n      one {# страны}\n      few {# стран}\n      many {# стран}\n    }`,\n    id: 'App.country',\n  },\n\n  error: {\n    defaultMessage: 'не могу загрузить, попробую перезагрузить страницу',\n    id: 'App.error',\n  },\n})\n","import pick from 'lodash/pick'\nimport pickBy from 'lodash/pickBy'\nimport qs from 'qs'\nimport { Filter } from './Filter.interface'\n\nexport const getEmptyFilter = (): Filter => ({\n  display: '',\n  country: '',\n  tag: '',\n})\n\nexport const mapFilterToQueryString = (filter: Partial<Filter>) =>\n  qs.stringify(pickBy(filter, Boolean), { addQueryPrefix: true })\n\nexport const mapQueryStringToFilter = (querystring = window.location.search): Filter => {\n  const input = qs.parse(querystring, { ignoreQueryPrefix: true })\n  const emptyFilter = getEmptyFilter()\n  const filterKeys = Object.keys(emptyFilter)\n  const filter = pick(input, filterKeys)\n\n  return { ...emptyFilter, ...filter }\n}\n","import { ActionType, createAction, createReducer } from 'typesafe-actions'\nimport { Filter, FilterAppStore } from './Filter.interface'\nimport { mapQueryStringToFilter } from './Filter.utils'\n\nconst initialState: FilterAppStore = mapQueryStringToFilter()\nconst set = createAction('Filter:set')<Filter>()\ntype Actions = ActionType<typeof filterActions>\n\nexport const filterActions = { set }\n\nexport default createReducer<FilterAppStore, Actions>(initialState).handleAction(\n  set,\n  (state, { payload }) => payload,\n)\n","import isMatch from 'lodash/isMatch'\nimport { useCallback, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport { AppStore } from './../../store'\nimport { filterActions } from './Filter.actions'\nimport { Filter } from './Filter.interface'\nimport { mapQueryStringToFilter, mapFilterToQueryString, getEmptyFilter } from './Filter.utils'\n\nexport const useFilter = () => {\n  const filter = useSelector<AppStore, Filter>(store => store.filter)\n  const dispatch = useDispatch()\n\n  const dispatchFilter = useCallback(\n    (newFilter: Filter) => {\n      if (!isMatch(filter, newFilter)) {\n        dispatch(filterActions.set(newFilter))\n      }\n    },\n    [filter, dispatch],\n  )\n\n  const updateFilter = useCallback(\n    (update: Partial<Filter>) => dispatchFilter({ ...filter, ...update }),\n    [dispatchFilter, filter],\n  )\n\n  const setFilter = useCallback(\n    (update: Partial<Filter>) => dispatchFilter({ ...getEmptyFilter(), ...update }),\n    [dispatchFilter],\n  )\n\n  return [\n    filter,\n    {\n      setFilter,\n      updateFilter,\n    },\n  ] as const\n}\n\nexport const useFilerQueryString = () => {\n  const history = useHistory()\n  const [filter, { updateFilter }] = useFilter()\n\n  useEffect(() => {\n    history.push({ search: mapFilterToQueryString(filter) })\n  }, [filter, history])\n\n  useEffect(() => {\n    const unlisten = history.listen(({ search }, action) => {\n      if (action === 'POP') {\n        updateFilter(mapQueryStringToFilter(search))\n      }\n    })\n\n    return unlisten\n  }, [filter, history, updateFilter])\n}\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: `{pencils} из {countries}`,\n    id: 'Filter.title',\n  },\n\n  current: {\n    defaultMessage: `{country}: {pencils}`,\n    id: 'Filter.current',\n  },\n\n  all: {\n    defaultMessage: 'Все страны',\n    id: 'Filter.all',\n  },\n})\n","import React, { useEffect, useState } from 'react'\nimport { GlobeProps } from './Globe.interface'\n\nconst Globe = ({ animated }: GlobeProps) => {\n  const isAnimated = Boolean(animated)\n  const frames = ['🌍', '🌏', '🌎']\n  const speed = 400\n  const [index, setIndex] = useState(0)\n  useEffect(() => {\n    if (isAnimated) {\n      const spin = setTimeout(() => {\n        const nextIndex = index + 1 === frames.length ? 0 : index + 1\n        setIndex(nextIndex)\n      }, speed)\n\n      return () => {\n        clearTimeout(spin)\n      }\n    }\n  }, [isAnimated, speed, index, setIndex, frames])\n\n  return <>{frames[index]}</>\n}\n\nexport default Globe\n","import { ActionType, createAsyncAction, createReducer } from 'typesafe-actions'\nimport produce from 'immer'\nimport { TaxonomyAppStore as StoreTaxonomy, TaxonomyResponse } from './Taxonomy.interface'\n\nconst requestTaxonomy = createAsyncAction(\n  'Taxonomy:loading',\n  'Taxonomy:success',\n  'Taxonomy:failure',\n)<undefined, TaxonomyResponse, undefined>()\n\nconst getInitialTaxonomyState = (): StoreTaxonomy => ({\n  loading: true,\n  failure: false,\n  pencilCount: 0,\n  countries: [],\n  tags: [],\n})\n\nexport const taxonomyActions = { requestTaxonomy }\nexport type TaxonomyActions = ActionType<typeof taxonomyActions>\n\nexport default createReducer<StoreTaxonomy, TaxonomyActions>(getInitialTaxonomyState())\n  .handleAction(requestTaxonomy.success, (state, { payload }) => ({\n    loading: false,\n    failure: false,\n    pencilCount: payload.meta.pencils,\n    countries: payload.taxonomy.countries,\n    tags: payload.taxonomy.tags,\n  }))\n  .handleAction(requestTaxonomy.failure, state =>\n    produce(state, draft => {\n      draft.loading = false\n      draft.failure = true\n    }),\n  )\n","import compact from 'lodash/compact'\nimport mapKeys from 'lodash/mapKeys'\nimport { useMemo, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Pencil, PencilCountry } from './../Pencil/Pencil.interface'\nimport { TaxonomyAppStore } from './Taxonomy.interface'\nimport { taxonomyActions } from './Taxonomy.actions'\nimport { AppStore } from '../../store'\n\nexport const useTaxonomy = () => useSelector<AppStore, TaxonomyAppStore>(store => store.taxonomy)\n\nexport const useTaxonomyRequest = () => {\n  const dispatch = useDispatch()\n  const { loading, failure } = useTaxonomy()\n\n  useEffect(() => {\n    dispatch(taxonomyActions.requestTaxonomy.request())\n  }, [dispatch])\n\n  return { loading, failure }\n}\n\nexport const usePencilFlag = (pencil?: Pencil) => {\n  const normalizedCountries = useCountriesNormalizedBy('id')\n  const countryId = pencil?.country.id\n\n  return countryId ? normalizedCountries[countryId]?.flag : undefined\n}\n\nexport const useCountryFlags = (geoIds: string[]) => {\n  const normalizedCountries = useCountriesNormalizedBy('id')\n\n  return compact(geoIds.map(geoId => normalizedCountries[geoId]?.flag))\n}\n\nexport const useCountriesNormalizedBy = <K extends keyof PencilCountry>(\n  field: K,\n): Partial<Record<string, PencilCountry>> => {\n  const { countries } = useTaxonomy()\n\n  return useMemo(() => mapKeys(countries, field), [countries, field])\n}\n","import mapKeys from 'lodash/mapKeys'\nimport {\n  Pencil,\n  PencilCache,\n  PencilCacheItem,\n  PencilListResponse,\n  PencilPages,\n  PencilQuery,\n  PencilRequest,\n  PencilSingleRequest,\n  PencilsNormalized,\n  PencilAppStore,\n} from './Pencil.interface'\n\nconst getEmptyPencilCacheItem = (): PencilCacheItem => ({\n  ids: [],\n  geoIds: [],\n  pages: {\n    page: 0,\n    total: 0,\n    nextUrl: null,\n    items: 0,\n    pencils: 0,\n  },\n})\n\nexport const mapPencilsingleQueryRequestUrl = ({ id }: PencilSingleRequest): string =>\n  `/pencil/${id}/`\n\nexport const mapPencilListQueryRequestUrl = ({ page, tag, country }: PencilQuery): string => {\n  const pathParts: string[] = []\n  const sanitize = (input: string) => encodeURIComponent(input.toLowerCase().replace(/\\s/g, '-'))\n\n  if (tag && country) {\n    throw new Error('no tag and country at the same time')\n  }\n\n  if (tag) {\n    pathParts.push(`/tags/${sanitize(tag)}`)\n  }\n  if (country) {\n    pathParts.push(`/countries/${sanitize(country)}`)\n  }\n  if (page && page !== 1) {\n    pathParts.push(`/page/${page}`)\n  }\n\n  return `${pathParts.join('/')}/`\n}\n\nexport const mapRequestToCacheId = (request: PencilRequest): string => {\n  const cahceIdParts: string[] = ['_']\n  if (request.id) {\n    return `id:${request.id}`\n  } else if (request.query) {\n    const { page, tag, country } = request.query\n    if (page) {\n      cahceIdParts.push(`p:${page}`)\n    }\n    if (tag) {\n      cahceIdParts.push(`t:${tag}`)\n    }\n    if (country) {\n      cahceIdParts.push(`c:${country}`)\n    }\n  }\n\n  return cahceIdParts.join('|')\n}\n\nexport const mapPancilsResponseToStore = ({\n  cacheId,\n  pages,\n  data: pencils,\n  geoIds,\n}: PencilListResponse): PencilAppStore => {\n  const ids = pencils.map(({ id }) => id)\n  const data = mapKeys(pencils, item => item.id)\n\n  return { data, cache: { [cacheId]: { ids, pages, geoIds } } }\n}\n\nexport const getNextPageNumberFromPages = (pages?: PencilPages) => {\n  if (pages) {\n    if (pages.page < pages.total) {\n      return pages.page + 1\n    }\n  }\n\n  return null\n}\n\nexport const getPencilsFromCacheByQuery = (\n  query: PencilQuery,\n  cache: Partial<PencilCache>,\n  normalized: PencilsNormalized,\n): Pencil[] => {\n  const pencilCache: PencilCacheItem =\n    cache[mapRequestToCacheId({ query })] || getEmptyPencilCacheItem()\n  const pencils = pencilCache.ids.map(id => {\n    const data = normalized[id]\n    if (!data) {\n      throw new Error(`no cache for id ${id}`)\n    }\n\n    return data\n  })\n\n  return pencils\n}\n","import { ActionType, createAsyncAction, createReducer } from 'typesafe-actions'\nimport produce from 'immer'\nimport merge from 'lodash/merge'\nimport {\n  PencilAppStore,\n  PencilListResponse,\n  PencilSingleRequest,\n  PencilSingleResponse,\n  PencilsListRequest,\n} from './Pencil.interface'\nimport { mapPancilsResponseToStore } from './Pencil.utils'\n\nconst getInitialPencilState = (): PencilAppStore => ({\n  cache: {},\n  data: {},\n})\n\nconst requestSinglePencil = createAsyncAction(\n  'Pencil/single:loading',\n  'Pencil/single:success',\n  'Pencil/single:failure',\n)<PencilSingleRequest, PencilSingleResponse, undefined>()\n\nconst requestPencilList = createAsyncAction(\n  'Pencil/list:loading',\n  'Pencil/list:success',\n  'Pencil/list:failure',\n)<PencilsListRequest, PencilListResponse, undefined>()\n\nexport const pencilActions = { requestPencilList, requestSinglePencil }\nexport type PencilActions = ActionType<typeof pencilActions>\n\nexport default createReducer<PencilAppStore, PencilActions>(getInitialPencilState())\n  .handleAction(requestPencilList.success, (state, { payload }) =>\n    produce(state, draft => {\n      merge(draft, mapPancilsResponseToStore(payload))\n    }),\n  )\n  .handleAction(requestSinglePencil.success, (state, { payload }) =>\n    produce(state, draft => {\n      draft.data[payload.id] = payload\n    }),\n  )\n","import { PencilQuery } from '../Pencil/Pencil.interface'\n\nexport const requestFirstPage = (query: PencilQuery): PencilQuery => ({ ...query, page: 1 })\n\nexport const checkFinishZone = (total: number, current: number) => {\n  const sensivity = total * 0.6\n  const thresholdReached = sensivity < current\n\n  return thresholdReached\n}\n\nexport const checkWindowScroll = () => {\n  const scrollBottomLine = window.pageYOffset + window.innerHeight\n\n  return checkFinishZone(document.body.clientHeight, scrollBottomLine)\n}\n","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { isUndefined } from 'util'\nimport { pencilActions } from './Pencil.actions'\nimport { Pencil, PencilAppStore, PencilProps, PencilQuery } from './Pencil.interface'\nimport {\n  getPencilsFromCacheByQuery,\n  mapRequestToCacheId,\n  mapRequestToCacheId as mapQueryToCacheId,\n} from './Pencil.utils'\nimport { AppStore } from '../../store'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { requestFirstPage } from '../Gallery/Gallery.utils'\n\nconst usePencilStore = () => useSelector<AppStore, PencilAppStore>(store => store.pencils)\n\nexport const useNormalizedPencils = () => usePencilStore().data\n\nexport const usePencilCache = (userQuery?: PencilQuery) => {\n  const [currentFilter] = useFilter()\n  const { cache } = usePencilStore()\n\n  const filter = userQuery || currentFilter\n  const query = (filter?.page ?? 0) > 1 ? filter : requestFirstPage(filter)\n  const queryCacheId = mapQueryToCacheId({ query })\n  const cacheItem = cache[queryCacheId]\n\n  return cacheItem\n}\n\nexport const usePencil = ({ id, query, queries }: PencilProps) => {\n  const dispatch = useDispatch()\n  const { cache } = usePencilStore()\n  const normalized = useNormalizedPencils()\n  const pencil = id ? normalized[id] : undefined\n  const targetQueries = query ? [query] : queries ? queries : []\n  const pencils = targetQueries.reduce<Pencil[]>(\n    (acc, query) => [...acc, ...getPencilsFromCacheByQuery(query, cache, normalized)],\n    [],\n  )\n\n  useEffect(() => {\n    const isNotCached = (query: PencilQuery) => isUndefined(cache[mapRequestToCacheId({ query })])\n    if (id && !pencil) {\n      dispatch(pencilActions.requestSinglePencil.request({ id }))\n    } else if (query && isNotCached(query)) {\n      dispatch(pencilActions.requestPencilList.request({ query }))\n    } else if (queries) {\n      queries.filter(isNotCached).forEach(query => {\n        dispatch(pencilActions.requestPencilList.request({ query }))\n      })\n    }\n  }, [dispatch, id, query, queries, pencil, cache])\n\n  return { pencil, pencils }\n}\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: '🏷 {pencilCount} из {countryCount} в категории \"{tag}\"',\n    id: 'TagHeader.title',\n  },\n})\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport messages from './TagHeader.messages'\nimport { appMessages } from '../../App/App.messages'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { usePencilCache } from '../../Pencil/Pencil.hooks'\n\nconst TagHeader = () => {\n  const [{ tag }, { updateFilter }] = useFilter()\n  const cache = usePencilCache()\n\n  if (tag && cache) {\n    const pencilCount = cache.pages.pencils\n    const countryCount = cache.geoIds.length\n\n    return (\n      <button onClick={() => updateFilter({ tag: '' })} className=\"TagHeader-drop\">\n        <FormattedMessage\n          {...messages.title}\n          values={{\n            tag,\n            pencilCount: (\n              <FormattedMessage {...appMessages.pencil} values={{ count: pencilCount }} />\n            ),\n            countryCount: (\n              <FormattedMessage {...appMessages.country} values={{ count: countryCount }} />\n            ),\n          }}\n        />\n      </button>\n    )\n  }\n\n  return null\n}\n\nexport default TagHeader\n","import React from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { useFilter } from './Filter.hooks'\nimport messages from './Filter.messages'\nimport Globe from './Globe'\nimport { useTaxonomy } from '../Taxonomy/Taxonomy.hooks'\nimport { usePencilCache } from '../Pencil/Pencil.hooks'\nimport { appMessages } from '../App/App.messages'\nimport TagHeader from '../PencilInfo/TagHeader'\n\nconst Filter = () => {\n  const [filter, { updateFilter, setFilter }] = useFilter()\n  const { countries, pencilCount } = useTaxonomy()\n  const cached = usePencilCache()\n  const intl = useIntl()\n\n  const isFiltered = Boolean(filter.country || filter.tag)\n  const pencilsInCountry = cached?.pages.pencils\n  const htmlFor = 'country-filter'\n\n  return (\n    <div className=\"Filter\">\n      <div className=\"Filter-control\">\n        <label\n          htmlFor={htmlFor}\n          className=\"Filter-label\"\n          onClick={() => {\n            if (isFiltered) {\n              updateFilter({ country: '' })\n            }\n          }}\n        >\n          <span className=\"Filter-Globe\">\n            <Globe animated={isFiltered} />\n          </span>\n          <FormattedMessage\n            {...messages.title}\n            values={{\n              pencils: (\n                <span className=\"Filter-span\">\n                  <FormattedMessage {...appMessages.pencil} values={{ count: pencilCount }} />\n                </span>\n              ),\n              countries: (\n                <span className=\"Filter-span\">\n                  <FormattedMessage {...appMessages.country} values={{ count: countries.length }} />\n                </span>\n              ),\n            }}\n          />\n        </label>\n      </div>\n      <div className=\"Filter-control\">\n        <select\n          id={htmlFor}\n          className=\"Filter-select\"\n          value={filter.country}\n          onChange={e => setFilter({ country: e.target.value })}\n        >\n          <option key=\"empty-country\" value=\"\">\n            {intl.formatMessage(messages.all)}\n          </option>\n          {countries.map(country => {\n            const isCurrent = filter.country === country.name\n            const optionText =\n              isCurrent && pencilsInCountry\n                ? intl.formatMessage(messages.current, {\n                    country: country.name,\n                    pencils: intl.formatMessage(appMessages.pencil, {\n                      count: pencilsInCountry,\n                    }),\n                  })\n                : country.name\n\n            return (\n              <option key={country.name} value={country.name}>\n                {`${country.flag} ${optionText}`}\n              </option>\n            )\n          })}\n        </select>\n      </div>\n\n      {filter.tag ? (\n        <div className=\"Filter-control\">\n          <TagHeader />\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nexport default Filter\n","import classNames from 'classnames'\nimport React from 'react'\nimport { GridProps } from './Grid.interface'\nimport { getGridImageSources } from './Grid.utils'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { mapFilterToQueryString } from '../../Filter/Filter.utils'\n\nconst Grid = ({ pencils }: GridProps) => {\n  const [, { updateFilter }] = useFilter()\n\n  return (\n    <div className=\"Grid\">\n      {pencils.map(pencil => {\n        const size = pencil.grid\n        const thumbSrc = pencil.preview\n        const fullSrc = pencil.photos[0]\n        const className = classNames('GridItem', size === 2 && 'size2', size === 3 && 'size3')\n        const onClick = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n          e.preventDefault()\n          updateFilter({ display: pencil.id })\n        }\n\n        return (\n          <a\n            href={mapFilterToQueryString({ display: pencil.id })}\n            onClick={onClick}\n            className={className}\n            key={pencil.id}\n            title={pencil.title}\n          >\n            <img\n              alt={pencil.title}\n              loading=\"lazy\"\n              {...getGridImageSources(size, fullSrc, thumbSrc)}\n            />\n          </a>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Grid\n","import { ImgHTMLAttributes } from 'react'\nimport { PencilGridSize } from '../../Pencil/Pencil.interface'\n\nexport const getGridImageSources = (\n  size: PencilGridSize,\n  fullSrc: string,\n  thumbSrc: string,\n): ImgHTMLAttributes<{}> => {\n  switch (size) {\n    case 3:\n      return { src: fullSrc }\n\n    case 2:\n      return { src: thumbSrc, srcSet: `${thumbSrc}, ${fullSrc} 2x` }\n\n    default:\n      return { src: thumbSrc }\n  }\n}\n","import last from 'lodash/last'\nimport throttle from 'lodash/throttle'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { checkWindowScroll, requestFirstPage } from './Gallery.utils'\nimport Grid from './Grid'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { usePencilCache, usePencil } from '../Pencil/Pencil.hooks'\nimport { PencilQuery } from '../Pencil/Pencil.interface'\nimport { getNextPageNumberFromPages } from '../Pencil/Pencil.utils'\n\nconst Gallery = () => {\n  const [filter] = useFilter()\n  const [queries, setQueries] = useState<PencilQuery[]>([])\n  const { pencils } = usePencil({ queries })\n  const cached = usePencilCache(last(queries))\n  const { country, tag } = filter\n  const page = getNextPageNumberFromPages(cached?.pages)\n\n  useEffect(() => {\n    setQueries([requestFirstPage({ country, tag })])\n    document.documentElement.scrollTop = 0\n  }, [country, tag])\n\n  const loadNextPage = useCallback(() => {\n    if (page) {\n      setQueries([...queries, { ...filter, page }])\n    }\n  }, [filter, queries, setQueries, page])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const onScroll = useCallback(\n    throttle(\n      () => {\n        if (page && checkWindowScroll()) {\n          loadNextPage()\n        }\n      },\n      100,\n      { leading: false, trailing: false },\n    ),\n    [loadNextPage],\n  )\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll)\n\n    return () => {\n      window.removeEventListener('scroll', onScroll)\n    }\n  }, [onScroll])\n\n  return <Grid pencils={pencils} />\n}\n\nexport default Gallery\n","import React from 'react'\nimport Globe from '../Filter/Globe'\n\nconst Loader = () => (\n  <div className=\"Loader\">\n    <Globe animated />\n  </div>\n)\n\nexport default Loader\n","import { geoPath, GeoRawProjection } from 'd3-geo'\nimport { geoProjection } from 'd3-geo'\nimport { FeatureCollection, GeoJsonProperties, Geometry } from 'geojson'\nimport { feature } from 'topojson-client'\nimport { Topology } from 'topojson-specification'\nimport { TopologyItem } from './Map.interface.js'\nimport geography from './world.json'\n\n// TODO: how to get the type properly?\n\nexport const mapWidth = 800\nexport const mapHeight = 400\n\nconst timesRaw: GeoRawProjection = (lambda, phi) => {\n  // https://github.com/d3/d3-geo-projection/blob/master/src/times.js\n  const { PI, sin, tan } = Math\n  const t = tan(phi / 2)\n  const quarterPi = PI / 4\n  const s = sin(quarterPi * t)\n\n  return [lambda * (0.74482 - 0.34588 * s * s), 1.70711 * t]\n}\n\nconst projection = geoProjection(timesRaw).translate([mapWidth / 2, mapHeight / 2 + 40])\nconst topology: Topology = geography as any\nconst featureCollection = feature(topology, topology.objects.world) as FeatureCollection<\n  Geometry,\n  GeoJsonProperties\n>\n\nexport const topologies = featureCollection.features.map<TopologyItem>(geo => {\n  const pathD = geoPath().projection(projection)(geo)\n  if (pathD === null) {\n    throw new Error()\n  }\n\n  return { ...geo, pathD }\n})\n","import classNames from 'classnames'\nimport isUndefined from 'lodash/isUndefined'\nimport React from 'react'\nimport { mapHeight, mapWidth, topologies } from './Map.utils'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { usePencilCache } from '../Pencil/Pencil.hooks'\nimport { useCountriesNormalizedBy, useCountryFlags } from '../Taxonomy/Taxonomy.hooks'\n\nconst Map = () => {\n  const [, { setFilter, updateFilter }] = useFilter()\n  const normalizedIds = useCountriesNormalizedBy('id')\n  const cached = usePencilCache()\n  const geoIds = cached?.geoIds ?? []\n  const countryFlags = useCountryFlags(geoIds)\n\n  return (\n    <div className=\"Map\">\n      <div className=\"Map-flags\">\n        {countryFlags.map(flag => (\n          <span key={flag}>{flag}</span>\n        ))}\n      </div>\n      <svg\n        width={mapWidth}\n        height={mapHeight}\n        viewBox={`0 0 ${mapWidth} ${mapHeight}`}\n        className=\"Map-block\"\n      >\n        {topologies.map(topology => {\n          const geoId = topology.id as string\n          const country = geoId ? normalizedIds[geoId]?.name : undefined\n          const hasPencil = !isUndefined(country)\n          const isSelected = geoIds.includes(geoId)\n          const className = classNames(\n            'Map-country',\n            hasPencil && 'Map-has-pencil',\n            isSelected && 'Map-selected',\n          )\n          const onClick = () => {\n            if (isSelected) {\n              updateFilter({ country: '' })\n            } else if (country) {\n              setFilter({ country })\n            }\n          }\n\n          return (\n            <path\n              data-testid={geoId}\n              key={geoId}\n              className={className}\n              d={topology.pathD}\n              onClick={onClick}\n            >\n              {country && <title>{country}</title>}\n            </path>\n          )\n        })}\n      </svg>\n    </div>\n  )\n}\n\nexport default Map\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: 'В коробке с карандашами',\n    id: 'PageTitle.title',\n  },\n\n  pencil: {\n    defaultMessage: '{pencilFlag} {title}, {country}',\n    id: 'PageTitle.pencil',\n  },\n\n  country: {\n    defaultMessage: '{countryFlag} {country}. {pencils}',\n    id: 'PageTitle.country',\n  },\n})\n","import { useEffect } from 'react'\nimport { useIntl } from 'react-intl'\nimport messages from './PageTitle.messages'\nimport { appMessages } from '../App/App.messages'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { usePencilCache, useNormalizedPencils } from '../Pencil/Pencil.hooks'\nimport { useCountriesNormalizedBy, usePencilFlag } from '../Taxonomy/Taxonomy.hooks'\n\nconst PageTitle = () => {\n  const [filter] = useFilter()\n  const cached = usePencilCache()\n  const intl = useIntl()\n  const normalizedPencils = useNormalizedPencils()\n  const normalizedCoutries = useCountriesNormalizedBy('name')\n  const pencil = normalizedPencils[filter.display]\n  const countryFlag = normalizedCoutries[filter.country]?.flag\n  const pencilFlag = usePencilFlag(pencil)\n  const count = cached?.pages.pencils\n\n  useEffect(() => {\n    if (pencil && pencilFlag) {\n      const { title, country } = pencil\n      document.title = intl.formatMessage(messages.pencil, {\n        title,\n        country: country.name,\n        pencilFlag,\n      })\n    } else if (filter.country && count) {\n      document.title = intl.formatMessage(messages.country, {\n        countryFlag,\n        country: filter.country,\n        pencils: intl.formatMessage(appMessages.pencil, { count }),\n      })\n    } else {\n      document.title = intl.formatMessage(messages.title)\n    }\n  }, [intl, pencil, count, filter, countryFlag, pencilFlag])\n\n  return null\n}\n\nexport default PageTitle\n","import { useCallback } from 'react'\nimport { getFilterFromLink } from './Info.utils'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { getEmptyFilter } from '../../Filter/Filter.utils'\n\nexport const usePseudoClick = () => {\n  const [, { updateFilter }] = useFilter()\n  const handlePseudoLink = useCallback(\n    (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      e.stopPropagation()\n      const targetElement = e.target as HTMLElement\n      if (targetElement.tagName === 'A') {\n        const link = targetElement.getAttribute('href')\n        if (link) {\n          const filterFromLink = getFilterFromLink(link)\n          if (filterFromLink) {\n            e.preventDefault()\n            updateFilter({ ...getEmptyFilter(), ...filterFromLink })\n          }\n        }\n      }\n    },\n    [updateFilter],\n  )\n\n  return handlePseudoLink\n}\n","import isEmpty from 'lodash/isEmpty'\nimport pick from 'lodash/pick'\nimport qs from 'qs'\nimport { Filter } from './../../Filter/Filter.interface'\nimport { getEmptyFilter } from './../../Filter/Filter.utils'\nimport { Pencil } from '../../Pencil/Pencil.interface'\n\nexport const getFilterFromLink = (querystring: string): Filter | null => {\n  const parsed = qs.parse(querystring, { ignoreQueryPrefix: true }) as {}\n  const filterKeys = Object.keys(getEmptyFilter())\n  const filter = pick(parsed, filterKeys) as Filter\n\n  if (!isEmpty(filter)) {\n    return filter\n  }\n\n  return null\n}\n\nexport const displayPencilLocation = ({ country, city }: Pick<Pencil, 'country' | 'city'>) =>\n  [country.name, city].filter(Boolean).join(', ')\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  photo: {\n    defaultMessage: '{count, number} фото',\n    id: 'Info.photo',\n  },\n})\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { usePseudoClick } from './Info.hooks'\nimport { InfoProps } from './Info.interface'\nimport messages from './Info.messages'\nimport { displayPencilLocation } from './Info.utils'\nimport { usePencilFlag } from '../../Taxonomy/Taxonomy.hooks'\nimport { mapFilterToQueryString } from '../../Filter/Filter.utils'\n\nconst Info = ({ pencil }: InfoProps) => {\n  const flag = usePencilFlag(pencil)\n  const handlePseudoLink = usePseudoClick()\n  const location = displayPencilLocation(pencil)\n\n  return (\n    <div className=\"Info\">\n      <div className=\"Info-content\" onClick={handlePseudoLink}>\n        <h1>{pencil.title}</h1>\n\n        <h2>\n          {flag} {location}\n        </h2>\n\n        <article dangerouslySetInnerHTML={{ __html: pencil.content }} />\n\n        <p>\n          <FormattedMessage\n            tagName=\"b\"\n            {...messages.photo}\n            values={{ count: pencil.photos.length }}\n          />\n        </p>\n      </div>\n\n      {pencil.photos.map(src => (\n        <div key={src} className=\"Info-frame\">\n          <img className=\"Info-photo\" alt={pencil.title} src={src} />\n        </div>\n      ))}\n\n      <div className=\"Info-content\" onClick={handlePseudoLink}>\n        <article className=\"Info-tags\">\n          🏷\n          {pencil.tags.map(tag => (\n            <a className=\"Info-tag\" key={tag} href={mapFilterToQueryString({ tag })}>\n              {tag}\n            </a>\n          ))}\n        </article>\n      </div>\n    </div>\n  )\n}\n\nexport default Info\n","import React, { useEffect, useRef } from 'react'\nimport Info from './Info'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { usePencil } from '../Pencil/Pencil.hooks'\n\nconst PencilInfo = () => {\n  const [{ display }, { updateFilter }] = useFilter()\n  const scroller = useRef<HTMLDivElement>(null)\n  const { pencil } = usePencil({ id: display })\n\n  useEffect(() => {\n    if (display === '') {\n      document.body.style.overflow = 'initial'\n    } else {\n      document.body.style.overflow = 'hidden'\n\n      if (scroller.current) {\n        scroller.current.scrollTop = 0\n      }\n    }\n  }, [display, scroller])\n\n  return pencil ? (\n    <div\n      className=\"PencilInfo-backdrop\"\n      onClick={() => updateFilter({ display: '' })}\n      ref={scroller}\n    >\n      <div className=\"PencilInfo-content\">\n        <Info pencil={pencil} />\n      </div>\n    </div>\n  ) : null\n}\n\nexport default PencilInfo\n","import React from 'react'\nimport { FormattedMessage, IntlProvider } from 'react-intl'\nimport { appMessages } from './App.messages'\nimport Filter from '../Filter'\nimport { useFilerQueryString } from '../Filter/Filter.hooks'\nimport Gallery from '../Gallery'\nimport Loader from '../Loader'\nimport Map from '../Map'\nimport PageTitle from '../PageTitle'\nimport PencilInfo from '../PencilInfo'\nimport { useTaxonomyRequest } from '../Taxonomy/Taxonomy.hooks'\n\nconst App = () => {\n  const { loading, failure } = useTaxonomyRequest()\n  useFilerQueryString()\n\n  return (\n    <IntlProvider locale=\"ru\" defaultLocale=\"ru\">\n      {loading || failure ? (\n        <div className=\"App-loading\">\n          {loading && <Loader />}\n          {failure && (\n            <button onClick={() => window.location.reload()}>\n              <FormattedMessage {...appMessages.error} />\n            </button>\n          )}\n        </div>\n      ) : (\n        <>\n          <PageTitle />\n          <PencilInfo />\n          <nav className=\"App-block\">\n            <Filter />\n          </nav>\n        </>\n      )}\n      <>\n        <Map />\n        <main className=\"App-block\">\n          <Gallery />\n        </main>\n      </>\n    </IntlProvider>\n  )\n}\n\nexport default App\n","const apiUrl = process.env.REACT_APP_API_URL\nif (!apiUrl) {\n  throw new Error('no api url')\n}\n\nconst appConfig = {\n  apiUrl,\n}\n\nexport default appConfig\n","import appConfig from './appConfig'\n\nconst apiRequest = <T>(path: string): Promise<T> =>\n  fetch(appConfig.apiUrl + path)\n    .then(response => {\n      if (response.ok) {\n        return response.json()\n      }\n\n      throw new Error(String(response.status))\n    })\n    .catch(error => {\n      console.error('api', path, error)\n      throw error\n    })\n\nexport default apiRequest\n","import {\n  PencilListResponse,\n  PencilSingleRequest,\n  PencilSingleResponse,\n  PencilsListRequest,\n} from './Pencil.interface'\nimport {\n  mapPencilListQueryRequestUrl,\n  mapPencilsingleQueryRequestUrl,\n  mapRequestToCacheId,\n} from './Pencil.utils'\nimport apiRequest from '../../api'\n\nexport const apiRequestSinglePencil = (request: PencilSingleRequest) =>\n  apiRequest<PencilSingleResponse>(mapPencilsingleQueryRequestUrl(request))\n\nexport const apiRequestPencilList = (request: PencilsListRequest) =>\n  apiRequest<PencilListResponse>(mapPencilListQueryRequestUrl(request.query)).then(data => {\n    data.cacheId = mapRequestToCacheId(request)\n\n    return data\n  })\n","import { Epic, combineEpics } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { catchError, filter, map, concatMap } from 'rxjs/operators'\nimport { isActionOf } from 'typesafe-actions'\nimport { PencilActions, pencilActions } from './Pencil.actions'\nimport { apiRequestPencilList, apiRequestSinglePencil } from './Pencil.api'\nimport { filterActions } from '../Filter/Filter.actions'\nimport { getEmptyFilter } from '../Filter/Filter.utils'\n\nconst pencilEpic: Epic<PencilActions> = combineEpics(\n  action$ =>\n    action$.pipe(\n      filter(isActionOf(pencilActions.requestSinglePencil.request)),\n      concatMap(({ payload }) =>\n        from(apiRequestSinglePencil(payload)).pipe(\n          map(pencilActions.requestSinglePencil.success),\n          catchError(() =>\n            of(filterActions.set(getEmptyFilter()), pencilActions.requestSinglePencil.failure()),\n          ),\n        ),\n      ),\n    ),\n\n  action$ =>\n    action$.pipe(\n      filter(isActionOf(pencilActions.requestPencilList.request)),\n      concatMap(({ payload }) =>\n        from(apiRequestPencilList(payload)).pipe(\n          map(pencilActions.requestPencilList.success),\n          catchError(() =>\n            of(filterActions.set(getEmptyFilter()), pencilActions.requestPencilList.failure()),\n          ),\n        ),\n      ),\n    ),\n)\nexport default pencilEpic\n","import { Epic } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { catchError, map, mergeMap, filter } from 'rxjs/operators'\nimport { isActionOf } from 'typesafe-actions'\nimport { taxonomyActions, TaxonomyActions } from './Taxonomy.actions'\nimport { apiRequestTaxonomy } from './Taxonomy.api'\n\nconst taxonomyEpic: Epic<TaxonomyActions> = action$ =>\n  action$.pipe(\n    filter(isActionOf(taxonomyActions.requestTaxonomy.request)),\n    mergeMap(() =>\n      from(apiRequestTaxonomy()).pipe(\n        map(taxonomyActions.requestTaxonomy.success),\n        catchError(() => of(taxonomyActions.requestTaxonomy.failure())),\n      ),\n    ),\n  )\n\nexport default taxonomyEpic\n","import { TaxonomyResponse } from './Taxonomy.interface'\nimport apiRequest from '../../api'\n\nexport const apiRequestTaxonomy = () => apiRequest<TaxonomyResponse>('/taxonomy/')\n","import { combineEpics } from 'redux-observable'\nimport { pencilEpic } from './components/Pencil'\nimport { taxonomyEpic } from './components/Taxonomy'\n\nconst rootEpic = combineEpics(taxonomyEpic, pencilEpic)\n\nexport default rootEpic\n","import { combineReducers } from 'redux'\nimport { filterReducer as filter } from './components/Filter'\nimport { pencilReducer as pencils } from './components/Pencil'\nimport { taxonomyReducer as taxonomy } from './components/Taxonomy'\n\nconst rootReducer = combineReducers({ taxonomy, pencils, filter })\n\nexport default rootReducer\n","import { applyMiddleware, createStore, Store } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { createEpicMiddleware } from 'redux-observable'\nimport rootEpic from './rootEpic'\nimport rootReducer from './rootReducer'\n\nconst epicMiddleware = createEpicMiddleware()\nconst store: Store<AppStore> = createStore(\n  rootReducer,\n  {},\n  composeWithDevTools(applyMiddleware(epicMiddleware)),\n)\nepicMiddleware.run(rootEpic)\n\nexport type AppStore = ReturnType<typeof rootReducer>\n\nexport const createTestStore = (initialState?: RecursivePartial<AppStore>) =>\n  createStore(rootReducer, initialState as AppStore)\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './components/App'\nimport './index.css'\nimport store from './store'\n\nif (!Intl.PluralRules) {\n  require('intl-pluralrules')\n}\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}