{"version":3,"sources":["components/App/App.messages.ts","components/Filter/Filter.utils.ts","components/Filter/Filter.actions.ts","components/Filter/Filter.hooks.ts","components/Gallery/Gallery.utils.ts","components/Pencil/Pencil.utils.ts","components/Pencil/Pencil.actions.ts","requestStatus.ts","components/Pencil/Pencil.hooks.ts","components/Taxonomy/Taxonomy.actions.ts","components/Taxonomy/Taxonomy.hooks.ts","components/Filter/Filter.messages.ts","components/Filter/Globe/Globe.tsx","components/Filter/Filter.tsx","components/Gallery/Grid/Grid.tsx","components/Gallery/Gallery.tsx","components/Loader/Loader.tsx","components/Map/Map.utils.ts","components/Map/Map.tsx","components/PageTitle/PageTitle.messages.ts","components/PageTitle/PageTitle.tsx","components/PencilInfo/Info/Info.hooks.ts","components/PencilInfo/Info/Info.utils.ts","components/PencilInfo/Info/Info.messages.ts","components/PencilInfo/Info/Info.tsx","components/PencilInfo/PencilInfo.tsx","components/PencilInfo/TagHeader/TagHeader.messages.ts","components/PencilInfo/TagHeader/TagHeader.tsx","components/App/App.tsx","appConfig.ts","api.ts","components/Pencil/Pencil.api.ts","rootEpic.ts","components/Taxonomy/Taxonomy.epic.ts","components/Taxonomy/Taxonomy.api.ts","components/Pencil/Pencil.epic.ts","rootReducer.ts","store.ts","index.tsx"],"names":["appMessages","defineMessages","pencil","defaultMessage","id","country","error","mapFilterToQueryString","filter","query","qs","stringify","pickBy","Boolean","mapQueryStringToFilter","querystring","window","location","search","input","parse","ignoreQueryPrefix","emptyFilter","display","tag","filterKeys","Object","keys","pick","initialState","updateFilter","createAction","filterActions","createReducer","handleAction","state","payload","useFilter","useSelector","store","dispatch","useDispatch","update","requestFirstPage","page","mapRequestToCacheId","request","cahceIdParts","push","join","requestStatus","idle","pending","fulfilled","rejected","cache","normalized","requestSinglePencil","createAsyncAction","requestPencilList","pencilActions","failure","success","cacheId","pages","data","ids","map","reduce","list","getCacheAndNormilizedFromList","usePencilStore","pencils","usePecnilRequestStatus","useNormalizedPencils","usePencilCache","useCached","userQuery","currentFilter","mapQueryToCacheId","usePencil","queries","undefined","acc","total","nextUrl","items","Error","getPencilsFromCacheByQuery","useEffect","isNotCached","isUndefined","forEach","requestTaxonomy","pencilCount","countries","tags","taxonomyActions","meta","taxonomy","useTaxonomy","useCountriesNormalizedBy","field","useMemo","mapKeys","title","current","all","Globe","animated","isAnimated","frames","useState","index","setIndex","spin","setTimeout","length","clearTimeout","Filter","setFilter","cached","history","useHistory","intl","useIntl","select","useRef","isFiltered","listen","action","className","onClick","focus","messages","values","count","ref","value","onChange","e","target","key","formatMessage","isCurrent","name","flag","Grid","thumbSize","preview","fullSize","photos","useSize","grid","classNames","size2","size3","href","preventDefault","srcSet","alt","src","Gallery","setQueries","last","loadNextPage","useCallback","onScroll","throttle","document","body","clientHeight","pageYOffset","innerHeight","leading","addEventListener","removeEventListener","Loader","topology","featureCollection","feature","objects","world","timesRaw","lambda","phi","PI","Math","sin","t","tan","s","mapWidth","mapHeight","topologies","features","geo","pathD","geoPath","projection","geoProjection","translate","Map","normalizedIds","width","height","viewBox","geoId","hasPencil","isSelected","d","PageTitle","normalizedPencils","normalizedCoutries","usePseudoClick","stopPropagation","targetElement","tagName","link","getAttribute","filterFromLink","queryPart","split","keysFromQuery","isEmpty","getFilterFromLink","photo","Info","usePencilFlag","handlePseudoLink","city","dangerouslySetInnerHTML","__html","content","PencilInfo","scroller","style","overflow","scrollTop","TagHeader","dropTag","App","useTaxonomyRequest","locale","defaultLocale","reload","apiUrl","process","appConfig","apiRequest","path","fetch","then","response","json","catch","console","apiRequestPencilList","pathParts","sanitize","encodeURIComponent","toLowerCase","replace","mapPencilListQueryRequestUrl","rootEpic","combineEpics","action$","pipe","ofType","getType","mergeMap","from","catchError","of","bufferTime","actions","uniqBy","isActionOf","mapPencilsingleQueryRequestUrl","mergeAll","rootReducer","combineReducers","epicMiddleware","createEpicMiddleware","createStore","composeWithDevTools","applyMiddleware","run","Intl","PluralRules","require","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5e9f388c.chunk.js","sourcesContent":["import { defineMessages } from 'react-intl'\n\nexport const appMessages = defineMessages({\n  pencil: {\n    defaultMessage: `{count, plural,\n      one {# карандаш}\n      few {# карандаша}\n      many {# карандашей}\n    }`,\n    id: 'App.pencil',\n  },\n\n  country: {\n    defaultMessage: `{count, plural,\n      one {# страны}\n      few {# стран}\n      many {# стран}\n    }`,\n    id: 'App.country',\n  },\n\n  error: {\n    defaultMessage: 'не могу загрузить',\n    id: 'App.error',\n  },\n})\n","import { pick, pickBy } from 'lodash'\nimport qs from 'qs'\nimport { Filter } from './Filter.interface'\n\nexport const getEmptyFilter = (): Filter => ({\n  display: '',\n  country: '',\n  tag: '',\n})\n\nexport const mapFilterToQueryString = (filter: Partial<Filter>): string => {\n  const query = qs.stringify(pickBy(filter, Boolean))\n  return query ? '?' + query : ''\n}\n\nexport const mapQueryStringToFilter = (querystring = window.location.search): Filter => {\n  const input = qs.parse(querystring, { ignoreQueryPrefix: true })\n  const emptyFilter = getEmptyFilter()\n  const filterKeys = Object.keys(emptyFilter)\n  const filter = pick(input, filterKeys)\n\n  return { ...emptyFilter, ...filter }\n}\n\nexport const getInitialFilter = (): Filter => ({\n  ...getEmptyFilter(),\n  ...mapQueryStringToFilter(),\n})\n","import { ActionType, createAction, createReducer } from 'typesafe-actions'\nimport { Filter, FilterAppStore } from './Filter.interface'\nimport { getInitialFilter } from './Filter.utils'\n\nconst initialState: FilterAppStore = getInitialFilter()\nconst updateFilter = createAction('filter:set')<Partial<Filter>>()\ntype Actions = ActionType<typeof filterActions>\n\nexport const filterActions = { updateFilter }\n\nexport default createReducer<FilterAppStore, Actions>(initialState).handleAction(\n  updateFilter,\n  (state, { payload }) => ({ ...state, ...payload }),\n)\n","import { useDispatch, useSelector } from 'react-redux'\nimport { useCached, useNormalizedPencils } from '../Pencil/Pencil.hooks'\nimport { AppStore } from './../../store'\nimport { filterActions } from './Filter.actions'\nimport { Filter } from './Filter.interface'\n\nexport const useFilter = (): [Filter, (update: Partial<Filter>) => void] => {\n  const filter = useSelector<AppStore, Filter>(store => store.filter)\n  const dispatch = useDispatch()\n  const setFilter = (update: Partial<Filter>) => dispatch(filterActions.updateFilter(update))\n\n  return [filter, setFilter]\n}\n\nexport const useSiblings = (pencilId: string) => {\n  const cache = useCached()\n  const normalized = useNormalizedPencils()\n\n  if (cache) {\n    const currentIndex = cache.ids.findIndex(id => id === pencilId)\n    const prevId = cache.ids[currentIndex - 1]\n    const nextId = cache.ids[currentIndex + 1]\n\n    const prevPencil = normalized[prevId] || null\n    const nextPencil = normalized[nextId] || null\n\n    return [prevPencil, nextPencil]\n  }\n\n  return [null, null]\n}\n","import { PencilQuery } from '../Pencil/Pencil.interface'\n\nexport const requestFirstPage = (query: PencilQuery): PencilQuery => ({ ...query, page: 1 })\n\nexport const checkWindowScroll = () => {\n  const preloadSensivity = document.body.clientHeight * 0.6\n  const scrollBottomLine = window.pageYOffset + window.innerHeight\n  const nearAtBottom = preloadSensivity < scrollBottomLine\n\n  return nearAtBottom\n}\n","import {\n  Pencil,\n  PencilCache,\n  PencilCacheItem,\n  PencilListResponse,\n  PencilPages,\n  PencilQuery,\n  PencilRequest,\n  PencilSingleRequest,\n  PencilsNormalized,\n} from './Pencil.interface'\n\nconst getEmptyPencilCacheItem = (): PencilCacheItem => ({\n  ids: [],\n  pages: {\n    page: 0,\n    total: 0,\n    nextUrl: null,\n    items: 0,\n    pencils: 0,\n  },\n})\n\nexport const mapPencilsingleQueryRequestUrl = ({ id }: PencilSingleRequest): string =>\n  `/pencil/${id}/`\n\nexport const mapPencilListQueryRequestUrl = ({ page, tag, country }: PencilQuery): string => {\n  const pathParts: string[] = []\n  const sanitize = (input: string) => encodeURIComponent(input.toLowerCase().replace(/\\s/g, '-'))\n\n  if (tag && country) {\n    throw new Error('no tag and country at the same time')\n  }\n\n  if (tag) {\n    pathParts.push(`/tags/${sanitize(tag)}`)\n  }\n  if (country) {\n    pathParts.push(`/countries/${sanitize(country)}`)\n  }\n  if (page && page !== 1) {\n    pathParts.push(`/page/${page}`)\n  }\n  return pathParts.join('/') + '/'\n}\n\nexport const mapRequestToCacheId = (request: PencilRequest): string => {\n  const cahceIdParts: string[] = ['_']\n  if (request.id) {\n    return `id:${request.id}`\n  } else if (request.query) {\n    const { page, tag, country } = request.query\n    if (page) {\n      cahceIdParts.push(`p:${page}`)\n    }\n    if (tag) {\n      cahceIdParts.push(`t:${tag}`)\n    }\n    if (country) {\n      cahceIdParts.push(`c:${country}`)\n    }\n  }\n\n  return cahceIdParts.join('|')\n}\n\ninterface CacheAndNormalize {\n  cache: PencilCache\n  normalized: PencilsNormalized\n}\nexport const getCacheAndNormilizedFromList = ({\n  cacheId,\n  pages,\n  data,\n}: PencilListResponse): CacheAndNormalize => {\n  const ids = data.map(({ id }) => id)\n  const normalized = data.reduce((list, pencil) => ({ ...list, [pencil.id]: pencil }), {})\n  return { normalized, cache: { [cacheId]: { ids, pages } } }\n}\n\nexport const getNextPageNumberFromPages = (pages?: PencilPages): number | null => {\n  if (pages) {\n    if (pages.page < pages.total) {\n      return pages.page + 1\n    }\n  }\n\n  return null\n}\n\nexport const getPencilsFromCacheByQuery = (\n  query: PencilQuery,\n  cache: Partial<PencilCache>,\n  normalized: PencilsNormalized,\n): Pencil[] => {\n  const pencilCache: PencilCacheItem =\n    cache[mapRequestToCacheId({ query })] || getEmptyPencilCacheItem()\n  const pencils = pencilCache.ids.map(id => {\n    const data = normalized[id]\n    if (!data) {\n      throw new Error('no cache for id ' + id)\n    }\n    return data\n  })\n\n  return pencils\n}\n","import { ActionType, createAsyncAction, createReducer } from 'typesafe-actions'\nimport { getRequestStatus } from '../../requestStatus'\nimport {\n  PencilAppStore,\n  PencilListResponse,\n  PencilSingleRequest,\n  PencilSingleResponse,\n  PencilsListRequest,\n} from './Pencil.interface'\nimport { getCacheAndNormilizedFromList } from './Pencil.utils'\n\nconst initialState: PencilAppStore = {\n  requestStatus: getRequestStatus().idle,\n  cache: {},\n  normalized: {},\n}\n\nconst requestSinglePencil = createAsyncAction(\n  'pencil-single:pending',\n  'pencil-single:fulfilled',\n  'pencil-single:rejected',\n)<PencilSingleRequest, PencilSingleResponse, undefined>()\n\nconst requestPencilList = createAsyncAction(\n  'pencil-list:pending',\n  'pencil-list:fulfilled',\n  'pencil-list:rejected',\n)<PencilsListRequest, PencilListResponse, undefined>()\n\nexport const pencilActions = { requestPencilList, requestSinglePencil }\ntype Actions = ActionType<typeof pencilActions>\n\nexport default createReducer<PencilAppStore, Actions>(initialState)\n  .handleAction([requestPencilList.request, requestSinglePencil.request], state => ({\n    requestStatus: getRequestStatus().pending,\n    cache: state.cache,\n    normalized: state.normalized,\n  }))\n  .handleAction([requestPencilList.failure, requestSinglePencil.failure], state => ({\n    requestStatus: getRequestStatus().rejected,\n    cache: state.cache,\n    normalized: state.normalized,\n  }))\n  .handleAction(requestPencilList.success, (state, { payload }) => {\n    const { cache, normalized } = getCacheAndNormilizedFromList(payload)\n    return {\n      cache: { ...state.cache, ...cache },\n      normalized: { ...state.normalized, ...normalized },\n      requestStatus: getRequestStatus().fulfilled,\n    }\n  })\n  .handleAction(requestSinglePencil.success, (state, { payload: pencil }) => ({\n    normalized: { ...state.normalized, [pencil.id]: pencil },\n    requestStatus: getRequestStatus().fulfilled,\n    cache: state.cache,\n  }))\n","export interface RequestStatus {\n  idle: boolean\n  pending: boolean\n  fulfilled: boolean\n  rejected: boolean\n}\n\nexport const getRequestStatus = (): Record<keyof RequestStatus, RequestStatus> => ({\n  idle: {\n    idle: true,\n    pending: false,\n    fulfilled: false,\n    rejected: false,\n  },\n  pending: {\n    idle: false,\n    pending: true,\n    fulfilled: false,\n    rejected: false,\n  },\n  fulfilled: {\n    idle: false,\n    pending: false,\n    fulfilled: true,\n    rejected: false,\n  },\n  rejected: {\n    idle: false,\n    pending: false,\n    fulfilled: false,\n    rejected: true,\n  },\n})\n","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { isUndefined } from 'util'\nimport { AppStore } from '../../store'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { requestFirstPage } from '../Gallery/Gallery.utils'\nimport { pencilActions } from './Pencil.actions'\nimport { Pencil, PencilAppStore, PencilProps, PencilQuery } from './Pencil.interface'\nimport {\n  getPencilsFromCacheByQuery,\n  mapRequestToCacheId,\n  mapRequestToCacheId as mapQueryToCacheId,\n} from './Pencil.utils'\n\nconst usePencilStore = () => useSelector<AppStore, PencilAppStore>(store => store.pencils)\n\nexport const usePecnilRequestStatus = () => usePencilStore().requestStatus\nexport const useNormalizedPencils = () => usePencilStore().normalized\nexport const usePencilCache = () => usePencilStore().cache\n\nexport const useCached = (userQuery?: PencilQuery) => {\n  const [currentFilter] = useFilter()\n  const cache = usePencilCache()\n\n  const filter = userQuery || currentFilter\n  const query = (filter?.page ?? 0) > 1 ? filter : requestFirstPage(filter)\n  const queryCacheId = mapQueryToCacheId({ query })\n  const cacheItem = cache[queryCacheId]\n\n  return cacheItem\n}\n\nexport const usePencil = ({ id, query, queries }: PencilProps) => {\n  const dispatch = useDispatch()\n  const requestStatus = usePecnilRequestStatus()\n  const cache = usePencilCache()\n  const normalized = useNormalizedPencils()\n  const pencil = id ? normalized[id] : undefined\n  const targetQueries = query ? [query] : queries ? queries : []\n  const pencils = targetQueries.reduce<Pencil[]>(\n    (acc, query) => [...acc, ...getPencilsFromCacheByQuery(query, cache, normalized)],\n    [],\n  )\n\n  useEffect(() => {\n    const isNotCached = (query: PencilQuery) => isUndefined(cache[mapRequestToCacheId({ query })])\n    if (id && !pencil) {\n      dispatch(pencilActions.requestSinglePencil.request({ id }))\n    } else if (query && isNotCached(query)) {\n      dispatch(pencilActions.requestPencilList.request({ query }))\n    } else if (queries) {\n      queries.filter(isNotCached).forEach(query => {\n        dispatch(pencilActions.requestPencilList.request({ query }))\n      })\n    }\n  }, [dispatch, id, query, queries, pencil, cache])\n\n  return { requestStatus, pencil, pencils }\n}\n","import { ActionType, createAsyncAction, createReducer } from 'typesafe-actions'\nimport { getRequestStatus } from '../../requestStatus'\nimport { TaxonomyAppStore as StoreTaxonomy, TaxonomyResponse } from './Taxonomy.interface'\n\nconst requestTaxonomy = createAsyncAction(\n  'taxonomy:pending',\n  'taxonomy:fulfilled',\n  'taxonomy:rejected',\n)<undefined, TaxonomyResponse, undefined>()\n\nconst initialState: StoreTaxonomy = {\n  requestStatus: getRequestStatus().idle,\n  pencilCount: 0,\n  countries: [],\n  tags: [],\n}\n\nexport const taxonomyActions = { requestTaxonomy }\ntype Actions = ActionType<typeof taxonomyActions>\n\nexport default createReducer<StoreTaxonomy, Actions>(initialState)\n  .handleAction(requestTaxonomy.request, state => ({\n    requestStatus: getRequestStatus().pending,\n    pencilCount: state.pencilCount,\n    countries: state.countries,\n    tags: state.tags,\n  }))\n  .handleAction(requestTaxonomy.success, (state, { payload }) => ({\n    requestStatus: getRequestStatus().fulfilled,\n    pencilCount: payload.meta.pencils,\n    countries: payload.taxonomy.countries,\n    tags: payload.taxonomy.tags,\n  }))\n  .handleAction(requestTaxonomy.failure, state => ({\n    requestStatus: getRequestStatus().rejected,\n    pencilCount: state.pencilCount,\n    countries: state.countries,\n    tags: state.tags,\n  }))\n","import { mapKeys } from 'lodash'\nimport { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AppStore } from '../../store'\nimport { Pencil, PencilCountry } from './../Pencil/Pencil.interface'\nimport { taxonomyActions } from './Taxonomy.actions'\nimport { TaxonomyAppStore } from './Taxonomy.interface'\n\nexport const useTaxonomy = () => useSelector<AppStore, TaxonomyAppStore>(store => store.taxonomy)\n\nexport const useTaxonomyRequest = () => {\n  const dispatch = useDispatch()\n  const requestStatus = useTaxonomy().requestStatus\n\n  useEffect(() => {\n    dispatch(taxonomyActions.requestTaxonomy.request())\n  }, [dispatch])\n\n  return requestStatus\n}\n\nexport const usePencilFlag = (pencil: Pencil) => {\n  const normalizedCountries = useCountriesNormalizedBy('id')\n  const countryId = pencil.country.id\n\n  return normalizedCountries[countryId]?.flag\n}\n\nexport const useCountriesNormalizedBy = <K extends keyof PencilCountry>(\n  field: K,\n): Partial<Record<string, PencilCountry>> => {\n  const { countries } = useTaxonomy()\n\n  return useMemo(() => mapKeys(countries, field), [countries, field])\n}\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: `{pencils} из {countries}`,\n    id: 'Filter.title',\n  },\n\n  current: {\n    defaultMessage: `{country}: {pencils}`,\n    id: 'Filter.current',\n  },\n\n  all: {\n    defaultMessage: 'Все страны',\n    id: 'Filter.all',\n  },\n})\n","import React, { useEffect, useState } from 'react'\nimport { GlobeProps } from './Globe.interface'\n\nconst Globe = ({ animated }: GlobeProps) => {\n  const isAnimated = Boolean(animated)\n  const frames = ['🌍', '🌏', '🌎']\n  const speed = 400\n  const [index, setIndex] = useState(0)\n  useEffect(() => {\n    if (isAnimated) {\n      const spin = setTimeout(() => {\n        const nextIndex = index + 1 === frames.length ? 0 : index + 1\n        setIndex(nextIndex)\n      }, speed)\n      return () => {\n        clearTimeout(spin)\n      }\n    }\n  }, [isAnimated, speed, index, setIndex, frames])\n\n  return <>{frames[index]}</>\n}\n\nexport default Globe\n","import { Location } from 'history'\nimport React, { ChangeEvent, useEffect, useRef } from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { useHistory } from 'react-router-dom'\nimport { appMessages } from '../App/App.messages'\nimport { useCached } from '../Pencil/Pencil.hooks'\nimport { useTaxonomy } from '../Taxonomy/Taxonomy.hooks'\nimport { useFilter } from './Filter.hooks'\nimport messages from './Filter.messages'\nimport { mapFilterToQueryString, mapQueryStringToFilter } from './Filter.utils'\nimport Globe from './Globe'\n\nconst Filter = () => {\n  const [filter, setFilter] = useFilter()\n  const { countries, pencilCount } = useTaxonomy()\n  const cached = useCached()\n  const history = useHistory()\n  const intl = useIntl()\n  const select = useRef<HTMLSelectElement>(null)\n\n  const isFiltered = Boolean(filter.country || filter.tag)\n\n  useEffect(() => {\n    if (mapFilterToQueryString(filter) !== window.location.search) {\n      history.push(mapFilterToQueryString(filter))\n    }\n  }, [filter, history])\n\n  useEffect(() => {\n    const unlisten = history.listen(({ search }: Location, action) => {\n      if (action === 'POP') {\n        setFilter(mapQueryStringToFilter(search))\n      }\n    })\n\n    return unlisten\n  }, [filter, history, setFilter])\n\n  return (\n    <div className=\"Filter\">\n      <div className=\"Filter-control\">\n        <button\n          className=\"Filter-clear-button\"\n          onClick={() => {\n            select.current?.focus()\n            if (isFiltered) {\n              setFilter({ country: '', tag: '' })\n            }\n          }}\n        >\n          <span className=\"Filter-Globe\">\n            <Globe animated={isFiltered} />\n          </span>\n          <FormattedMessage\n            {...messages.title}\n            values={{\n              pencils: (\n                <span className=\"Filter-span\">\n                  <FormattedMessage {...appMessages.pencil} values={{ count: pencilCount }} />\n                </span>\n              ),\n              countries: (\n                <span className=\"Filter-span\">\n                  <FormattedMessage\n                    {...appMessages.country}\n                    values={{ count: countries.length + 1 }}\n                  />\n                </span>\n              ),\n            }}\n          />\n        </button>\n      </div>\n      <div className=\"Filter-control\">\n        <select\n          ref={select}\n          className=\"Filter-select\"\n          value={filter.country}\n          onChange={(e: ChangeEvent<HTMLSelectElement>) =>\n            setFilter({ country: e.target.value, tag: '' })\n          }\n        >\n          <option key=\"empty-country\" value=\"\">\n            {intl.formatMessage(messages.all)}\n          </option>\n          {countries.map(country => {\n            const isCurrent = filter.country === country.name\n            return (\n              <option key={country.name} value={country.name}>\n                {country.flag}{' '}\n                {isCurrent && cached\n                  ? intl.formatMessage(messages.current, {\n                      country: country.name,\n                      pencils: intl.formatMessage(appMessages.pencil, {\n                        count: cached.pages.pencils,\n                      }),\n                    })\n                  : country.name}\n              </option>\n            )\n          })}\n        </select>\n      </div>\n    </div>\n  )\n}\n\nexport default Filter\n","import classNames from 'classnames'\nimport React from 'react'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { mapFilterToQueryString } from '../../Filter/Filter.utils'\nimport { GridProps } from './Grid.interface'\n\nconst Grid = ({ pencils }: GridProps) => {\n  const [, setFilter] = useFilter()\n\n  return (\n    <div className=\"Grid\">\n      {pencils.map(pencil => {\n        const thumbSize = pencil.preview\n        const fullSize = pencil.photos[0]\n        const useSize = pencil.grid === 1 ? thumbSize : fullSize\n        const className = classNames('GridItem', {\n          size2: pencil.grid === 2,\n          size3: pencil.grid === 3,\n        })\n        const onClick = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n          e.preventDefault()\n          setFilter({ display: pencil.id })\n        }\n\n        return (\n          <a\n            href={mapFilterToQueryString({ display: pencil.id })}\n            onClick={onClick}\n            className={className}\n            key={pencil.id}\n            title={pencil.title}\n          >\n            <img srcSet={`${useSize}, ${fullSize} 2x`} alt={pencil.title} src={useSize} />\n          </a>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Grid\n","import { last, throttle } from 'lodash'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { useCached, usePencil } from '../Pencil/Pencil.hooks'\nimport { PencilQuery } from '../Pencil/Pencil.interface'\nimport { getNextPageNumberFromPages } from '../Pencil/Pencil.utils'\nimport { checkWindowScroll, requestFirstPage } from './Gallery.utils'\nimport Grid from './Grid'\n\nconst Gallery = () => {\n  const [filter] = useFilter()\n  const [queries, setQueries] = useState<PencilQuery[]>([])\n  const { pencils } = usePencil({ queries })\n  const cached = useCached(last(queries))\n  const { country, tag } = filter\n  const page = getNextPageNumberFromPages(cached?.pages)\n\n  useEffect(() => {\n    setQueries([requestFirstPage({ country, tag })])\n  }, [country, tag])\n\n  const loadNextPage = useCallback(() => {\n    if (page) {\n      setQueries([...queries, { ...filter, page }])\n    }\n  }, [filter, queries, setQueries, page])\n\n  const onScroll = useCallback(\n    throttle(() => checkWindowScroll() && loadNextPage(), 100, { leading: false }),\n    [loadNextPage],\n  )\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll)\n\n    return () => {\n      window.removeEventListener('scroll', onScroll)\n    }\n  }, [onScroll])\n\n  return <Grid pencils={pencils} />\n}\n\nexport default Gallery\n","import React from 'react'\nimport Globe from '../Filter/Globe'\n\nconst Loader = () => (\n  <div className=\"Loader\">\n    <Globe animated />\n  </div>\n)\n\nexport default Loader\n","import { geoPath, GeoRawProjection } from 'd3-geo'\nimport { geoProjection } from 'd3-geo'\nimport { FeatureCollection, GeoJsonProperties, Geometry } from 'geojson'\nimport { feature } from 'topojson-client'\nimport { Topology } from 'topojson-specification'\nimport { TopologyItem } from './Map.interface.js'\nimport geography from './world.json'\n\n// TODO: how to get the type properly?\nconst topology: Topology = geography as any\nconst featureCollection = feature(topology, topology.objects.world) as FeatureCollection<\n  Geometry,\n  GeoJsonProperties\n>\n\nconst timesRaw: GeoRawProjection = (lambda, phi) => {\n  // https://github.com/d3/d3-geo-projection/blob/master/src/times.js\n  const { PI, sin, tan } = Math\n  const t = tan(phi / 2)\n  const quarterPi = PI / 4\n  const s = sin(quarterPi * t)\n\n  return [lambda * (0.74482 - 0.34588 * s * s), 1.70711 * t]\n}\n\nconst projection = () => geoProjection(timesRaw).translate([mapWidth / 2, mapHeight / 2 + 40])\n\nexport const mapWidth = 800\nexport const mapHeight = 400\nexport const topologies = featureCollection.features.map<TopologyItem>(geo => {\n  const pathD = geoPath().projection(projection())(geo)\n  if (pathD === null) {\n    throw new Error()\n  }\n\n  return { ...geo, pathD }\n})\n","import classNames from 'classnames'\nimport { isUndefined } from 'lodash'\nimport React from 'react'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { useCountriesNormalizedBy } from '../Taxonomy/Taxonomy.hooks'\nimport { mapHeight, mapWidth, topologies } from './Map.utils'\n\nconst Map = () => {\n  const [filter, setFilter] = useFilter()\n  const normalizedIds = useCountriesNormalizedBy('id')\n\n  return (\n    <div className=\"Map\">\n      <svg\n        width={mapWidth}\n        height={mapHeight}\n        viewBox={`0 0 ${mapWidth} ${mapHeight}`}\n        className=\"Map-block\"\n      >\n        {topologies.map(topology => {\n          const geoId = topology.id\n          const country = geoId ? normalizedIds[geoId]?.name : undefined\n          const hasPencil = !isUndefined(country)\n          const isSelected = country === filter.country\n          const className = classNames(\n            'Map-country',\n            hasPencil && 'Map-has-pencil',\n            isSelected && 'Map-selected',\n          )\n          const onClick = () => {\n            if (isSelected) {\n              setFilter({ country: '' })\n            } else if (country) {\n              setFilter({ country })\n            }\n          }\n\n          return <path key={geoId} className={className} d={topology.pathD} onClick={onClick} />\n        })}\n      </svg>\n    </div>\n  )\n}\n\nexport default Map\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: 'В коробке с карандашами',\n    id: 'PageTitle.title',\n  },\n\n  pencil: {\n    defaultMessage: '{flag} {title}, {country}',\n    id: 'PageTitle.pencil',\n  },\n\n  country: {\n    defaultMessage: '{flag} {country}. {pencils}',\n    id: 'PageTitle.country',\n  },\n})\n","import { useEffect } from 'react'\nimport { useIntl } from 'react-intl'\nimport { appMessages } from '../App/App.messages'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { useCached, useNormalizedPencils } from '../Pencil/Pencil.hooks'\nimport { useCountriesNormalizedBy } from '../Taxonomy/Taxonomy.hooks'\nimport messages from './PageTitle.messages'\n\nconst PageTitle = () => {\n  const [filter] = useFilter()\n  const cached = useCached()\n  const intl = useIntl()\n  const normalizedPencils = useNormalizedPencils()\n  const normalizedCoutries = useCountriesNormalizedBy('name')\n  const pencil = normalizedPencils[filter.display]\n  const flag = normalizedCoutries[filter.country]?.flag\n  const count = filter.country ? cached?.pages.pencils : undefined\n\n  useEffect(() => {\n    if (pencil && flag) {\n      const { title, country } = pencil\n      document.title = intl.formatMessage(messages.pencil, { title, country: country.name, flag })\n    } else if (filter.country && count) {\n      document.title = intl.formatMessage(messages.country, {\n        flag,\n        country: filter.country,\n        pencils: intl.formatMessage(appMessages.pencil, { count }),\n      })\n    } else {\n      document.title = intl.formatMessage(messages.title)\n    }\n  }, [intl, pencil, count, filter, flag])\n\n  return null\n}\n\nexport default PageTitle\n","import { useCallback } from 'react'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { getEmptyFilter } from '../../Filter/Filter.utils'\nimport { getFilterFromLink } from './Info.utils'\n\nexport const usePseudoClick = () => {\n  const [, setFilter] = useFilter()\n  const handlePseudoLink = useCallback(\n    (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      e.stopPropagation()\n      const targetElement = e.target as HTMLElement\n      if (targetElement.tagName === 'A') {\n        const link = targetElement.getAttribute('href')\n        if (link) {\n          const filterFromLink = getFilterFromLink(link)\n          if (filterFromLink) {\n            e.preventDefault()\n            setFilter({ ...getEmptyFilter(), ...filterFromLink })\n          }\n        }\n      }\n    },\n    [setFilter],\n  )\n\n  return handlePseudoLink\n}\n","import { isEmpty, pick } from 'lodash'\nimport qs from 'qs'\nimport { Filter } from './../../Filter/Filter.interface'\nimport { getEmptyFilter } from './../../Filter/Filter.utils'\n\nexport const getFilterFromLink = (link: string): Filter | null => {\n  const queryPart = link.split('?')[1]\n  if (queryPart) {\n    const emptyFilter = getEmptyFilter()\n    const query = qs.parse(queryPart)\n    const filterKeys = Object.keys(emptyFilter) as Array<keyof Filter>\n    const keysFromQuery = pick<Filter, keyof Filter>(query, filterKeys)\n    if (!isEmpty(keysFromQuery)) {\n      return keysFromQuery\n    }\n  }\n\n  return null\n}\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  photo: {\n    defaultMessage: '{count, number} фото',\n    id: 'Info.photo',\n  },\n})\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { usePencilFlag } from '../../Taxonomy/Taxonomy.hooks'\nimport { usePseudoClick } from './Info.hooks'\nimport { InfoProps } from './Info.interface'\nimport messages from './Info.messages'\n\nconst Info = ({ pencil }: InfoProps) => {\n  const flag = usePencilFlag(pencil)\n  const handlePseudoLink = usePseudoClick()\n  const location = [pencil.country.name, pencil.city].filter(Boolean).join(', ')\n\n  return (\n    <div className=\"Info\">\n      <div className=\"Info-content\" onClick={handlePseudoLink}>\n        <h1>{pencil.title}</h1>\n\n        <h2>\n          {flag} {location}\n        </h2>\n\n        <article dangerouslySetInnerHTML={{ __html: pencil.content }} />\n\n        <p>\n          <FormattedMessage\n            tagName=\"b\"\n            {...messages.photo}\n            values={{ count: pencil.photos.length }}\n          />\n        </p>\n      </div>\n\n      {pencil.photos.map(src => (\n        <div key={src} className=\"Info-frame\">\n          <img className=\"Info-photo\" alt={pencil.title} src={src} />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Info\n","import React, { useEffect, useRef } from 'react'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport { usePencil } from '../Pencil/Pencil.hooks'\nimport Info from './Info'\n\nconst PencilInfo = () => {\n  const [{ display }, setFilter] = useFilter()\n  const scroller = useRef<HTMLDivElement>(null)\n  const { pencil } = usePencil({ id: display })\n  const closePencilInfo = () => setFilter({ display: '' })\n\n  useEffect(() => {\n    if (display === '') {\n      document.body.style.overflow = 'initial'\n    } else {\n      document.body.style.overflow = 'hidden'\n\n      if (scroller.current) {\n        scroller.current.scrollTop = 0\n      }\n    }\n  }, [display, scroller])\n\n  return pencil ? (\n    <div className=\"PencilInfo-backdrop\" onClick={closePencilInfo} ref={scroller}>\n      <div className=\"PencilInfo-content\">\n        <Info pencil={pencil} />\n      </div>\n    </div>\n  ) : null\n}\n\nexport default PencilInfo\n","import { defineMessages } from 'react-intl'\n\nexport default defineMessages({\n  title: {\n    defaultMessage: '{pencils} в категории \"{tag}\"',\n    id: 'TagHeader.title',\n  },\n})\n","import React, { useCallback, useEffect } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { appMessages } from '../../App/App.messages'\nimport { useFilter } from '../../Filter/Filter.hooks'\nimport { useCached, usePecnilRequestStatus } from '../../Pencil/Pencil.hooks'\nimport messages from './TagHeader.messages'\n\nconst TagHeader = () => {\n  const [{ tag }, setFilter] = useFilter()\n  const cache = useCached()\n  const requestStatus = usePecnilRequestStatus()\n  const dropTag = useCallback(() => setFilter({ tag: '' }), [setFilter])\n  const count = cache?.pages.pencils\n\n  useEffect(() => {\n    if (requestStatus.rejected) {\n      dropTag()\n    }\n  }, [dropTag, requestStatus])\n\n  return (\n    <button onClick={dropTag} className=\"TagHeader-drop\">\n      {count ? (\n        <FormattedMessage\n          tagName=\"h3\"\n          {...messages.title}\n          values={{\n            tag,\n            pencils: <FormattedMessage {...appMessages.pencil} values={{ count }} />,\n          }}\n        />\n      ) : null}\n    </button>\n  )\n}\n\nexport default TagHeader\n","import React from 'react'\nimport { FormattedMessage, IntlProvider } from 'react-intl'\nimport { BrowserRouter } from 'react-router-dom'\nimport Filter from '../Filter'\nimport { useFilter } from '../Filter/Filter.hooks'\nimport Gallery from '../Gallery'\nimport Loader from '../Loader'\nimport Map from '../Map'\nimport PageTitle from '../PageTitle'\nimport PencilInfo from '../PencilInfo'\nimport TagHeader from '../PencilInfo/TagHeader'\nimport { useTaxonomyRequest } from '../Taxonomy/Taxonomy.hooks'\nimport { appMessages } from './App.messages'\n\nconst App = () => {\n  const [{ tag }] = useFilter()\n  const { pending, fulfilled, rejected } = useTaxonomyRequest()\n\n  return (\n    <IntlProvider locale=\"ru\" defaultLocale=\"ru\">\n      {fulfilled ? (\n        <div className=\"App\">\n          <BrowserRouter>\n            <PageTitle />\n            <PencilInfo />\n            <nav className=\"App-block\">\n              <Filter />\n            </nav>\n            <section className=\"App-block\">{tag ? <TagHeader /> : <Map />}</section>\n            <main className=\"App-block\">\n              <Gallery />\n            </main>\n          </BrowserRouter>\n        </div>\n      ) : (\n        <div className=\"App-loading\">\n          {pending && <Loader />}\n          {rejected && (\n            <button onClick={() => window.location.reload()}>\n              <FormattedMessage {...appMessages.error} />\n            </button>\n          )}\n        </div>\n      )}\n    </IntlProvider>\n  )\n}\n\nexport default App\n","const apiUrl = process.env.REACT_APP_API_URL\nif (!apiUrl) {\n  throw new Error('no api url')\n}\n\nconst appConfig = {\n  apiUrl,\n}\n\nexport default appConfig\n","import appConfig from './appConfig'\n\nconst apiRequest = <T>(path: string): Promise<T> =>\n  fetch(appConfig.apiUrl + path)\n    .then(response => response.json())\n    .catch(error => {\n      console.error('api', path, error)\n      throw error\n    })\n\nexport default apiRequest\n","import apiRequest from '../../api'\nimport {\n  PencilListResponse,\n  PencilSingleRequest,\n  PencilSingleResponse,\n  PencilsListRequest,\n} from './Pencil.interface'\nimport {\n  mapPencilListQueryRequestUrl,\n  mapPencilsingleQueryRequestUrl,\n  mapRequestToCacheId,\n} from './Pencil.utils'\n\nexport const apiRequestSinglePencil = (request: PencilSingleRequest) =>\n  apiRequest<PencilSingleResponse>(mapPencilsingleQueryRequestUrl(request))\n\nexport const apiRequestPencilList = (request: PencilsListRequest) =>\n  apiRequest<PencilListResponse>(mapPencilListQueryRequestUrl(request.query)).then(data => {\n    data.cacheId = mapRequestToCacheId(request)\n    return data\n  })\n","import { combineEpics } from 'redux-observable'\nimport { pencilEpic } from './components/Pencil'\nimport { taxonomyEpic } from './components/Taxonomy'\n\nconst rootEpic = combineEpics(taxonomyEpic, pencilEpic)\n\nexport default rootEpic\n","import { ActionsObservable, ofType } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { catchError, map, mergeMap } from 'rxjs/operators'\nimport { ActionType, getType } from 'typesafe-actions'\nimport { taxonomyActions } from './Taxonomy.actions'\nimport { apiRequestTaxonomy } from './Taxonomy.api'\n\nexport default (\n  action$: ActionsObservable<ActionType<typeof taxonomyActions.requestTaxonomy.request>>,\n) =>\n  action$.pipe(\n    ofType(getType(taxonomyActions.requestTaxonomy.request)),\n    mergeMap(() =>\n      from(apiRequestTaxonomy()).pipe(\n        map(taxonomyActions.requestTaxonomy.success),\n        catchError(() => of(taxonomyActions.requestTaxonomy.failure())),\n      ),\n    ),\n  )\n","import apiRequest from '../../api'\nimport { TaxonomyResponse } from './Taxonomy.interface'\n\nexport const apiRequestTaxonomy = () => apiRequest<TaxonomyResponse>('/taxonomy/')\n","import { uniqBy } from 'lodash'\nimport { ActionsObservable, ofType } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { bufferTime, catchError, filter, map, mergeAll, mergeMap } from 'rxjs/operators'\nimport { ActionType, getType, isActionOf } from 'typesafe-actions'\nimport { pencilActions } from './Pencil.actions'\nimport { apiRequestPencilList, apiRequestSinglePencil } from './Pencil.api'\nimport { mapRequestToCacheId } from './Pencil.utils'\n\nexport default (\n  action$: ActionsObservable<\n    ActionType<\n      | typeof pencilActions.requestSinglePencil.request\n      | typeof pencilActions.requestPencilList.request\n    >\n  >,\n) =>\n  action$.pipe(\n    ofType(\n      getType(pencilActions.requestSinglePencil.request),\n      getType(pencilActions.requestPencilList.request),\n    ),\n    bufferTime(66),\n    filter(actions => actions.length > 0),\n    mergeMap(actions =>\n      from(\n        uniqBy(actions, ({ payload }) => mapRequestToCacheId(payload)).map(action => {\n          if (isActionOf(pencilActions.requestSinglePencil.request)(action)) {\n            return from(apiRequestSinglePencil(action.payload)).pipe(\n              map(pencilActions.requestSinglePencil.success),\n              catchError(() => of(pencilActions.requestSinglePencil.failure())),\n            )\n          } else if (isActionOf(pencilActions.requestPencilList.request)(action)) {\n            return from(apiRequestPencilList(action.payload)).pipe(\n              map(pencilActions.requestPencilList.success),\n              catchError(() => of(pencilActions.requestPencilList.failure())),\n            )\n          }\n          throw new Error()\n        }),\n      ).pipe(mergeAll()),\n    ),\n  )\n","import { combineReducers } from 'redux'\nimport { filterReducer as filter } from './components/Filter'\nimport { pencilReducer as pencils } from './components/Pencil'\nimport { taxonomyReducer as taxonomy } from './components/Taxonomy'\n\nconst rootReducer = combineReducers({ taxonomy, pencils, filter })\n\nexport default rootReducer\n","import { applyMiddleware, createStore, Store } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { createEpicMiddleware } from 'redux-observable'\nimport rootEpic from './rootEpic'\nimport rootReducer from './rootReducer'\n\nconst epicMiddleware = createEpicMiddleware()\nconst store: Store<AppStore> = createStore(\n  rootReducer,\n  {},\n  composeWithDevTools(applyMiddleware(epicMiddleware)),\n)\nepicMiddleware.run(rootEpic)\n\nexport type AppStore = ReturnType<typeof rootReducer>\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport './index.css'\nimport store from './store'\n\nif (!Intl.PluralRules) {\n  // tslint:disable-next-line: no-var-requires\n  require('intl-pluralrules')\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}